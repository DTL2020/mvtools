; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\mvrecalculate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DM@KFAJKFEG@MRecalculate?3?5super?5clip?5does?5no@ ; `string'
PUBLIC	??_C@_0CA@MMPJLNGK@MRecalculate?5?3?5wrong?5frame?5size?$AA@ ; `string'
PUBLIC	??_C@_0BP@HBACFLFE@MRecalculate?3?5wrong?5pixel?5type?$AA@ ; `string'
PUBLIC	??_C@_0FD@KELCMOJD@MVRecalculate?3?5Block?8s?5size?5must@ ; `string'
PUBLIC	??_C@_0DD@OHJHKEID@MRecalculate?3?5overlap?5must?5be?5le@ ; `string'
PUBLIC	??_C@_0CI@NEKCNLHA@MRecalculate?3?5overlap?5must?5be?5mo@ ; `string'
PUBLIC	??_C@_0DM@EIOJJPEN@MRecalculate?3?5Block?5sizes?5must?5b@ ; `string'
PUBLIC	??_C@_0DI@DJHMBLJL@MRecalculate?3?5overlap?5must?5be?5mo@ ; `string'
PUBLIC	??_C@_0CL@BGMBCEHA@MRecalculate?3?5out?5file?5can?5not?5b@ ; `string'
PUBLIC	??_R2MVRecalculate@@8				; MVRecalculate::`RTTI Base Class Array'
PUBLIC	??_R3MVRecalculate@@8				; MVRecalculate::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@MVRecalculate@@8			; MVRecalculate::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMVRecalculate@@@8			; MVRecalculate `RTTI Type Descriptor'
PUBLIC	??_R4MVRecalculate@@6B@				; MVRecalculate::`RTTI Complete Object Locator'
PUBLIC	??_7MVRecalculate@@6B@				; MVRecalculate::`vftable'
;	COMDAT ??_7MVRecalculate@@6B@
CONST	SEGMENT
??_7MVRecalculate@@6B@ DD FLAT:??_R4MVRecalculate@@6B@	; MVRecalculate::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@MVRecalculate@@UAGHHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EMVRecalculate@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4MVRecalculate@@6B@
rdata$r	SEGMENT
??_R4MVRecalculate@@6B@ DD 00H				; MVRecalculate::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMVRecalculate@@@8
	DD	FLAT:??_R3MVRecalculate@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMVRecalculate@@@8
data$r	SEGMENT
??_R0?AVMVRecalculate@@@8 DD FLAT:??_7type_info@@6B@	; MVRecalculate `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMVRecalculate@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MVRecalculate@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MVRecalculate@@8 DD FLAT:??_R0?AVMVRecalculate@@@8 ; MVRecalculate::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MVRecalculate@@8
rdata$r	ENDS
;	COMDAT ??_R3MVRecalculate@@8
rdata$r	SEGMENT
??_R3MVRecalculate@@8 DD 00H				; MVRecalculate::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2MVRecalculate@@8
rdata$r	ENDS
;	COMDAT ??_R2MVRecalculate@@8
rdata$r	SEGMENT
??_R2MVRecalculate@@8 DD FLAT:??_R1A@?0A@EA@MVRecalculate@@8 ; MVRecalculate::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CL@BGMBCEHA@MRecalculate?3?5out?5file?5can?5not?5b@
CONST	SEGMENT
??_C@_0CL@BGMBCEHA@MRecalculate?3?5out?5file?5can?5not?5b@ DB 'MRecalcula'
	DB	'te: out file can not be created!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DJHMBLJL@MRecalculate?3?5overlap?5must?5be?5mo@
CONST	SEGMENT
??_C@_0DI@DJHMBLJL@MRecalculate?3?5overlap?5must?5be?5mo@ DB 'MRecalculat'
	DB	'e: overlap must be more even for divide mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@EIOJJPEN@MRecalculate?3?5Block?5sizes?5must?5b@
CONST	SEGMENT
??_C@_0DM@EIOJJPEN@MRecalculate?3?5Block?5sizes?5must?5b@ DB 'MRecalculat'
	DB	'e: Block sizes must be 8 or more for divide mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NEKCNLHA@MRecalculate?3?5overlap?5must?5be?5mo@
CONST	SEGMENT
??_C@_0CI@NEKCNLHA@MRecalculate?3?5overlap?5must?5be?5mo@ DB 'MRecalculat'
	DB	'e: overlap must be more even', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OHJHKEID@MRecalculate?3?5overlap?5must?5be?5le@
CONST	SEGMENT
??_C@_0DD@OHJHKEID@MRecalculate?3?5overlap?5must?5be?5le@ DB 'MRecalculat'
	DB	'e: overlap must be less than block size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@KELCMOJD@MVRecalculate?3?5Block?8s?5size?5must@
CONST	SEGMENT
??_C@_0FD@KELCMOJD@MVRecalculate?3?5Block?8s?5size?5must@ DB 'MVRecalcula'
	DB	'te: Block''s size must be 4x4, 8x4, 8x8, 16x2, 16x8, 16x16, 3'
	DB	'2x16, 32x32', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HBACFLFE@MRecalculate?3?5wrong?5pixel?5type?$AA@
CONST	SEGMENT
??_C@_0BP@HBACFLFE@MRecalculate?3?5wrong?5pixel?5type?$AA@ DB 'MRecalcula'
	DB	'te: wrong pixel type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MMPJLNGK@MRecalculate?5?3?5wrong?5frame?5size?$AA@
CONST	SEGMENT
??_C@_0CA@MMPJLNGK@MRecalculate?5?3?5wrong?5frame?5size?$AA@ DB 'MRecalcu'
	DB	'late : wrong frame size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KFAJKFEG@MRecalculate?3?5super?5clip?5does?5no@
CONST	SEGMENT
??_C@_0DM@KFAJKFEG@MRecalculate?3?5super?5clip?5does?5no@ DB 'MRecalculat'
	DB	'e: super clip does not contain needed color data', 00H ; `string'
PUBLIC	??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z	; MVRecalculate::SrcRefData::SrcRefData
PUBLIC	??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z ; std::allocator<MVRecalculate::SrcRefData>::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
PUBLIC	??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@$$QAV34@@Z ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
PUBLIC	??$forward@VSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z ; std::forward<MVRecalculate::SrcRefData>
PUBLIC	??1SrcRefData@MVRecalculate@@QAE@XZ		; MVRecalculate::SrcRefData::~SrcRefData
PUBLIC	??_GSrcRefData@MVRecalculate@@QAEPAXI@Z		; MVRecalculate::SrcRefData::`scalar deleting destructor'
PUBLIC	??0SrcRefData@MVRecalculate@@QAE@XZ		; MVRecalculate::SrcRefData::SrcRefData
PUBLIC	??$destroy@VSrcRefData@MVRecalculate@@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ; std::allocator<MVRecalculate::SrcRefData>::destroy<MVRecalculate::SrcRefData>
PUBLIC	??$construct@VSrcRefData@MVRecalculate@@V12@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
PUBLIC	??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ; std::allocator<MVRecalculate::SrcRefData>::construct<MVRecalculate::SrcRefData>
PUBLIC	??$move@AAVSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z ; std::move<MVRecalculate::SrcRefData &>
PUBLIC	??$destroy@VSrcRefData@MVRecalculate@@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::destroy<MVRecalculate::SrcRefData>
PUBLIC	??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	??$_Ptr_move_cat@VSrcRefData@MVRecalculate@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVSrcRefData@MVRecalculate@@0@Z ; std::_Ptr_move_cat<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
PUBLIC	??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData>
PUBLIC	??$destroy@VSrcRefData@MVRecalculate@@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::destroy<MVRecalculate::SrcRefData>
PUBLIC	??$_Rechecked@PAVSrcRefData@MVRecalculate@@PAV12@@std@@YAAAPAVSrcRefData@MVRecalculate@@AAPAV12@PAV12@@Z ; std::_Rechecked<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	??$_Unchecked@PAVSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z ; std::_Unchecked<MVRecalculate::SrcRefData *>
PUBLIC	??$construct@VSrcRefData@MVRecalculate@@$$V@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData>
PUBLIC	??$_Unfancy@VSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z ; std::_Unfancy<MVRecalculate::SrcRefData>
PUBLIC	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
PUBLIC	??$_Uninitialized_move@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ; std::_Uninitialized_move<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	??$_Uninitialized_default_fill_n1@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Uninitialized_default_fill_n1<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	??0?$allocator@VSrcRefData@MVRecalculate@@@std@@QAE@XZ ; std::allocator<MVRecalculate::SrcRefData>::allocator<MVRecalculate::SrcRefData>
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >
PUBLIC	??$_Destroy_range@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
PUBLIC	??$_Umove@PAVSrcRefData@MVRecalculate@@@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEPAVSrcRefData@MVRecalculate@@PAV23@00@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Umove<MVRecalculate::SrcRefData *>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1><>
PUBLIC	??$_Uninitialized_default_fill_n@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ; std::_Uninitialized_default_fill_n<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	?max_size@?$allocator@VSrcRefData@MVRecalculate@@@std@@QBEIXZ ; std::allocator<MVRecalculate::SrcRefData>::max_size
PUBLIC	?allocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z ; std::allocator<MVRecalculate::SrcRefData>::allocate
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAIABV?$allocator@VSrcRefData@MVRecalculate@@@2@@Z ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z ; std::allocator<MVRecalculate::SrcRefData>::deallocate
PUBLIC	?capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::capacity
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myend
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::allocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::max_size
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_second
PUBLIC	?_Unused_capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Unused_capacity
PUBLIC	?max_size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::max_size
PUBLIC	?_Destroy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXPAVSrcRefData@MVRecalculate@@0@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Destroy
PUBLIC	?_Grow_to@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEII@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Grow_to
PUBLIC	?_Reallocate@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reallocate
PUBLIC	?_Xlen@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEXXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Xlen
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Orphan_all
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myend
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_first
PUBLIC	?size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::size
PUBLIC	?_Pop_back_n@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Pop_back_n
PUBLIC	?_Reserve@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reserve
PUBLIC	?_Tidy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Tidy
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Mylast
PUBLIC	??0?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	??1?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::~vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >
PUBLIC	?resize@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::resize
PUBLIC	??A?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEAAVSrcRefData@MVRecalculate@@I@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::operator[]
PUBLIC	?load_src_frame@MVRecalculate@@AAEXAAVMVGroupOfFrames@@AAVPVideoFrame@@ABVMVAnalysisData@@@Z ; MVRecalculate::load_src_frame
PUBLIC	?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; MVRecalculate::GetFrame
PUBLIC	??1MVRecalculate@@UAE@XZ			; MVRecalculate::~MVRecalculate
PUBLIC	??_GMVRecalculate@@UAEPAXI@Z			; MVRecalculate::`scalar deleting destructor'
PUBLIC	?SetCacheHints@MVRecalculate@@UAGHHH@Z		; MVRecalculate::SetCacheHints
PUBLIC	??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z ; MVRecalculate::MVRecalculate
EXTRN	??_EMVRecalculate@@UAEPAXI@Z:PROC		; MVRecalculate::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$10
	DD	06H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$11
	DD	06H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$48
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$49
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1MVRecalculate@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1MVRecalculate@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1MVRecalculate@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MVRecalculate@@UAE@XZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$16
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$17
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\mvanalysisdata.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\mvanalysisdata.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\mvanalysisdata.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\mvanalysisdata.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\mvanalysisdata.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\conc\objpool.hpp
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
;	COMDAT ??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
$T3 = -40						; size = 4
_this$ = -36						; size = 4
_nHeight$1$ = -32					; size = 4
$T4 = -32						; size = 4
_pAnalyseFilter$1$ = -28				; size = 4
tv1895 = -28						; size = 4
_nSuperLevels$1$ = -24					; size = 4
_nSuperPel$1$ = -20					; size = 4
_srd_index$1$ = -20					; size = 4
_nSuperModeYUV$1$ = -16					; size = 4
tv2053 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__super$ = 8						; size = 4
__vectors$ = 12						; size = 4
__thSAD$ = 16						; size = 4
_nSuperHPad$1$ = 20					; size = 4
__smooth$ = 20						; size = 4
__blksizex$ = 24					; size = 4
__blksizey$ = 28					; size = 4
_st$ = 32						; size = 4
$T5 = 36						; size = 4
_stp$ = 36						; size = 4
_lambda$ = 40						; size = 4
tv1894 = 44						; size = 4
_chroma$ = 44						; size = 1
__pnew$ = 48						; size = 4
__overlapx$ = 52					; size = 4
_nBlkY$1$ = 56						; size = 4
__overlapy$ = 56					; size = 4
__outfilename$ = 60					; size = 4
__dctmode$ = 64						; size = 4
_nBlkX$1$ = 68						; size = 4
__divide$ = 68						; size = 4
__sadx264$dead$ = 72					; size = 4
__isse$ = 76						; size = 1
$T6 = 80						; size = 4
$T7 = 80						; size = 4
$T8 = 80						; size = 4
$T9 = 80						; size = 4
__meander$ = 80						; size = 1
_nSuperVPad$1$ = 84					; size = 4
$T10 = 84						; size = 4
_trad$ = 84						; size = 4
_nSuperWidth$1$ = 88					; size = 4
_mt_flag$ = 88						; size = 1
_env$ = 92						; size = 4
??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z PROC ; MVRecalculate::MVRecalculate, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; File c:\github\mvtools\sources\include\avisynth.h

; 937  :   PClip(const PClip& x) AVS_BakedCode( AVS_LinkCall(PClip_CONSTRUCTOR1)(x) )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 48   :   : GenericVideoFilter(_super)

	push	ecx
	mov	ecx, esp
; File c:\github\mvtools\sources\include\avisynth.h

; 937  :   PClip(const PClip& x) AVS_BakedCode( AVS_LinkCall(PClip_CONSTRUCTOR1)(x) )

	test	eax, eax
	je	SHORT $LN94@MVRecalcul
	cmp	DWORD PTR [eax], 232			; 000000e8H
	jbe	SHORT $LN94@MVRecalcul
	mov	eax, DWORD PTR [eax+232]
	lea	edx, DWORD PTR __super$[ebp]
	push	edx
	call	eax
$LN94@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 48   :   : GenericVideoFilter(_super)

	mov	ecx, esi
	call	??0GenericVideoFilter@@QAE@VPClip@@@Z	; GenericVideoFilter::GenericVideoFilter

; 49   :   , _srd_arr()

	lea	edi, DWORD PTR [esi+64]

; 55   : {

	mov	DWORD PTR [esi], OFFSET ??_7MVRecalculate@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [edi], 0

; 486  : 		_Mylast(),

	mov	DWORD PTR [edi+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [edi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 697  : 		: _Myptr(_Ptr)

	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR [esi+152], 0
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 52   :   , _dct_pool()

	lea	ecx, DWORD PTR [esi+160]
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	call	??0?$ObjPool@VDCTClass@@@conc@@QAE@XZ	; conc::ObjPool<DCTClass>::ObjPool<DCTClass>

; 53   :   , _nbr_srd((trad > 0) ? trad * 2 : 1)

	mov	eax, DWORD PTR _trad$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	test	eax, eax
	jle	SHORT $LN54@MVRecalcul
	add	eax, eax
	jmp	SHORT $LN55@MVRecalcul
$LN54@MVRecalcul:
	mov	eax, 1
$LN55@MVRecalcul:

; 54   :   , _mt_flag(mt_flag)

	mov	ecx, DWORD PTR _mt_flag$[ebp]
	mov	BYTE PTR [esi+568], cl

; 56   :   _srd_arr.resize(_nbr_srd);

	mov	ecx, edi
	push	eax
	mov	DWORD PTR [esi+564], eax
	call	?resize@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::resize

; 57   :   for (int srd_index = 0; srd_index < _nbr_srd; ++srd_index)

	xor	ebx, ebx
	mov	DWORD PTR _srd_index$1$[ebp], ebx
	cmp	DWORD PTR [esi+564], ebx
	jle	$LN3@MVRecalcul

; 53   :   , _nbr_srd((trad > 0) ? trad * 2 : 1)

	xor	eax, eax
	mov	DWORD PTR tv2053[ebp], eax
	npad	1
$LL4@MVRecalcul:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1242 : 		return (*(this->_Myfirst() + _Pos));

	mov	edi, DWORD PTR [edi]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 60   :     srd._clip_sptr = SharedPtr <MVClip>(

	push	240					; 000000f0H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1242 : 		return (*(this->_Myfirst() + _Pos));

	add	edi, eax
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 60   :     srd._clip_sptr = SharedPtr <MVClip>(

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	push	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR __vectors$[ebp]
	push	DWORD PTR [esi+564]
	push	DWORD PTR _env$[ebp]
	push	255					; 000000ffH
	push	999999					; 000f423fH
	push	ecx
	mov	ecx, eax
	call	??0MVClip@@QAE@ABVPClip@@HHPAVIScriptEnvironment@@HH@Z ; MVClip::MVClip
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	DWORD PTR $T10[ebp], ecx
; File c:\github\mvtools\sources\sharedptr.hpp

; 46   : ,	_count_ptr ((ptr != 0) ? new long (1) : 0)

	test	ecx, ecx
	je	SHORT $LN126@MVRecalcul
	push	4
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, DWORD PTR $T10[ebp]
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR [ebx], 1
	jmp	SHORT $LN127@MVRecalcul
$LN126@MVRecalcul:
	xor	ebx, ebx
$LN127@MVRecalcul:

; 81   : 	if (other._obj_ptr != _obj_ptr)

	mov	eax, DWORD PTR [edi+176]
	cmp	ecx, eax
	je	SHORT $LN138@MVRecalcul

; 284  : 	if (_obj_ptr != 0)

	test	eax, eax
	je	SHORT $LN133@MVRecalcul

; 285  : 	{
; 286  : 		-- *_count_ptr;

	mov	eax, DWORD PTR [edi+180]
	dec	DWORD PTR [eax]

; 287  : 		
; 288  : 		if (*_count_ptr == 0)

	mov	eax, DWORD PTR [edi+180]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN133@MVRecalcul

; 289  : 		{
; 290  : 			delete _obj_ptr;

	mov	ecx, DWORD PTR [edi+176]
	test	ecx, ecx
	je	SHORT $LN135@MVRecalcul
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+24]
$LN135@MVRecalcul:

; 291  : 			_obj_ptr = 0;
; 292  : 
; 293  : 			delete _count_ptr;

	push	4
	push	DWORD PTR [edi+180]
	mov	DWORD PTR [edi+176], 0
	call	??3@YAXPAXI@Z				; operator delete
	mov	ecx, DWORD PTR $T10[ebp]
	add	esp, 8

; 294  : 			_count_ptr = 0;

	mov	DWORD PTR [edi+180], 0
$LN133@MVRecalcul:

; 84   : 		_obj_ptr = other._obj_ptr;

	mov	DWORD PTR [edi+176], ecx

; 85   : 		_count_ptr = other._count_ptr;

	mov	DWORD PTR [edi+180], ebx

; 259  : 	if (_count_ptr != 0)

	test	ebx, ebx
	je	SHORT $LN138@MVRecalcul

; 260  : 	{
; 261  : 		++ *_count_ptr;

	inc	DWORD PTR [ebx]
$LN138@MVRecalcul:

; 284  : 	if (_obj_ptr != 0)

	test	ecx, ecx
	je	SHORT $LN2@MVRecalcul

; 285  : 	{
; 286  : 		-- *_count_ptr;

	add	DWORD PTR [ebx], -1

; 287  : 		
; 288  : 		if (*_count_ptr == 0)

	jne	SHORT $LN2@MVRecalcul

; 289  : 		{
; 290  : 			delete _obj_ptr;

	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+24]

; 291  : 			_obj_ptr = 0;
; 292  : 
; 293  : 			delete _count_ptr;

	push	4
	push	ebx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 57   :   for (int srd_index = 0; srd_index < _nbr_srd; ++srd_index)

	mov	ebx, DWORD PTR _srd_index$1$[ebp]
	lea	edi, DWORD PTR [esi+64]
	mov	eax, DWORD PTR tv2053[ebp]
	inc	ebx
	add	eax, 184				; 000000b8H
	mov	DWORD PTR _srd_index$1$[ebp], ebx
	mov	DWORD PTR tv2053[ebp], eax
	cmp	ebx, DWORD PTR [esi+564]
	jl	$LL4@MVRecalcul
	lea	edi, DWORD PTR [esi+64]
$LN3@MVRecalcul:
; File c:\github\mvtools\sources\include\avisynth.h

; 692  :   int ComponentSize() const AVS_BakedCode(return AVS_LinkCallOptDefault(ComponentSize, 1))

	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	edx, edx
	je	SHORT $LN151@MVRecalcul
	cmp	DWORD PTR [edx], 532			; 00000214H
	jbe	SHORT $LN151@MVRecalcul
	mov	eax, DWORD PTR [edx+532]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 65   :   pixelsize = vi.ComponentSize();

	lea	ecx, DWORD PTR [esi+16]
; File c:\github\mvtools\sources\include\avisynth.h

; 692  :   int ComponentSize() const AVS_BakedCode(return AVS_LinkCallOptDefault(ComponentSize, 1))

	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN152@MVRecalcul
$LN151@MVRecalcul:
	mov	eax, 1
$LN152@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 65   :   pixelsize = vi.ComponentSize();

	mov	DWORD PTR [esi+572], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 695  :   int BitsPerComponent() const AVS_BakedCode(return AVS_LinkCallOptDefault(BitsPerComponent, 8))

	test	edx, edx
	je	SHORT $LN155@MVRecalcul
	cmp	DWORD PTR [edx], 536			; 00000218H
	jbe	SHORT $LN155@MVRecalcul
	mov	eax, DWORD PTR [edx+536]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 66   :   bits_per_pixel = vi.BitsPerComponent();

	lea	ecx, DWORD PTR [esi+16]
; File c:\github\mvtools\sources\include\avisynth.h

; 695  :   int BitsPerComponent() const AVS_BakedCode(return AVS_LinkCallOptDefault(BitsPerComponent, 8))

	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN156@MVRecalcul
$LN155@MVRecalcul:
	mov	eax, 8
$LN156@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 77   :   vi.num_frames *= _nbr_srd;

	mov	ecx, DWORD PTR [esi+564]
	mov	DWORD PTR [esi+576], eax
	mov	eax, DWORD PTR [esi+32]
	mov	ebx, DWORD PTR [esi+64]
	mov	edi, DWORD PTR [edi]
	add	ebx, 88					; 00000058H
	imul	eax, ecx
	mov	DWORD PTR [esi+32], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 671  :   void MulDivFPS(unsigned multiplier, unsigned divisor) AVS_BakedCode(AVS_LinkCall(MulDivFPS)(multiplier, divisor))

	test	edx, edx
	je	SHORT $LN181@MVRecalcul
	cmp	DWORD PTR [edx], 164			; 000000a4H
	jbe	SHORT $LN181@MVRecalcul
	mov	eax, DWORD PTR [edx+164]
	push	1
	push	ecx
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 78   :   vi.MulDivFPS(_nbr_srd, 1);

	lea	ecx, DWORD PTR [esi+16]
; File c:\github\mvtools\sources\include\avisynth.h

; 671  :   void MulDivFPS(unsigned multiplier, unsigned divisor) AVS_BakedCode(AVS_LinkCall(MulDivFPS)(multiplier, divisor))

	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN181@MVRecalcul:

; 942  :   IClip* operator->() const { return p; }

	mov	ecx, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 80   :   smooth = _smooth;

	mov	eax, DWORD PTR __smooth$[ebp]
	mov	DWORD PTR [esi+120], eax
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN69@MVRecalcul
; File c:\github\mvtools\sources\include\avisynth.h

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN68@MVRecalcul
$LN69@MVRecalcul:
	push	ecx
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 83   :   memcpy(&params, &child->GetVideoInfo().num_audio_samples, 8);

	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN68@MVRecalcul:
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _nSuperVPad$1$[ebp], ecx
	mov	ecx, DWORD PTR [eax+36]

; 84   :   const int		nHeight = params.nHeight;

	mov	eax, DWORD PTR _nSuperVPad$1$[ebp]
	movzx	eax, ax
	mov	DWORD PTR _nHeight$1$[ebp], eax

; 85   :   const int		nSuperHPad = params.nHPad;

	mov	eax, DWORD PTR _nSuperVPad$1$[ebp]

; 86   :   const int		nSuperVPad = params.nVPad;

	shr	DWORD PTR _nSuperVPad$1$[ebp], 24	; 00000018H
	shr	eax, 16					; 00000010H
	movzx	eax, al
	mov	DWORD PTR _nSuperHPad$1$[ebp], eax

; 87   :   const int		nSuperPel = params.nPel;

	movzx	eax, cl
	mov	DWORD PTR _nSuperPel$1$[ebp], eax

; 88   :   const int		nSuperModeYUV = params.nModeYUV;

	mov	eax, ecx
	shr	eax, 8
	movzx	eax, al

; 89   :   const int		nSuperLevels = params.nLevels;

	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _nSuperModeYUV$1$[ebp], eax
	movzx	eax, cl

; 91   :   if (vi.IsY())

	lea	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR _nSuperLevels$1$[ebp], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 707  :   bool IsY()   const AVS_BakedCode( return AVS_LinkCallOpt(IsY, IsY8) )

	test	edx, edx
	je	SHORT $LN347@MVRecalcul
	mov	eax, DWORD PTR [edx]
	cmp	eax, 552				; 00000228H
	ja	SHORT $LN191@MVRecalcul
	cmp	eax, 48					; 00000030H
	jbe	SHORT $LN347@MVRecalcul
	mov	eax, DWORD PTR [edx+48]
	jmp	SHORT $LN358@MVRecalcul
$LN191@MVRecalcul:
	mov	eax, DWORD PTR [edx+552]
$LN358@MVRecalcul:
	call	eax
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 91   :   if (vi.IsY())

	movzx	ecx, BYTE PTR _chroma$[ebp]
	xor	edx, edx
; File c:\github\mvtools\sources\include\avisynth.h

; 707  :   bool IsY()   const AVS_BakedCode( return AVS_LinkCallOpt(IsY, IsY8) )

	movzx	eax, al
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 91   :   if (vi.IsY())

	test	al, al
	cmovne	ecx, edx
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR tv1894[ebp], ecx
	mov	eax, ecx
	jmp	SHORT $LN10@MVRecalcul
$LN347@MVRecalcul:
	mov	al, BYTE PTR _chroma$[ebp]
	mov	DWORD PTR tv1894[ebp], eax
$LN10@MVRecalcul:

; 92   :     chroma = false; // silent fallback
; 93   : 
; 94   :   nModeYUV = chroma ? YUVPLANES : YPLANE;

	test	al, al
	mov	DWORD PTR tv1895[ebp], 7
	mov	ecx, 1
	cmovne	ecx, DWORD PTR tv1895[ebp]

; 95   :   if ((nModeYUV & nSuperModeYUV) != nModeYUV)

	mov	eax, ecx
	mov	DWORD PTR [esi+560], ecx
	and	eax, DWORD PTR _nSuperModeYUV$1$[ebp]
	cmp	eax, ecx
	je	SHORT $LN11@MVRecalcul

; 96   :   {
; 97   :     env->ThrowError(

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0DM@KFAJKFEG@MRecalculate?3?5super?5clip?5does?5no@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	add	esp, 8
$LN11@MVRecalcul:
	mov	eax, DWORD PTR __vectors$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	cmp	ecx, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN71@MVRecalcul
; File c:\github\mvtools\sources\include\avisynth.h

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	add	eax, 16					; 00000010H
	jmp	SHORT $LN70@MVRecalcul
$LN71@MVRecalcul:
	push	eax
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 104  :     reinterpret_cast <MVAnalysisData *> (_vectors->GetVideoInfo().nchannels);

	call	ecx
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN70@MVRecalcul:
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pAnalyseFilter$1$[ebp], ecx
; File c:\github\mvtools\sources\mvanalysisdata.h

; 119  :    inline int GetWidth() const { return nWidth; }

	mov	eax, DWORD PTR [ecx+36]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 111  :   analysisData.nWidth = pAnalyseFilter->GetWidth();

	mov	DWORD PTR [edi+36], eax
; File c:\github\mvtools\sources\mvanalysisdata.h

; 120  :    inline int GetHeight() const { return nHeight; }

	mov	eax, DWORD PTR [ecx+40]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 112  :   analysisData.nHeight = pAnalyseFilter->GetHeight();

	mov	DWORD PTR [edi+40], eax
; File c:\github\mvtools\sources\mvanalysisdata.h

; 124  :    inline int GetPixelType() const { return pixelType; }

	mov	eax, DWORD PTR [ecx+60]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 113  :   analysisData.pixelType = pAnalyseFilter->GetPixelType();

	mov	DWORD PTR [edi+60], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 707  :   bool IsY()   const AVS_BakedCode( return AVS_LinkCallOpt(IsY, IsY8) )

	test	edx, edx
	je	SHORT $LN215@MVRecalcul
	mov	eax, DWORD PTR [edx]
	cmp	eax, 552				; 00000228H
	ja	SHORT $LN209@MVRecalcul
	cmp	eax, 48					; 00000030H
	jbe	SHORT $LN340@MVRecalcul
	mov	eax, DWORD PTR [edx+48]
	jmp	SHORT $LN359@MVRecalcul
$LN209@MVRecalcul:
	mov	eax, DWORD PTR [edx+552]
$LN359@MVRecalcul:
	lea	ecx, DWORD PTR [esi+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 114  :   if (!vi.IsY()) {

	test	al, al
	jne	SHORT $LN12@MVRecalcul
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN340@MVRecalcul:
; File c:\github\mvtools\sources\include\avisynth.h

; 662  :   int GetPlaneHeightSubsampling(int plane) const AVS_BakedCode(return AVS_LinkCall(GetPlaneHeightSubsampling)(plane))

	test	edx, edx
	je	SHORT $LN215@MVRecalcul
	cmp	DWORD PTR [edx], 148			; 00000094H
	jbe	SHORT $LN215@MVRecalcul
	mov	eax, DWORD PTR [edx+148]
	lea	ecx, DWORD PTR [esi+16]
	push	2
	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	ecx, eax
	jmp	SHORT $LN216@MVRecalcul
$LN12@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 119  :     analysisData.yRatioUV = 1; // n/a

	mov	DWORD PTR [edi+64], 1

; 120  :     analysisData.xRatioUV = 1; // n/a

	mov	DWORD PTR [edi+68], 1
	jmp	SHORT $LN13@MVRecalcul
$LN215@MVRecalcul:
; File c:\github\mvtools\sources\include\avisynth.h

; 662  :   int GetPlaneHeightSubsampling(int plane) const AVS_BakedCode(return AVS_LinkCall(GetPlaneHeightSubsampling)(plane))

	xor	ecx, ecx
$LN216@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 115  :     analysisData.yRatioUV = 1 << vi.GetPlaneHeightSubsampling(PLANAR_U);

	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [edi+64], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 661  :   int GetPlaneWidthSubsampling(int plane) const AVS_BakedCode(return AVS_LinkCall(GetPlaneWidthSubsampling)(plane))

	test	edx, edx
	je	SHORT $LN219@MVRecalcul
	cmp	DWORD PTR [edx], 144			; 00000090H
	jbe	SHORT $LN219@MVRecalcul
	mov	eax, DWORD PTR [edx+144]
	lea	ecx, DWORD PTR [esi+16]
	push	2
	call	eax
	mov	ecx, eax
	jmp	SHORT $LN220@MVRecalcul
$LN219@MVRecalcul:
	xor	ecx, ecx
$LN220@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 116  :     analysisData.xRatioUV = 1 << vi.GetPlaneWidthSubsampling(PLANAR_U);

	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [edi+68], eax
$LN13@MVRecalcul:

; 121  :   }
; 122  :   analysisData.pixelsize = pixelsize;

	mov	eax, DWORD PTR [esi+572]
	mov	DWORD PTR [edi+72], eax

; 123  :   analysisData.bits_per_pixel = bits_per_pixel;

	mov	eax, DWORD PTR [esi+576]

; 124  : 
; 125  :   pSrcGOF = new MVGroupOfFrames(

	push	44					; 0000002cH
	mov	DWORD PTR [edi+76], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	push	DWORD PTR _mt_flag$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, eax
	push	DWORD PTR [edi+76]
	push	DWORD PTR [edi+72]
	push	DWORD PTR [edi+64]
	push	DWORD PTR [edi+68]
	push	DWORD PTR __isse$[ebp]
	push	DWORD PTR _nSuperModeYUV$1$[ebp]
	push	DWORD PTR _nSuperVPad$1$[ebp]
	push	DWORD PTR _nSuperHPad$1$[ebp]
	push	DWORD PTR _nSuperPel$1$[ebp]
	push	DWORD PTR [edi+40]
	push	DWORD PTR [edi+36]
	push	DWORD PTR _nSuperLevels$1$[ebp]
	call	??0MVGroupOfFrames@@QAE@HHHHHHH_NHHHH0@Z ; MVGroupOfFrames::MVGroupOfFrames
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 130  :   pRefGOF = new MVGroupOfFrames(

	push	44					; 0000002cH
	mov	DWORD PTR [esi+552], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	push	DWORD PTR _mt_flag$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, eax
	push	DWORD PTR [edi+76]
	push	DWORD PTR [edi+72]
	push	DWORD PTR [edi+64]
	push	DWORD PTR [edi+68]
	push	DWORD PTR __isse$[ebp]
	push	DWORD PTR _nSuperModeYUV$1$[ebp]
	push	DWORD PTR _nSuperVPad$1$[ebp]
	push	DWORD PTR _nSuperHPad$1$[ebp]
	push	DWORD PTR _nSuperPel$1$[ebp]
	push	DWORD PTR [edi+40]
	push	DWORD PTR [edi+36]
	push	DWORD PTR _nSuperLevels$1$[ebp]
	call	??0MVGroupOfFrames@@QAE@HHHHHHH_NHHHH0@Z ; MVGroupOfFrames::MVGroupOfFrames
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	ecx, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 130  :   pRefGOF = new MVGroupOfFrames(

	mov	DWORD PTR [esi+556], eax
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN73@MVRecalcul
; File c:\github\mvtools\sources\include\avisynth.h

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN72@MVRecalcul
$LN73@MVRecalcul:
	push	ecx
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 135  :   const int		nSuperWidth = child->GetVideoInfo().width;

	call	eax
$LN72@MVRecalcul:
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	edx, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 135  :   const int		nSuperWidth = child->GetVideoInfo().width;

	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nSuperWidth$1$[ebp], ecx
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	je	SHORT $LN74@MVRecalcul

; 136  :   const int		nSuperHeight = child->GetVideoInfo().height;

	push	edx
	call	eax
	mov	ecx, DWORD PTR _nSuperWidth$1$[ebp]
$LN74@MVRecalcul:

; 137  : 
; 138  :   if (nHeight != analysisData.nHeight
; 139  :     || nSuperWidth - 2 * nSuperHPad != analysisData.nWidth)

	mov	eax, DWORD PTR _nHeight$1$[ebp]
	cmp	eax, DWORD PTR [edi+40]
	jne	SHORT $LN15@MVRecalcul
	mov	eax, DWORD PTR _nSuperHPad$1$[ebp]
	add	eax, eax
	sub	ecx, eax
	cmp	ecx, DWORD PTR [edi+36]
	je	SHORT $LN14@MVRecalcul
$LN15@MVRecalcul:

; 140  :   {
; 141  :     env->ThrowError("MRecalculate : wrong frame size");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0CA@MMPJLNGK@MRecalculate?5?3?5wrong?5frame?5size?$AA@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN14@MVRecalcul:

; 142  :   }
; 143  :   if (vi.pixel_type != analysisData.pixelType)

	mov	eax, DWORD PTR [esi+36]
	cmp	eax, DWORD PTR [edi+60]
	je	SHORT $LN16@MVRecalcul

; 144  :   {
; 145  :     env->ThrowError("MRecalculate: wrong pixel type");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0BP@HBACFLFE@MRecalculate?3?5wrong?5pixel?5type?$AA@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN16@MVRecalcul:

; 146  :   }
; 147  : 
; 148  :   analysisData.nBlkSizeX = _blksizex;
; 149  :   analysisData.nBlkSizeY = _blksizey;
; 150  :   if ((analysisData.nBlkSizeX != 4 || analysisData.nBlkSizeY != 4)
; 151  :     && (analysisData.nBlkSizeX != 8 || analysisData.nBlkSizeY != 4)
; 152  :     && (analysisData.nBlkSizeX != 8 || analysisData.nBlkSizeY != 8)
; 153  :     && (analysisData.nBlkSizeX != 16 || analysisData.nBlkSizeY != 2)
; 154  :     && (analysisData.nBlkSizeX != 16 || analysisData.nBlkSizeY != 8)
; 155  :     && (analysisData.nBlkSizeX != 16 || analysisData.nBlkSizeY != 16)
; 156  :     && (analysisData.nBlkSizeX != 32 || analysisData.nBlkSizeY != 32)
; 157  :     && (analysisData.nBlkSizeX != 32 || analysisData.nBlkSizeY != 16))

	mov	edx, DWORD PTR __blksizex$[ebp]
	mov	ecx, DWORD PTR __blksizey$[ebp]
	mov	DWORD PTR [edi+8], edx
	mov	DWORD PTR [edi+12], ecx
	cmp	edx, 4
	jne	SHORT $LN18@MVRecalcul
	cmp	ecx, edx
	jmp	SHORT $LN360@MVRecalcul
$LN18@MVRecalcul:
	cmp	edx, 8
	jne	SHORT $LN20@MVRecalcul
	cmp	ecx, 4
	je	SHORT $LN17@MVRecalcul
	cmp	ecx, edx
	jmp	SHORT $LN360@MVRecalcul
$LN20@MVRecalcul:
	cmp	edx, 16					; 00000010H
	jne	SHORT $LN23@MVRecalcul
	cmp	ecx, 2
	je	SHORT $LN17@MVRecalcul
	cmp	ecx, 8
	jmp	SHORT $LN361@MVRecalcul
$LN23@MVRecalcul:
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN25@MVRecalcul
	cmp	ecx, edx
$LN361@MVRecalcul:
	je	SHORT $LN17@MVRecalcul
	cmp	ecx, 16					; 00000010H
$LN360@MVRecalcul:
	je	SHORT $LN17@MVRecalcul
$LN25@MVRecalcul:

; 158  :   {
; 159  :     env->ThrowError(

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0FD@KELCMOJD@MVRecalculate?3?5Block?8s?5size?5must@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR __blksizey$[ebp]
	add	esp, 8
	mov	edx, DWORD PTR __blksizex$[ebp]
$LN17@MVRecalcul:

; 160  :       "MVRecalculate: Block's size must be "
; 161  :       "4x4, 8x4, 8x8, 16x2, 16x8, 16x16, 32x16, 32x32"
; 162  :     );
; 163  :   }
; 164  : 
; 165  :   analysisData.nPel = nSuperPel;	//pAnalyseFilter->GetPel();

	mov	eax, DWORD PTR _nSuperPel$1$[ebp]
	mov	DWORD PTR [edi+16], eax
; File c:\github\mvtools\sources\mvanalysisdata.h

; 118  :    inline int GetDeltaFrame() const { return nDeltaFrame; }

	mov	eax, DWORD PTR _pAnalyseFilter$1$[ebp]
	mov	eax, DWORD PTR [eax+24]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 166  :   analysisData.nDeltaFrame = pAnalyseFilter->GetDeltaFrame();

	mov	DWORD PTR [edi+24], eax
; File c:\github\mvtools\sources\mvanalysisdata.h

; 116  :    inline bool IsBackward() const { return isBackward; }

	mov	eax, DWORD PTR _pAnalyseFilter$1$[ebp]
	mov	al, BYTE PTR [eax+28]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 167  :   analysisData.isBackward = pAnalyseFilter->IsBackward();

	mov	BYTE PTR [edi+28], al

; 168  : 
; 169  :   if (_overlapx < 0 || _overlapx >= _blksizex
; 170  :     || _overlapy < 0 || _overlapy >= _blksizey)

	mov	eax, DWORD PTR __overlapx$[ebp]
	test	eax, eax
	js	SHORT $LN27@MVRecalcul
	cmp	eax, edx
	jge	SHORT $LN27@MVRecalcul
	mov	eax, DWORD PTR __overlapy$[ebp]
	test	eax, eax
	js	SHORT $LN27@MVRecalcul
	cmp	eax, ecx
	jl	SHORT $LN26@MVRecalcul
$LN27@MVRecalcul:

; 171  :   {
; 172  :     env->ThrowError("MRecalculate: overlap must be less than block size");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0DD@OHJHKEID@MRecalculate?3?5overlap?5must?5be?5le@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	mov	eax, DWORD PTR __overlapy$[ebp]
	add	esp, 8
$LN26@MVRecalcul:

; 173  :   }
; 174  : 
; 175  :   if (_overlapx % 2 || (_overlapy % 2 > 0 && (analysisData.yRatioUV != 1) /*vi.IsYV12 ()*/))

	test	BYTE PTR __overlapx$[ebp], 1
	jne	SHORT $LN29@MVRecalcul
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN354@MVRecalcul
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN354@MVRecalcul:
	test	eax, eax
	jle	SHORT $LN28@MVRecalcul
	cmp	DWORD PTR [edi+64], 1
	je	SHORT $LN28@MVRecalcul
$LN29@MVRecalcul:

; 176  :   {
; 177  :     env->ThrowError("MRecalculate: overlap must be more even");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0CI@NEKCNLHA@MRecalculate?3?5overlap?5must?5be?5mo@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN28@MVRecalcul:

; 178  :   }
; 179  : 
; 180  :   if (_divide != 0 && (_blksizex < 8 || _blksizey < 8)) // 2.5.11.22 || instead of &&

	mov	eax, DWORD PTR __divide$[ebp]
	test	eax, eax
	je	$LN32@MVRecalcul
	cmp	DWORD PTR __blksizex$[ebp], 8
	jl	SHORT $LN31@MVRecalcul
	cmp	DWORD PTR __blksizey$[ebp], 8
	jge	SHORT $LN30@MVRecalcul
$LN31@MVRecalcul:

; 181  :   {
; 182  :     env->ThrowError(

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0DM@EIOJJPEN@MRecalculate?3?5Block?5sizes?5must?5b@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN30@MVRecalcul:

; 187  :     && ((_overlapx % 4 > 0 && (analysisData.xRatioUV != 1 || vi.IsYUY2()))

	mov	eax, DWORD PTR __overlapx$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN355@MVRecalcul
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN355@MVRecalcul:
	test	eax, eax
	jle	SHORT $LN348@MVRecalcul
	cmp	DWORD PTR [edi+68], 1
	jne	SHORT $LN33@MVRecalcul
; File c:\github\mvtools\sources\include\avisynth.h

; 624  :   bool IsYUY2() const AVS_BakedCode(return AVS_LinkCall(IsYUY2)())

	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	edx, edx
	je	SHORT $LN34@MVRecalcul
	cmp	DWORD PTR [edx], 28			; 0000001cH
	jbe	SHORT $LN34@MVRecalcul
	mov	eax, DWORD PTR [edx+28]
	lea	ecx, DWORD PTR [esi+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 187  :     && ((_overlapx % 4 > 0 && (analysisData.xRatioUV != 1 || vi.IsYUY2()))

	test	al, al
	jne	SHORT $LN33@MVRecalcul
$LN348@MVRecalcul:
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN34@MVRecalcul:
	mov	ecx, DWORD PTR __overlapy$[ebp]
	mov	eax, ecx
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN356@MVRecalcul
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN356@MVRecalcul:
	test	eax, eax
	jle	SHORT $LN35@MVRecalcul
	cmp	DWORD PTR [edi+64], 1
	jne	SHORT $LN33@MVRecalcul
$LN35@MVRecalcul:
	mov	eax, ecx
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN357@MVRecalcul
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN357@MVRecalcul:
	test	eax, eax
	jle	SHORT $LN352@MVRecalcul
; File c:\github\mvtools\sources\include\avisynth.h

; 624  :   bool IsYUY2() const AVS_BakedCode(return AVS_LinkCall(IsYUY2)())

	test	edx, edx
	je	SHORT $LN352@MVRecalcul
	cmp	DWORD PTR [edx], 28			; 0000001cH
	jbe	SHORT $LN352@MVRecalcul
	mov	eax, DWORD PTR [edx+28]
	lea	ecx, DWORD PTR [esi+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 187  :     && ((_overlapx % 4 > 0 && (analysisData.xRatioUV != 1 || vi.IsYUY2()))

	test	al, al
	je	SHORT $LN352@MVRecalcul
$LN33@MVRecalcul:

; 188  :       || (_overlapy % 4 > 0 && (analysisData.yRatioUV != 1)/*vi.IsYV12 ()*/)
; 189  :       || (_overlapy % 2 > 0 && vi.IsYUY2()))) // ? todo
; 190  :   {
; 191  :     env->ThrowError("MRecalculate: overlap must be more even for divide mode");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0DI@DJHMBLJL@MRecalculate?3?5overlap?5must?5be?5mo@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN352@MVRecalcul:
	mov	eax, DWORD PTR __divide$[ebp]
$LN32@MVRecalcul:
	mov	edx, DWORD PTR __overlapx$[ebp]

; 192  :   }
; 193  : 
; 194  :   divideExtra = _divide;

	mov	DWORD PTR [esi+116], eax
	mov	eax, DWORD PTR __overlapy$[ebp]

; 195  : 
; 196  :   // include itself, but usually equal to 256 :-)
; 197  :   headerSize = std::max(int(4 + sizeof(analysisData)), 256);

	mov	DWORD PTR [esi+544], 256		; 00000100H

; 198  : 
; 199  :   analysisData.nOverlapX = _overlapx;
; 200  :   analysisData.nOverlapY = _overlapy;
; 201  : 
; 202  :   const int		nBlkX = (analysisData.nWidth - analysisData.nOverlapX)
; 203  :     / (analysisData.nBlkSizeX - analysisData.nOverlapX);

	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [edi+48], eax
	sub	ecx, edx
	mov	eax, DWORD PTR [edi+36]
	sub	eax, edx
	mov	DWORD PTR [edi+44], edx
	cdq
	idiv	ecx

; 204  :   const int		nBlkY = (analysisData.nHeight - analysisData.nOverlapY)
; 205  :     / (analysisData.nBlkSizeY - analysisData.nOverlapY);

	mov	ecx, DWORD PTR [edi+12]
	sub	ecx, DWORD PTR __overlapy$[ebp]
	mov	DWORD PTR _nBlkX$1$[ebp], eax
	mov	eax, DWORD PTR [edi+40]
	sub	eax, DWORD PTR __overlapy$[ebp]
	cdq
	idiv	ecx

; 206  : 
; 207  :   analysisData.nBlkX = nBlkX;
; 208  :   analysisData.nBlkY = nBlkY;
; 209  :   analysisData.nLvCount = 1;
; 210  : 
; 211  : 
; 212  :   nLambda = lambda;
; 213  :   // lambda is finally scaled in PlaneOfBlocks::WorkingArea::MotionDistorsion(int vx, int vy) const
; 214  :   // as return (nLambda * dist) >> (16 - bits_per_pixel) 
; 215  :   pnew = _pnew;
; 216  :   meander = _meander;
; 217  : 
; 218  :   if (_dctmode != 0)

	cmp	DWORD PTR __dctmode$[ebp], 0
	mov	ecx, DWORD PTR _nBlkX$1$[ebp]
	mov	DWORD PTR [edi+52], ecx
	mov	ecx, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR [edi+56], eax
	mov	DWORD PTR [edi+20], 1
	mov	DWORD PTR _nBlkY$1$[ebp], eax
	mov	al, BYTE PTR __meander$[ebp]
	mov	DWORD PTR [esi+84], ecx
	mov	ecx, DWORD PTR __pnew$[ebp]
	mov	DWORD PTR [esi+100], ecx
	mov	BYTE PTR [esi+124], al
	je	SHORT $LN36@MVRecalcul

; 220  :     _dct_factory_ptr = std::auto_ptr <DCTFactory>(

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	push	DWORD PTR _env$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, eax
	push	DWORD PTR [esi+576]
	push	DWORD PTR [esi+572]
	push	DWORD PTR __blksizey$[ebp]
	push	DWORD PTR __blksizex$[ebp]
	push	DWORD PTR __isse$[ebp]
	push	DWORD PTR __dctmode$[ebp]
	call	??0DCTFactory@@QAE@H_NHHHHAAVIScriptEnvironment@@@Z ; DCTFactory::DCTFactory
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 794  : 		if (_Ptr != _Myptr)

	mov	ecx, DWORD PTR [esi+152]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 220  :     _dct_factory_ptr = std::auto_ptr <DCTFactory>(

	mov	DWORD PTR $T7[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 794  : 		if (_Ptr != _Myptr)

	cmp	eax, ecx
	je	SHORT $LN258@MVRecalcul

; 795  : 			delete _Myptr;

	test	ecx, ecx
	je	SHORT $LN258@MVRecalcul
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax]
	mov	eax, DWORD PTR $T7[ebp]
$LN258@MVRecalcul:

; 796  : 		_Myptr = _Ptr;

	mov	DWORD PTR [esi+152], eax
; File c:\github\mvtools\sources\conc\objpool.hpp

; 93   : 	_factory_ptr = &fact;

	mov	DWORD PTR [esi+168], eax
$LN36@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 226  :   switch (st)

	mov	eax, DWORD PTR _st$[ebp]
	cmp	eax, 7
	ja	SHORT $LN44@MVRecalcul
	jmp	DWORD PTR $LN364@MVRecalcul[eax*4]
$LN37@MVRecalcul:

; 227  :   {
; 228  :   case 0:
; 229  :     searchType = ONETIME;

	mov	DWORD PTR [esi+88], 1

; 230  :     nSearchParam = (stp < 1) ? 1 : stp;
; 231  :     break;

	jmp	SHORT $LN362@MVRecalcul
$LN38@MVRecalcul:

; 232  :   case 1:
; 233  :     searchType = NSTEP;
; 234  :     nSearchParam = (stp < 0) ? 0 : stp;

	mov	eax, DWORD PTR _stp$[ebp]
	xor	ecx, ecx
	test	eax, eax
	mov	DWORD PTR [esi+88], 2
	cmovs	eax, ecx

; 235  :     break;

	jmp	SHORT $LN363@MVRecalcul
$LN39@MVRecalcul:

; 236  :   case 3:
; 237  :     searchType = EXHAUSTIVE;

	mov	DWORD PTR [esi+88], 8

; 238  :     nSearchParam = (stp < 1) ? 1 : stp;
; 239  :     break;

	jmp	SHORT $LN362@MVRecalcul
$LN40@MVRecalcul:

; 240  :   case 4:
; 241  :     searchType = HEX2SEARCH;

	mov	DWORD PTR [esi+88], 16			; 00000010H

; 242  :     nSearchParam = (stp < 1) ? 1 : stp;
; 243  :     break;

	jmp	SHORT $LN362@MVRecalcul
$LN41@MVRecalcul:

; 244  :   case 5:
; 245  :     searchType = UMHSEARCH;

	mov	DWORD PTR [esi+88], 32			; 00000020H

; 246  :     nSearchParam = (stp < 1) ? 1 : stp; // really min is 4
; 247  :     break;

	jmp	SHORT $LN362@MVRecalcul
$LN42@MVRecalcul:

; 248  :   case 6:
; 249  :     searchType = HSEARCH;

	mov	DWORD PTR [esi+88], 64			; 00000040H

; 250  :     nSearchParam = (stp < 1) ? 1 : stp;
; 251  :     break;

	jmp	SHORT $LN362@MVRecalcul
$LN43@MVRecalcul:

; 252  :   case 7:
; 253  :     searchType = VSEARCH;

	mov	DWORD PTR [esi+88], 128			; 00000080H

; 254  :     nSearchParam = (stp < 1) ? 1 : stp;
; 255  :     break;

	jmp	SHORT $LN362@MVRecalcul
$LN44@MVRecalcul:

; 256  :   case 2:
; 257  :   default:
; 258  :     searchType = LOGARITHMIC;

	mov	DWORD PTR [esi+88], 4
$LN362@MVRecalcul:

; 259  :     nSearchParam = (stp < 1) ? 1 : stp;

	mov	eax, DWORD PTR _stp$[ebp]
	mov	ecx, 1
	cmp	eax, 1
	cmovl	eax, ecx
$LN363@MVRecalcul:
	mov	DWORD PTR [esi+92], eax

; 260  :   }
; 261  : 
; 262  :   analysisData.nFlags = 0;
; 263  :   analysisData.nFlags |= (_isse) ? MOTION_USE_ISSE : 0;
; 264  :   analysisData.nFlags |= (analysisData.isBackward) ? MOTION_IS_BACKWARD : 0;

	xor	ecx, ecx
	cmp	BYTE PTR [edi+28], cl
	mov	eax, 64					; 00000040H

; 265  :   analysisData.nFlags |= (chroma) ? MOTION_USE_CHROMA_MOTION : 0;

	mov	edx, 2048				; 00000800H
	cmovne	ecx, eax
	xor	eax, eax
	cmp	BYTE PTR tv1894[ebp], al
	cmovne	eax, edx
	mov	edx, 32					; 00000020H
	or	ecx, eax
	xor	eax, eax
	cmp	BYTE PTR __isse$[ebp], al
	cmovne	eax, edx
	or	ecx, eax
	mov	DWORD PTR [edi+32], ecx

; 266  :   analysisData.nFlags |= cpu_detect();  // 161002 get rid of sadx264, no effect

	call	?cpu_detect@@YAIXZ			; cpu_detect
	or	DWORD PTR [edi+32], eax

; 291  :   _vectorfields_aptr = std::auto_ptr <GroupOfPlanes>(new GroupOfPlanes(

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	xor	edx, edx
	movzx	ecx, BYTE PTR [esi+568]
	cmp	DWORD PTR [esi+152], edx
	push	ecx
	lea	ecx, DWORD PTR [esi+160]
	cmove	ecx, edx
	push	ecx
	push	DWORD PTR [edi+76]
	mov	ecx, eax
	push	DWORD PTR [edi+72]
	push	DWORD PTR [esi+116]
	push	DWORD PTR [edi+64]
	push	DWORD PTR [edi+68]
	push	DWORD PTR [edi+56]
	push	DWORD PTR [edi+52]
	push	DWORD PTR [edi+48]
	push	DWORD PTR [edi+44]
	push	DWORD PTR [edi+32]
	push	DWORD PTR [edi+16]
	push	DWORD PTR [edi+20]
	push	DWORD PTR [edi+12]
	push	DWORD PTR [edi+8]
	call	??0GroupOfPlanes@@QAE@HHHHHHHHHHHHHHPAV?$ObjPool@VDCTClass@@@conc@@_N@Z ; GroupOfPlanes::GroupOfPlanes
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 794  : 		if (_Ptr != _Myptr)

	mov	eax, DWORD PTR [esi+76]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 291  :   _vectorfields_aptr = std::auto_ptr <GroupOfPlanes>(new GroupOfPlanes(

	mov	DWORD PTR $T5[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 794  : 		if (_Ptr != _Myptr)

	mov	DWORD PTR $T6[ebp], eax
	cmp	ecx, eax
	je	SHORT $LN293@MVRecalcul

; 795  : 			delete _Myptr;

	test	eax, eax
	je	SHORT $LN293@MVRecalcul
	mov	ecx, eax
	call	??1GroupOfPlanes@@QAE@XZ		; GroupOfPlanes::~GroupOfPlanes
	push	60					; 0000003cH
	push	DWORD PTR $T6[ebp]
	call	??3@YAXPAXI@Z				; operator delete
	mov	ecx, DWORD PTR $T5[ebp]
	add	esp, 8
$LN293@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 311  :   analysisData.nHPadding = nSuperHPad;

	mov	eax, DWORD PTR _nSuperHPad$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 796  : 		_Myptr = _Ptr;

	mov	DWORD PTR [esi+76], ecx
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 311  :   analysisData.nHPadding = nSuperHPad;

	mov	DWORD PTR [edi+80], eax

; 312  :   analysisData.nVPadding = nSuperVPad;

	mov	eax, DWORD PTR _nSuperVPad$1$[ebp]
	mov	DWORD PTR [edi+84], eax
	mov	eax, DWORD PTR __outfilename$[ebp]
	mov	DWORD PTR [edi], 22093			; 0000564dH

; 313  : 
; 314  :   // MVAnalysisData and outfile format version: last update v1.8.1
; 315  :   analysisData.nVersion = MVAnalysisData::VERSION;

	mov	DWORD PTR [edi+4], 5

; 316  : 
; 317  :   outfilename = _outfilename;
; 318  :   if (lstrlen(outfilename) > 0)

	push	eax
	mov	DWORD PTR [esi+112], eax
	call	DWORD PTR __imp__lstrlenA@4
	test	eax, eax
	jle	SHORT $LN45@MVRecalcul

; 319  :   {
; 320  :     outfile = fopen(outfilename, "wb");

	push	OFFSET ??_C@_02GMLFBBN@wb?$AA@
	push	DWORD PTR [esi+112]
	call	DWORD PTR __imp__fopen
	add	esp, 8
	mov	DWORD PTR [esi+128], eax

; 321  :     if (outfile == NULL)

	test	eax, eax
	jne	SHORT $LN47@MVRecalcul

; 322  :     {
; 323  :       env->ThrowError("MRecalculate: out file can not be created!");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0CL@BGMBCEHA@MRecalculate?3?5out?5file?5can?5not?5b@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8

; 324  :     }
; 325  :     else

	jmp	SHORT $LN46@MVRecalcul
$LN47@MVRecalcul:

; 326  :     {
; 327  :       fwrite(&analysisData, sizeof(analysisData), 1, outfile);

	push	eax
	push	1
	push	88					; 00000058H
	push	edi
	call	DWORD PTR __imp__fwrite

; 328  :       // short vx, short vy, int SAD = 4 words = 8 bytes per block
; 329  :       outfilebuf = new short[nBlkX * nBlkY * (1+1+ sizeof(sad_t)/sizeof(short))];

	mov	eax, DWORD PTR _nBlkY$1$[ebp]
	xor	ecx, ecx
	imul	eax, DWORD PTR _nBlkX$1$[ebp]
	mov	edx, 2
	shl	eax, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+132], eax

; 330  :     }
; 331  :   }
; 332  :   else

	jmp	SHORT $LN46@MVRecalcul
$LN45@MVRecalcul:

; 333  :   {
; 334  :     outfile = NULL;

	mov	DWORD PTR [esi+128], 0

; 335  :     outfilebuf = NULL;

	mov	DWORD PTR [esi+132], 0
$LN46@MVRecalcul:

; 336  :   }
; 337  : 
; 338  :   // Defines the format of the output vector clip
; 339  :   const int		width_bytes = headerSize + _vectorfields_aptr->GetArraySize() * 4;

	mov	ecx, DWORD PTR [esi+76]
	call	?GetArraySize@GroupOfPlanes@@QAEHXZ	; GroupOfPlanes::GetArraySize
	mov	ecx, DWORD PTR [esi+544]

; 340  :   ClipFnc::format_vector_clip(

	mov	dl, 1
	push	DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0N@HIPOLGGP@MRecalculate?$AA@
	lea	eax, DWORD PTR [ecx+eax*4]
	push	eax
	push	OFFSET ??_C@_05HJLHGJPL@rgb32?$AA@
	push	DWORD PTR _nBlkX$1$[ebp]
	lea	ecx, DWORD PTR [esi+16]
	call	?format_vector_clip@ClipFnc@@SAXAAUVideoInfo@@_NHPBDH2AAVIScriptEnvironment@@@Z ; ClipFnc::format_vector_clip
	add	esp, 20					; 00000014H

; 341  :     vi, true, nBlkX, "rgb32", width_bytes, "MRecalculate", *env
; 342  :   );
; 343  : 
; 344  :   if (divideExtra)	//v1.8.1

	cmp	DWORD PTR [esi+116], 0
	je	SHORT $LN49@MVRecalcul

; 345  :   {
; 346  :     memcpy(&analysisDataDivided, &analysisData, sizeof(analysisData));

	movups	xmm0, XMMWORD PTR [edi]
	movups	XMMWORD PTR [ebx], xmm0
	movups	xmm0, XMMWORD PTR [edi+16]
	movups	XMMWORD PTR [ebx+16], xmm0
	movups	xmm0, XMMWORD PTR [edi+32]
	movups	XMMWORD PTR [ebx+32], xmm0
	movups	xmm0, XMMWORD PTR [edi+48]
	movups	XMMWORD PTR [ebx+48], xmm0
	movups	xmm0, XMMWORD PTR [edi+64]
	movups	XMMWORD PTR [ebx+64], xmm0
	movq	xmm0, QWORD PTR [edi+80]
	movq	QWORD PTR [ebx+80], xmm0

; 347  :     analysisDataDivided.nBlkX = analysisData.nBlkX * 2;

	mov	eax, DWORD PTR [edi+52]
	add	eax, eax
	mov	DWORD PTR [ebx+52], eax

; 348  :     analysisDataDivided.nBlkY = analysisData.nBlkY * 2;

	mov	eax, DWORD PTR [edi+56]
	add	eax, eax
	mov	DWORD PTR [ebx+56], eax

; 349  :     analysisDataDivided.nBlkSizeX = analysisData.nBlkSizeX / 2;

	mov	eax, DWORD PTR [edi+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ebx+8], eax

; 350  :     analysisDataDivided.nBlkSizeY = analysisData.nBlkSizeY / 2;

	mov	eax, DWORD PTR [edi+12]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ebx+12], eax

; 351  :     analysisDataDivided.nOverlapX = analysisData.nOverlapX / 2;

	mov	eax, DWORD PTR [edi+44]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ebx+44], eax

; 352  :     analysisDataDivided.nOverlapY = analysisData.nOverlapY / 2;

	mov	eax, DWORD PTR [edi+48]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ebx+48], eax

; 353  :     analysisDataDivided.nLvCount = analysisData.nLvCount + 1;

	mov	eax, DWORD PTR [edi+20]
	inc	eax
	mov	DWORD PTR [ebx+20], eax

; 354  : #if !defined(_WIN64)
; 355  :     vi.nchannels = reinterpret_cast <uintptr_t> (&analysisDataDivided);

	mov	DWORD PTR [esi+56], ebx

; 356  : #else
; 357  :     uintptr_t p = reinterpret_cast <uintptr_t> (&analysisDataDivided);
; 358  :     vi.nchannels = 0x80000000L | (int)(p >> 32);
; 359  :     vi.sample_type = (int)(p & 0xffffffffUL);
; 360  : #endif
; 361  :   }
; 362  :   else

	jmp	SHORT $LN50@MVRecalcul
$LN49@MVRecalcul:

; 363  :   {
; 364  :     // we'll transmit to the processing filters a handle
; 365  :     // on the analyzing filter itself ( it's own pointer ), in order
; 366  :     // to activate the right parameters.
; 367  : #if !defined(_WIN64)
; 368  :     vi.nchannels = reinterpret_cast <uintptr_t> (&analysisData);

	mov	DWORD PTR [esi+56], edi
$LN50@MVRecalcul:

; 376  :   for (int srd_index = 1; srd_index < _nbr_srd; ++srd_index)

	mov	ecx, 1
	cmp	DWORD PTR [esi+564], ecx
	jle	$LN8@MVRecalcul
	mov	edx, 184				; 000000b8H
$LL9@MVRecalcul:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1242 : 		return (*(this->_Myfirst() + _Pos));

	mov	eax, DWORD PTR [esi+64]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 376  :   for (int srd_index = 1; srd_index < _nbr_srd; ++srd_index)

	inc	ecx

; 377  :   {
; 378  :     SrcRefData &	srd = _srd_arr[srd_index];
; 379  :     srd._analysis_data = analysisData;

	movups	xmm0, XMMWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1242 : 		return (*(this->_Myfirst() + _Pos));

	add	eax, edx
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 376  :   for (int srd_index = 1; srd_index < _nbr_srd; ++srd_index)

	add	edx, 184				; 000000b8H

; 377  :   {
; 378  :     SrcRefData &	srd = _srd_arr[srd_index];
; 379  :     srd._analysis_data = analysisData;

	movups	XMMWORD PTR [eax], xmm0
	movups	xmm0, XMMWORD PTR [edi+16]
	movups	XMMWORD PTR [eax+16], xmm0
	movups	xmm0, XMMWORD PTR [edi+32]
	movups	XMMWORD PTR [eax+32], xmm0
	movups	xmm0, XMMWORD PTR [edi+48]
	movups	XMMWORD PTR [eax+48], xmm0
	movups	xmm0, XMMWORD PTR [edi+64]
	movups	XMMWORD PTR [eax+64], xmm0
	movq	xmm0, QWORD PTR [edi+80]
	movq	QWORD PTR [eax+80], xmm0

; 380  :     srd._analysis_data_divided = analysisDataDivided;

	movups	xmm0, XMMWORD PTR [ebx]
	movups	XMMWORD PTR [eax+88], xmm0
	movups	xmm0, XMMWORD PTR [ebx+16]
	movups	XMMWORD PTR [eax+104], xmm0
	movups	xmm0, XMMWORD PTR [ebx+32]
	movups	XMMWORD PTR [eax+120], xmm0
	movups	xmm0, XMMWORD PTR [ebx+48]
	movups	XMMWORD PTR [eax+136], xmm0
	movups	xmm0, XMMWORD PTR [ebx+64]
	movups	XMMWORD PTR [eax+152], xmm0
	movq	xmm0, QWORD PTR [ebx+80]
	movq	QWORD PTR [eax+168], xmm0
	cmp	ecx, DWORD PTR [esi+564]
	jl	SHORT $LL9@MVRecalcul
$LN8@MVRecalcul:

; 381  :   }
; 382  : 
; 383  :   // normalize threshold to block size
; 384  :     // PF _thSAD is originally on 255 scale, for 16 bit we have to scale it.
; 385  :   thSAD = _thSAD;
; 386  :   if (pixelsize == 2)

	cmp	DWORD PTR [esi+572], 2
	mov	eax, DWORD PTR __thSAD$[ebp]
	mov	DWORD PTR [esi+548], eax
	jne	SHORT $LN51@MVRecalcul

; 387  :     thSAD = (sad_t)(thSAD * (1 << (bits_per_pixel - 8))); // todo float

	mov	ecx, DWORD PTR [esi+576]
	sub	ecx, 8
	shl	eax, cl
	mov	DWORD PTR [esi+548], eax
$LN51@MVRecalcul:

; 388  : // luma only
; 389  :   thSAD =

	mov	eax, DWORD PTR [edi+8]
	imul	eax, DWORD PTR [edi+12]
	imul	eax, DWORD PTR [esi+548]
	cdq
	and	edx, 63					; 0000003fH
	lea	ebx, DWORD PTR [edx+eax]
	sar	ebx, 6

; 390  :     thSAD
; 391  :     * (analysisData.nBlkSizeX * analysisData.nBlkSizeY)
; 392  :     / (8 * 8);  // normalize to 8x8 block size
; 393  :   if (chroma)

	cmp	BYTE PTR tv1894[ebp], 0
	mov	DWORD PTR [esi+548], ebx
	je	SHORT $LN52@MVRecalcul

; 394  :   {
; 395  :     /*thSAD = _thSAD * (analysisData.nBlkSizeX * analysisData.nBlkSizeY) / (8 * 8)
; 396  :       * (1 + analysisData.yRatioUV) / analysisData.yRatioUV; // YUY,YV12 assumes xRatioUV=2
; 397  :           same as thSAD_orig + thSAD_orig/yRatioUV;
; 398  :         */
; 399  :     thSAD += thSAD / (analysisData.xRatioUV * analysisData.yRatioUV) * 2; // *2: two additional planes: UV

	mov	ecx, DWORD PTR [edi+68]
	mov	eax, ebx
	imul	ecx, DWORD PTR [edi+64]
	cdq
	idiv	ecx
	lea	eax, DWORD PTR [ebx+eax*2]
	mov	DWORD PTR [esi+548], eax
$LN52@MVRecalcul:
; File c:\github\mvtools\sources\include\avisynth.h

; 948  :   ~PClip() AVS_BakedCode( AVS_LinkCall(PClip_DESTRUCTOR)() )

	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN324@MVRecalcul
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN324@MVRecalcul
	mov	eax, DWORD PTR [eax+248]
	lea	ecx, DWORD PTR __super$[ebp]
	call	eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN324@MVRecalcul:
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	test	eax, eax
	je	SHORT $LN345@MVRecalcul
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN345@MVRecalcul
	mov	eax, DWORD PTR [eax+248]
	lea	ecx, DWORD PTR __vectors$[ebp]
	call	eax
$LN345@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 401  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	88					; 00000058H
$LN364@MVRecalcul:
	DD	$LN37@MVRecalcul
	DD	$LN38@MVRecalcul
	DD	$LN44@MVRecalcul
	DD	$LN39@MVRecalcul
	DD	$LN40@MVRecalcul
	DD	$LN41@MVRecalcul
	DD	$LN42@MVRecalcul
	DD	$LN43@MVRecalcul
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$0:
	lea	ecx, DWORD PTR __vectors$[ebp]
	jmp	??1PClip@@QAE@XZ			; PClip::~PClip
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$1:
	lea	ecx, DWORD PTR __super$[ebp]
	jmp	??1PClip@@QAE@XZ			; PClip::~PClip
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1GenericVideoFilter@@UAE@XZ
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::~vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$auto_ptr@VGroupOfPlanes@@@std@@QAE@XZ ; std::auto_ptr<GroupOfPlanes>::~auto_ptr<GroupOfPlanes>
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	jmp	??1?$auto_ptr@VDCTFactory@@@std@@QAE@XZ	; std::auto_ptr<DCTFactory>::~auto_ptr<DCTFactory>
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$ObjPool@VDCTClass@@@conc@@UAE@XZ	; conc::ObjPool<DCTClass>::~ObjPool<DCTClass>
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$8:
	push	240					; 000000f0H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$10:
	push	44					; 0000002cH
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$11:
	push	44					; 0000002cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$12:
	push	36					; 00000024H
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$14:
	push	60					; 0000003cH
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$48:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z$49:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MVRecalculate@@QAE@VPClip@@0HHHHHHH_NHHHPBDHHH11H1PAVIScriptEnvironment@@@Z ENDP ; MVRecalculate::MVRecalculate
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvrecalculate.h
;	COMDAT ?SetCacheHints@MVRecalculate@@UAGHHH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_cachehints$ = 12					; size = 4
_frame_range$ = 16					; size = 4
?SetCacheHints@MVRecalculate@@UAGHHH@Z PROC		; MVRecalculate::SetCacheHints, COMDAT

; 132  :     return cachehints == CACHE_GET_MTMODE ? MT_MULTI_INSTANCE : 0;

	xor	eax, eax
	mov	ecx, 2
	cmp	DWORD PTR _cachehints$[esp-4], 509	; 000001fdH
	cmove	eax, ecx

; 133  :   }

	ret	12					; 0000000cH
?SetCacheHints@MVRecalculate@@UAGHHH@Z ENDP		; MVRecalculate::SetCacheHints
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GMVRecalculate@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMVRecalculate@@UAEPAXI@Z PROC			; MVRecalculate::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1MVRecalculate@@UAE@XZ		; MVRecalculate::~MVRecalculate
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	push	584					; 00000248H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GMVRecalculate@@UAEPAXI@Z ENDP			; MVRecalculate::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
;	COMDAT ??1MVRecalculate@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1MVRecalculate@@UAE@XZ PROC				; MVRecalculate::~MVRecalculate, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1MVRecalculate@@UAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	mov	esi, ecx
	push	edi

; 407  :   if (outfile != NULL)

	mov	eax, DWORD PTR [esi+128]
	mov	DWORD PTR [esi], OFFSET ??_7MVRecalculate@@6B@
	test	eax, eax
	je	SHORT $LN2@MVRecalcul

; 408  :   {
; 409  :     fclose(outfile);

	push	eax
	call	DWORD PTR __imp__fclose

; 410  :     outfile = 0;
; 411  :     delete[] outfilebuf;

	push	DWORD PTR [esi+132]
	mov	DWORD PTR [esi+128], 0
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 8

; 412  :     outfilebuf = 0;

	mov	DWORD PTR [esi+132], 0
$LN2@MVRecalcul:

; 413  :   }
; 414  : 
; 415  :   delete pSrcGOF;

	mov	edi, DWORD PTR [esi+552]
	test	edi, edi
	je	SHORT $LN9@MVRecalcul
	mov	ecx, edi
	call	??1MVGroupOfFrames@@QAE@XZ		; MVGroupOfFrames::~MVGroupOfFrames
	push	44					; 0000002cH
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN9@MVRecalcul:

; 416  :   pSrcGOF = 0;
; 417  :   delete pRefGOF;

	mov	edi, DWORD PTR [esi+556]
	mov	DWORD PTR [esi+552], 0
	test	edi, edi
	je	SHORT $LN13@MVRecalcul
	mov	ecx, edi
	call	??1MVGroupOfFrames@@QAE@XZ		; MVGroupOfFrames::~MVGroupOfFrames
	push	44					; 0000002cH
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN13@MVRecalcul:

; 419  : }

	lea	ecx, DWORD PTR [esi+160]
	mov	DWORD PTR [esi+556], 0
	call	??1?$ObjPool@VDCTClass@@@conc@@UAE@XZ	; conc::ObjPool<DCTClass>::~ObjPool<DCTClass>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 757  : 		delete _Myptr;

	mov	ecx, DWORD PTR [esi+152]
	test	ecx, ecx
	je	SHORT $LN18@MVRecalcul
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax]
$LN18@MVRecalcul:
	mov	edi, DWORD PTR [esi+76]
	test	edi, edi
	je	SHORT $LN27@MVRecalcul
	mov	ecx, edi
	call	??1GroupOfPlanes@@QAE@XZ		; GroupOfPlanes::~GroupOfPlanes
	push	60					; 0000003cH
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN27@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 419  : }

	lea	ecx, DWORD PTR [esi+64]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 976  : 		_Tidy();

	call	?_Tidy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Tidy
; File c:\github\mvtools\sources\include\avisynth.h

; 948  :   ~PClip() AVS_BakedCode( AVS_LinkCall(PClip_DESTRUCTOR)() )

	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN44@MVRecalcul
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN44@MVRecalcul
	mov	eax, DWORD PTR [eax+248]
	lea	ecx, DWORD PTR [esi+8]
	call	eax
$LN44@MVRecalcul:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 419  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
; File c:\github\mvtools\sources\include\avisynth.h

; 919  :   virtual AVSC_CC ~IClip() {}

	mov	DWORD PTR [esi], OFFSET ??_7IClip@@6B@
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 419  : }

	pop	edi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MVRecalculate@@UAE@XZ$7:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$??1MVRecalculate@@UAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1MVRecalculate@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MVRecalculate@@UAE@XZ ENDP				; MVRecalculate::~MVRecalculate
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\github\mvtools\sources\mvanalysisdata.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\fakegroupofplanes.cpp
; File c:\github\mvtools\sources\mvclip.cpp
; File c:\github\mvtools\sources\fakegroupofplanes.h
; File c:\github\mvtools\sources\mvclip.cpp
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\clipfnc.cpp
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\groupofplanes.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\github\mvtools\sources\groupofplanes.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
;	COMDAT ?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
_mvn$ = -32						; size = 4
_pDst$1$ = -28						; size = 4
$T3 = -28						; size = 4
$T4 = -28						; size = 4
_nref$1$ = -24						; size = 4
$T5 = -24						; size = 4
$T6 = -24						; size = 4
_maxframe$1$ = -20					; size = 4
_nbr_src_frames$1$ = -20				; size = 4
_src$7 = -20						; size = 4
_minframe$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nsrc$1$ = 8						; size = 4
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_n$ = 16						; size = 4
$T8 = 20						; size = 4
_ref$9 = 20						; size = 4
_env$ = 20						; size = 4
?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; MVRecalculate::GetFrame, COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 431  :   ::PVideoFrame	mvn = srd._clip_sptr->GetFrame(nsrc, env);

	lea	ecx, DWORD PTR _mvn$[ebp]
	push	edi
	mov	edi, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T2[ebp], 0
	mov	eax, DWORD PTR _n$[ebp]
	cdq
	idiv	DWORD PTR [edi+564]
	push	DWORD PTR _env$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1242 : 		return (*(this->_Myfirst() + _Pos));

	imul	ebx, edx, 184
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 425  :   const int		nsrc = n / _nbr_srd;

	mov	esi, eax
	push	esi
	push	ecx
	mov	DWORD PTR _nsrc$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1242 : 		return (*(this->_Myfirst() + _Pos));

	add	ebx, DWORD PTR [edi+64]
; File c:\github\mvtools\sources\sharedptr.hpp

; 171  : 	return (_obj_ptr);

	mov	eax, DWORD PTR [ebx+176]
	push	eax
	mov	eax, DWORD PTR [eax]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 431  :   ::PVideoFrame	mvn = srd._clip_sptr->GetFrame(nsrc, env);

	call	DWORD PTR [eax+4]
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 432  :   srd._clip_sptr->Update(mvn, env);	// force calulation of vectors

	lea	eax, DWORD PTR _mvn$[ebp]
	push	DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [ebx+176]
	push	eax
	call	?Update@MVClip@@QAEXAAVPVideoFrame@@PAVIScriptEnvironment@@@Z ; MVClip::Update
; File c:\github\mvtools\sources\sharedptr.hpp

; 171  : 	return (_obj_ptr);

	mov	eax, DWORD PTR [ebx+176]
; File c:\github\mvtools\sources\mvanalysisdata.h

; 118  :    inline int GetDeltaFrame() const { return nDeltaFrame; }

	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR [ebx+24], ecx

; 116  :    inline bool IsBackward() const { return isBackward; }

	mov	al, BYTE PTR [eax+144]
	mov	BYTE PTR [ebx+28], al
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 438  :   srd._analysis_data_divided.isBackward = srd._analysis_data.isBackward;

	mov	BYTE PTR [ebx+116], al
	mov	DWORD PTR [ebx+112], ecx
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN18@GetFrame

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN17@GetFrame
$LN18@GetFrame:
	push	ecx
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 460  :   const int		nbr_src_frames = child->GetVideoInfo().num_frames;

	call	eax
$LN17@GetFrame:

; 461  :   int				minframe;
; 462  :   int				maxframe;
; 463  :   int				nref;
; 464  :   if (srd._analysis_data.nDeltaFrame > 0)

	mov	edx, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _nbr_src_frames$1$[ebp], eax
	test	edx, edx
	jle	SHORT $LN2@GetFrame

; 465  :   {
; 466  :     const int		offset =
; 467  :       (srd._analysis_data.isBackward)

	cmp	BYTE PTR [ebx+28], 0
	jne	SHORT $LN14@GetFrame
	neg	edx
$LN14@GetFrame:

; 470  :     minframe = std::max(-offset, 0);

	mov	ecx, edx
	mov	DWORD PTR $T4[ebp], 0
	neg	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3612 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	lea	esi, DWORD PTR $T6[ebp]
	lea	eax, DWORD PTR $T4[ebp]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 470  :     minframe = std::max(-offset, 0);

	mov	DWORD PTR $T6[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3612 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	cmovns	eax, esi

; 3649 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	test	ecx, ecx
	lea	esi, DWORD PTR $T5[ebp]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 470  :     minframe = std::max(-offset, 0);

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _minframe$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3649 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	lea	eax, DWORD PTR $T3[ebp]
	cmovle	eax, esi
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 471  :     maxframe = nbr_src_frames + std::min(-offset, 0);

	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR $T5[ebp], ecx
	mov	eax, DWORD PTR [eax]
	add	DWORD PTR _nbr_src_frames$1$[ebp], eax

; 472  :     nref = nsrc + offset;

	add	edx, DWORD PTR _nsrc$1$[ebp]

; 473  :   }
; 474  :   else // special static mode

	jmp	SHORT $LN140@GetFrame
$LN2@GetFrame:

; 475  :   {
; 476  :     nref = -srd._analysis_data.nDeltaFrame;	// positive fixed frame number

	neg	edx

; 477  :     minframe = 0;

	mov	DWORD PTR _minframe$1$[ebp], 0

; 478  :     maxframe = nbr_src_frames;

	mov	DWORD PTR _maxframe$1$[ebp], eax
$LN140@GetFrame:

; 479  :   }
; 480  : 
; 481  :   ::PVideoFrame		dst = env->NewVideoFrame(vi);

	mov	ecx, DWORD PTR _env$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	32					; 00000020H
	mov	DWORD PTR _nref$1$[ebp], edx
	lea	edx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	esi
	push	ecx
	call	DWORD PTR [eax+56]
; File c:\github\mvtools\sources\include\avisynth.h

; 976  :   VideoFrame* operator->() const { return p; }

	mov	ecx, DWORD PTR [esi]

; 813  :   BYTE* GetWritePtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetWritePtr)(plane) )

	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR $T2[ebp], 1
	test	esi, esi
	je	SHORT $LN61@GetFrame
	cmp	DWORD PTR [esi], 220			; 000000dcH
	jbe	SHORT $LN61@GetFrame
	mov	eax, DWORD PTR [esi+220]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	ecx, eax
	jmp	SHORT $LN62@GetFrame
$LN61@GetFrame:
	xor	ecx, ecx
$LN62@GetFrame:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 485  :   memcpy(pDst, &headerSize, sizeof(int));

	mov	eax, DWORD PTR [edi+544]
	mov	DWORD PTR [ecx], eax

; 486  :   if (divideExtra)

	cmp	DWORD PTR [edi+116], 0
	je	SHORT $LN4@GetFrame

; 487  :   {
; 488  :     memcpy(

	movups	xmm0, XMMWORD PTR [ebx+88]
	movups	XMMWORD PTR [ecx+4], xmm0
	movups	xmm0, XMMWORD PTR [ebx+104]
	movups	XMMWORD PTR [ecx+20], xmm0
	movups	xmm0, XMMWORD PTR [ebx+120]
	movups	XMMWORD PTR [ecx+36], xmm0
	movups	xmm0, XMMWORD PTR [ebx+136]
	movups	XMMWORD PTR [ecx+52], xmm0
	movups	xmm0, XMMWORD PTR [ebx+152]
	movups	XMMWORD PTR [ecx+68], xmm0
	movq	xmm0, QWORD PTR [ebx+168]

; 489  :       pDst + sizeof(int),
; 490  :       &srd._analysis_data_divided,
; 491  :       sizeof(srd._analysis_data_divided)
; 492  :     );
; 493  :   }
; 494  :   else

	jmp	SHORT $LN141@GetFrame
$LN4@GetFrame:

; 495  :   {
; 496  :     memcpy(

	movups	xmm0, XMMWORD PTR [ebx]
	movups	XMMWORD PTR [ecx+4], xmm0
	movups	xmm0, XMMWORD PTR [ebx+16]
	movups	XMMWORD PTR [ecx+20], xmm0
	movups	xmm0, XMMWORD PTR [ebx+32]
	movups	XMMWORD PTR [ecx+36], xmm0
	movups	xmm0, XMMWORD PTR [ebx+48]
	movups	XMMWORD PTR [ecx+52], xmm0
	movups	xmm0, XMMWORD PTR [ebx+64]
	movups	XMMWORD PTR [ecx+68], xmm0
	movq	xmm0, QWORD PTR [ebx+80]
$LN141@GetFrame:
	movq	QWORD PTR [ecx+84], xmm0
; File c:\github\mvtools\sources\sharedptr.hpp

; 171  : 	return (_obj_ptr);

	mov	eax, DWORD PTR [ebx+176]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 502  :   pDst += headerSize;

	add	ecx, DWORD PTR [edi+544]
	mov	DWORD PTR _pDst$1$[ebp], ecx
; File c:\github\mvtools\sources\fakegroupofplanes.cpp

; 119  : 	return planes[0]->IsSceneChange(nThSCD1, nThSCD2);

	mov	ecx, DWORD PTR [eax+88]
	push	DWORD PTR [eax+220]
	push	DWORD PTR [eax+216]
	mov	ecx, DWORD PTR [ecx]
	call	?IsSceneChange@FakePlaneOfBlocks@@QBE_NHH@Z ; FakePlaneOfBlocks::IsSceneChange
; File c:\github\mvtools\sources\mvclip.cpp

; 264  :    return (!FakeGroupOfPlanes::IsSceneChange(nSCD1_, nSCD2_)) && FakeGroupOfPlanes::IsValid();

	test	al, al
	jne	$LN8@GetFrame
; File c:\github\mvtools\sources\fakegroupofplanes.h

; 64   : 	inline bool IsValid() const { return validity; }

	mov	eax, DWORD PTR [ebx+176]
	mov	al, BYTE PTR [eax+68]
; File c:\github\mvtools\sources\mvclip.cpp

; 264  :    return (!FakeGroupOfPlanes::IsSceneChange(nSCD1_, nSCD2_)) && FakeGroupOfPlanes::IsValid();

	test	al, al
	je	$LN8@GetFrame
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 504  :   if (!srd._clip_sptr->IsUsable() || nsrc < minframe || nsrc >= maxframe)

	mov	edx, DWORD PTR _nsrc$1$[ebp]
	cmp	edx, DWORD PTR _minframe$1$[ebp]
	jl	$LN8@GetFrame
	cmp	edx, DWORD PTR _maxframe$1$[ebp]
	jge	$LN8@GetFrame
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	eax, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 512  :     ::PVideoFrame	src = child->GetFrame(nsrc, env); // v2.0

	mov	esi, DWORD PTR _env$[ebp]
	push	esi
	push	edx
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _src$7[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+4]

; 513  :     load_src_frame(*pSrcGOF, src, srd._analysis_data);

	push	ebx
	lea	eax, DWORD PTR _src$7[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	eax
	push	DWORD PTR [edi+552]
	mov	ecx, edi
	call	?load_src_frame@MVRecalculate@@AAEXAAVMVGroupOfFrames@@AAVPVideoFrame@@ABVMVAnalysisData@@@Z ; MVRecalculate::load_src_frame
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	eax, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 516  :     ::PVideoFrame	ref = child->GetFrame(nref, env); // v2.0

	lea	edx, DWORD PTR _ref$9[ebp]
	push	esi
	mov	esi, DWORD PTR _nref$1$[ebp]
	push	esi
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+4]

; 517  :     load_src_frame(*pRefGOF, ref, srd._analysis_data);

	push	ebx
	lea	eax, DWORD PTR _ref$9[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	eax
	push	DWORD PTR [edi+556]
	mov	ecx, edi
	call	?load_src_frame@MVRecalculate@@AAEXAAVMVGroupOfFrames@@AAVPVideoFrame@@ABVMVAnalysisData@@@Z ; MVRecalculate::load_src_frame
; File c:\github\mvtools\sources\include\avisynth.h

; 637  :   bool IsFieldBased() const AVS_BakedCode(return AVS_LinkCall(IsFieldBased)())

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN92@GetFrame
	cmp	DWORD PTR [eax], 64			; 00000040H
	jbe	SHORT $LN92@GetFrame
	mov	eax, DWORD PTR [eax+64]
	lea	ecx, DWORD PTR [edi+16]
	call	eax
	movzx	eax, al
	jmp	SHORT $LN93@GetFrame
$LN92@GetFrame:
	xor	eax, eax
$LN93@GetFrame:
; File c:\github\mvtools\sources\clipfnc.cpp

; 55   : 	if (field_flag && npel > 1 && ((nsrc - nref) & 1) != 0)

	test	al, al
	je	SHORT $LN95@GetFrame
	mov	edx, DWORD PTR [ebx+16]
	lea	ecx, DWORD PTR [edi+8]
	push	esi
	push	DWORD PTR _nsrc$1$[ebp]
	call	?compute_fieldshift@ClipFnc@@SAHAAVPClip@@_NHHH@Z ; ClipFnc::compute_fieldshift
	add	esp, 8
	mov	esi, eax
	jmp	SHORT $LN101@GetFrame
$LN95@GetFrame:

; 56   : 	{
; 57   : 		const bool		parity_src = clp->GetParity (nsrc);
; 58   : 		const bool		parity_ref = clp->GetParity (nref);
; 59   : 
; 60   : 		if (parity_src && ! parity_ref)
; 61   : 		{
; 62   : 			fieldshift = npel / 2;
; 63   : 		}
; 64   : 		else if (parity_ref && ! parity_src)
; 65   : 		{
; 66   : 			fieldshift = -(npel / 2);
; 67   : 		}
; 68   : 	}
; 69   : 
; 70   : 	return (fieldshift);

	xor	esi, esi
$LN101@GetFrame:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 527  :     if (outfile != NULL)

	mov	eax, DWORD PTR [edi+128]
	test	eax, eax
	je	SHORT $LN9@GetFrame

; 528  :     {
; 529  :       fwrite(&n, sizeof(int), 1, outfile);	// write frame number

	push	eax
	push	1
	lea	eax, DWORD PTR _n$[ebp]
	push	4
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
$LN9@GetFrame:

; 530  :     }
; 531  : 
; 532  :     _vectorfields_aptr->RecalculateMVs(

	movzx	eax, BYTE PTR [edi+124]
	push	eax
	push	DWORD PTR [edi+120]
	mov	ecx, DWORD PTR [edi+76]
	push	DWORD PTR [edi+548]
	push	esi
	push	DWORD PTR [edi+132]
	mov	esi, DWORD PTR _pDst$1$[ebp]
	push	esi
	push	DWORD PTR [ebx+32]
	push	DWORD PTR [edi+100]
	push	DWORD PTR [edi+96]
	push	DWORD PTR [edi+84]
	push	DWORD PTR [edi+92]
	push	DWORD PTR [edi+88]
	push	DWORD PTR [edi+556]
	push	DWORD PTR [edi+552]
	push	DWORD PTR [ebx+176]
	call	?RecalculateMVs@GroupOfPlanes@@QAEXAAVMVClip@@PAVMVGroupOfFrames@@1W4SearchType@@HHHHHPAHPAFHHH_N@Z ; GroupOfPlanes::RecalculateMVs

; 533  :       *(srd._clip_sptr), pSrcGOF, pRefGOF,
; 534  :       searchType, nSearchParam, nLambda, lsad, pnew,
; 535  :       srd._analysis_data.nFlags, reinterpret_cast <int *> (pDst),
; 536  :       outfilebuf, fieldShift, thSAD, smooth, meander
; 537  :     );
; 538  : 
; 539  :     if (divideExtra)

	cmp	DWORD PTR [edi+116], 0
	je	SHORT $LN10@GetFrame

; 540  :     {
; 541  :       // make extra level with divided sublocks with median (not estimated)
; 542  :       // motion
; 543  :       _vectorfields_aptr->ExtraDivide(

	push	ecx
	mov	ecx, DWORD PTR [edi+76]
	push	esi
	call	?ExtraDivide@GroupOfPlanes@@QAEXPAHH@Z	; GroupOfPlanes::ExtraDivide
$LN10@GetFrame:

; 544  :         reinterpret_cast <int *> (pDst),
; 545  :         srd._analysis_data.nFlags
; 546  :       );
; 547  :     }
; 548  : 
; 549  :     //		PROFILE_CUMULATE ();
; 550  :     if (outfile != NULL)

	mov	eax, DWORD PTR [edi+128]
	test	eax, eax
	je	SHORT $LN11@GetFrame

; 551  :     {
; 552  :       fwrite(

	push	eax
	mov	eax, DWORD PTR [ebx+56]
	imul	eax, DWORD PTR [ebx+52]
	push	1
	shl	eax, 3
	push	eax
	push	DWORD PTR [edi+132]
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
$LN11@GetFrame:
; File c:\github\mvtools\sources\include\avisynth.h

; 982  :   ~PVideoFrame() AVS_BakedCode( AVS_LinkCall(PVideoFrame_DESTRUCTOR)() )

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	esi, esi
	je	SHORT $LN119@GetFrame
	cmp	DWORD PTR [esi], 272			; 00000110H
	jbe	SHORT $LN119@GetFrame
	mov	eax, DWORD PTR [esi+272]
	lea	ecx, DWORD PTR _ref$9[ebp]
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN119@GetFrame:
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	test	esi, esi
	je	SHORT $LN83@GetFrame
	cmp	DWORD PTR [esi], 272			; 00000110H
	jbe	SHORT $LN83@GetFrame
	mov	eax, DWORD PTR [esi+272]
	lea	ecx, DWORD PTR _src$7[ebp]
	call	eax
	jmp	SHORT $LN142@GetFrame
$LN8@GetFrame:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 777  : 		return (get());

	mov	edi, DWORD PTR [edi+76]
; File c:\github\mvtools\sources\groupofplanes.cpp

; 305  :   array[0] = GetArraySize();

	mov	ecx, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 777  : 		return (get());

	mov	DWORD PTR $T8[ebp], edi
; File c:\github\mvtools\sources\groupofplanes.cpp

; 305  :   array[0] = GetArraySize();

	call	?GetArraySize@GroupOfPlanes@@QAEHXZ	; GroupOfPlanes::GetArraySize
	mov	ecx, DWORD PTR _pDst$1$[ebp]
	mov	DWORD PTR [ecx], eax

; 306  : 
; 307  :   // write validity : unvalid in that case
; 308  :   array[1] = 0;
; 309  : 
; 310  :   array += 2;

	lea	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], 0

; 311  : 
; 312  :   // write planes
; 313  :   for (int i = nLevelCount - 1; i >= 0; i--)

	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	js	SHORT $LN83@GetFrame
	mov	esi, DWORD PTR $T8[ebp]
$LL84@GetFrame:

; 314  :   {
; 315  :     array += planes[i]->WriteDefaultToArray(array, divideExtra);

	mov	ecx, DWORD PTR [esi+56]
	push	DWORD PTR [esi+44]
	push	ebx
	mov	ecx, DWORD PTR [ecx+edi*4]
	call	?WriteDefaultToArray@PlaneOfBlocks@@QAEHPAHH@Z ; PlaneOfBlocks::WriteDefaultToArray
	sub	edi, 1
	lea	ebx, DWORD PTR [ebx+eax*4]
	jns	SHORT $LL84@GetFrame
$LN142@GetFrame:
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN83@GetFrame:
; File c:\github\mvtools\sources\include\avisynth.h

; 982  :   ~PVideoFrame() AVS_BakedCode( AVS_LinkCall(PVideoFrame_DESTRUCTOR)() )

	mov	DWORD PTR __$EHRec$[ebp+8], 6
	test	esi, esi
	je	SHORT $LN137@GetFrame
	cmp	DWORD PTR [esi], 272			; 00000110H
	jbe	SHORT $LN137@GetFrame
	mov	edx, DWORD PTR [esi+272]
	lea	ecx, DWORD PTR _mvn$[ebp]
	call	edx
$LN137@GetFrame:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 562  :   return dst;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 563  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$0:
	lea	ecx, DWORD PTR _mvn$[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN21@GetFrame
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
$LN21@GetFrame:
	ret	0
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$2:
	lea	ecx, DWORD PTR _src$7[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$3:
	lea	ecx, DWORD PTR _ref$9[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$15:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$16:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$17:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFrame@MVRecalculate@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; MVRecalculate::GetFrame
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvrecalculate.cpp
;	COMDAT ?load_src_frame@MVRecalculate@@AAEXAAVMVGroupOfFrames@@AAVPVideoFrame@@ABVMVAnalysisData@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_gof$ = 8						; size = 4
_pSrcY$1$ = 12						; size = 4
_src$ = 12						; size = 4
_ana_data$ = 16						; size = 4
?load_src_frame@MVRecalculate@@AAEXAAVMVGroupOfFrames@@AAVPVideoFrame@@ABVMVAnalysisData@@@Z PROC ; MVRecalculate::load_src_frame, COMDAT
; _this$ = ecx

; 568  : {

	push	ecx

; 569  :   PROFILE_START(MOTION_PROFILE_YUY2CONVERT);
; 570  :   const unsigned char *	pSrcY;
; 571  :   const unsigned char *	pSrcU;
; 572  :   const unsigned char *	pSrcV;
; 573  :   int				nSrcPitchY;
; 574  :   int				nSrcPitchUV;
; 575  :   if ((ana_data.pixelType & VideoInfo::CS_YUY2) == VideoInfo::CS_YUY2)

	mov	eax, DWORD PTR _ana_data$[esp]
	push	ebx
	push	ebp
	push	esi
	mov	eax, DWORD PTR [eax+60]
	and	eax, 1610612740				; 60000004H
	mov	DWORD PTR _this$1$[esp+16], ecx
	push	edi
	cmp	eax, 1610612740				; 60000004H
	jne	$LN2@load_src_f
; File c:\github\mvtools\sources\include\avisynth.h

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage

; 976  :   VideoFrame* operator->() const { return p; }

	mov	edi, DWORD PTR _src$[esp+16]

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	esi, esi
	je	SHORT $LN9@load_src_f
	cmp	DWORD PTR [esi], 212			; 000000d4H
	jbe	SHORT $LN9@load_src_f
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [esi+212]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	ebp, eax
	mov	DWORD PTR _pSrcY$1$[esp+16], eax
	jmp	SHORT $LN10@load_src_f
$LN9@load_src_f:
	xor	ebp, ebp
	mov	DWORD PTR _pSrcY$1$[esp+16], ebp
$LN10@load_src_f:

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN15@load_src_f
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN15@load_src_f
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN16@load_src_f
$LN15@load_src_f:
	xor	eax, eax
$LN16@load_src_f:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 580  :     pSrcU = pSrcY + src->GetRowSize() / 2;

	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	add	ebx, ebp
; File c:\github\mvtools\sources\include\avisynth.h

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN21@load_src_f
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN21@load_src_f
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN22@load_src_f
$LN21@load_src_f:
	xor	eax, eax
$LN22@load_src_f:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 581  :     pSrcV = pSrcU + src->GetRowSize() / 4;

	cdq
	and	edx, 3
	lea	ebp, DWORD PTR [edx+eax]
	sar	ebp, 2
	add	ebp, ebx
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	esi, esi
	je	SHORT $LN27@load_src_f
	cmp	DWORD PTR [esi], 192			; 000000c0H
	jbe	SHORT $LN27@load_src_f
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [esi+192]
	push	0
	call	eax
	mov	edi, eax
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 585  :   else

	jmp	$LN58@load_src_f
$LN27@load_src_f:
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	xor	edi, edi
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 583  :     nSrcPitchUV = nSrcPitchY;

	mov	eax, edi

; 585  :   else

	jmp	$LN58@load_src_f
$LN2@load_src_f:
; File c:\github\mvtools\sources\include\avisynth.h

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage

; 976  :   VideoFrame* operator->() const { return p; }

	mov	esi, DWORD PTR _src$[esp+16]

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	eax, eax
	je	SHORT $LN33@load_src_f
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN33@load_src_f
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+212]
	push	1
	call	eax
	mov	DWORD PTR _pSrcY$1$[esp+16], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN34@load_src_f
$LN33@load_src_f:
	mov	DWORD PTR _pSrcY$1$[esp+16], 0
$LN34@load_src_f:
	test	eax, eax
	je	SHORT $LN39@load_src_f
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN39@load_src_f
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+212]
	push	2
	call	eax
	mov	ebx, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN40@load_src_f
$LN39@load_src_f:
	xor	ebx, ebx
$LN40@load_src_f:
	test	eax, eax
	je	SHORT $LN45@load_src_f
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN45@load_src_f
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+212]
	push	4
	call	eax
	mov	ebp, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN46@load_src_f
$LN45@load_src_f:
	xor	ebp, ebp
$LN46@load_src_f:

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	eax, eax
	je	SHORT $LN51@load_src_f
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN51@load_src_f
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+192]
	push	1
	call	eax
	mov	edi, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN52@load_src_f
$LN51@load_src_f:
	xor	edi, edi
$LN52@load_src_f:
	test	eax, eax
	je	SHORT $LN57@load_src_f
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN57@load_src_f
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+192]
	push	2
	call	eax
	jmp	SHORT $LN58@load_src_f
$LN57@load_src_f:
	xor	eax, eax
$LN58@load_src_f:
; File c:\github\mvtools\sources\mvrecalculate.cpp

; 595  :   gof.Update(

	mov	ecx, DWORD PTR _gof$[esp+16]
	push	eax
	push	ebp
	push	eax
	mov	eax, DWORD PTR _this$1$[esp+32]
	push	ebx
	push	edi
	push	DWORD PTR _pSrcY$1$[esp+36]
	push	DWORD PTR [eax+560]
	call	?Update@MVGroupOfFrames@@QAEXHPAEH0H0H@Z ; MVGroupOfFrames::Update
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 596  :     nModeYUV,
; 597  :     (BYTE*)pSrcY, nSrcPitchY,
; 598  :     (BYTE*)pSrcU, nSrcPitchUV,
; 599  :     (BYTE*)pSrcV, nSrcPitchUV
; 600  :   ); // v2.0
; 601  : }

	pop	ecx
	ret	12					; 0000000cH
?load_src_frame@MVRecalculate@@AAEXAAVMVGroupOfFrames@@AAVPVideoFrame@@ABVMVAnalysisData@@@Z ENDP ; MVRecalculate::load_src_frame
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEAAVSrcRefData@MVRecalculate@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEAAVSrcRefData@MVRecalculate@@I@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::operator[], COMDAT
; _this$ = ecx

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

	imul	eax, DWORD PTR __Pos$[esp-4], 184
	add	eax, DWORD PTR [ecx]

; 1243 : 		}

	ret	4
??A?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEAAVSrcRefData@MVRecalculate@@I@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?resize@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
$T2 = 8							; size = 1
__Newsize$ = 8						; size = 4
?resize@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::resize, COMDAT
; _this$ = ecx

; 1133 : 		{	// determine new length, padding as needed

	push	ebx
	mov	ebx, ecx

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, -1307163959			; b21642c9H
	push	ebp
	push	esi
	push	edi
	mov	ebp, DWORD PTR [ebx+4]
	mov	esi, ebp
	sub	esi, DWORD PTR [ebx]

; 1134 : 		if (_Newsize < size())

	mov	edi, DWORD PTR __Newsize$[esp+12]

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	imul	esi
	add	edx, esi
	sar	edx, 7
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx

; 1134 : 		if (_Newsize < size())

	cmp	ecx, edi
	jbe	SHORT $LN202@resize
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T2[esp+12]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;

	sub	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	mov	edx, ebp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;

	imul	esi, edi, 184
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;

	add	esi, ebp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	mov	ecx, esi
	call	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1535 : 		this->_Mylast() = _Ptr;

	mov	DWORD PTR [ebx+4], esi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1147 : 			}
; 1148 : 		}

	ret	4
$LN202@resize:

; 1135 : 			_Pop_back_n(size() - _Newsize);
; 1136 : 		else if (size() < _Newsize)

	jae	SHORT $LN4@resize

; 1137 : 			{	// pad as needed
; 1138 : 			_Reserve(_Newsize - size());

	mov	eax, edi
	sub	eax, ecx
	mov	ecx, ebx
	push	eax
	call	?_Reserve@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reserve

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, -1307163959			; b21642c9H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	_Uninitialized_default_fill_n1(_First, _Count, _Al,

	push	DWORD PTR $T1[esp+12]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	esi, ecx
	sub	esi, DWORD PTR [ebx]
	imul	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	_Uninitialized_default_fill_n1(_First, _Count, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	add	edx, esi
	sar	edx, 7
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx

; 1139 : 			_TRY_BEGIN
; 1140 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),

	mov	edx, edi
	sub	edx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	_Uninitialized_default_fill_n1(_First, _Count, _Al,

	call	??$_Uninitialized_default_fill_n1@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Uninitialized_default_fill_n1<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, -1307163959			; b21642c9H
	sub	ecx, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	_Uninitialized_default_fill_n1(_First, _Count, _Al,

	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	imul	ecx
	add	edx, ecx
	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1141 : 				this->_Getal());
; 1142 : 			_CATCH_ALL
; 1143 : 			_Tidy();
; 1144 : 			_RERAISE;
; 1145 : 			_CATCH_END
; 1146 : 			this->_Mylast() += _Newsize - size();

	sub	edi, eax
	imul	eax, edi, 184
	add	DWORD PTR [ebx+4], eax
$LN4@resize:

; 1147 : 			}
; 1148 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
?resize@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::~vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; _this$ = ecx

; 976  : 		_Tidy();

	jmp	?_Tidy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXXZ ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Tidy
??1?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::~vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 708  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 708  : 		}

	ret	0
??0?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Mylast, COMDAT
; _this$ = ecx

; 653  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 654  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myfirst, COMDAT
; _this$ = ecx

; 643  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 644  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Getal, COMDAT
; _this$ = ecx

; 623  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 624  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 521  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 521  : 		}

	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
?_Tidy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXXZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Tidy, COMDAT
; _this$ = ecx

; 1636 : 		{	// free all storage

	push	ecx
	push	edi
	mov	edi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	mov	edx, DWORD PTR [edi+4]
	push	esi
	push	DWORD PTR $T1[esp+12]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	esi, DWORD PTR [edi+8]
	mov	eax, -1307163959			; b21642c9H
	mov	ecx, DWORD PTR [edi]
	sub	esi, ecx
	imul	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	184					; 000000b8H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	lea	eax, DWORD PTR [esi+edx]
	sar	eax, 7
	mov	edx, eax
	shr	edx, 31					; 0000001fH
	add	edx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [edi], 0

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [edi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [edi+8], 0
	pop	esi
$LN2@Tidy:
	pop	edi

; 1646 : 			}
; 1647 : 		}

	pop	ecx
	ret	0
?_Tidy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXXZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reserve, COMDAT
; _this$ = ecx

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebx
	mov	ebx, ecx

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	eax, -1307163959			; b21642c9H
	push	ebp
	push	esi
	push	edi
	mov	ebp, DWORD PTR [ebx+8]
	mov	esi, ebp
	mov	edi, DWORD PTR [ebx+4]
	sub	esi, edi
	imul	esi
	add	edx, esi

; 1627 : 		if (_Unused_capacity() < _Count)

	mov	esi, DWORD PTR __Count$[esp+12]

; 1048 : 		return (this->_Myend() - this->_Mylast());

	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1627 : 		if (_Unused_capacity() < _Count)

	cmp	eax, esi
	jae	SHORT $LN2@Reserve

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sub	edi, DWORD PTR [ebx]
	mov	eax, -1307163959			; b21642c9H
	imul	edi

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	mov	eax, 23342213				; 01642c85H

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	add	edx, edi
	sar	edx, 7
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	sub	eax, ecx
	cmp	eax, esi
	jae	SHORT $LN3@Reserve

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	ebp, DWORD PTR [ebx]

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	lea	edi, DWORD PTR [ecx+esi]

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, -1307163959			; b21642c9H
	xor	ecx, ecx
	imul	ebp
	add	edx, ebp
	sar	edx, 7
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	edx, 23342213				; 01642c85H
	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	add	eax, esi
	cmp	edx, esi
	cmovae	ecx, eax
	cmp	ecx, edi
	cmovae	edi, ecx

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, ebx
	push	edi
	call	?_Reallocate@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reallocate
$LN2@Reserve:

; 1632 : 			}
; 1633 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	4
$LN134@Reserve:
?_Reserve@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Pop_back_n@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
__Count$ = 8						; size = 4
?_Pop_back_n@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Pop_back_n, COMDAT
; _this$ = ecx

; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;

	imul	eax, DWORD PTR __Count$[esp-4], 184
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[esp+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1527 : 		{	// erase _Count elements at end

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;

	mov	edx, DWORD PTR [edi+4]
	mov	esi, edx
	sub	esi, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	mov	ecx, esi
	call	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1535 : 		this->_Mylast() = _Ptr;

	mov	DWORD PTR [edi+4], esi
	pop	edi
	pop	esi

; 1536 : 		}

	ret	4
?_Pop_back_n@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXI@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Pop_back_n
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::size, COMDAT
; _this$ = ecx

; 1179 : 		{	// return length of sequence

	push	esi

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	esi, DWORD PTR [ecx+4]
	mov	eax, -1307163959			; b21642c9H
	sub	esi, DWORD PTR [ecx]
	imul	esi
	add	edx, esi
	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	pop	esi

; 1181 : 		}

	ret	0
?size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::deallocate, COMDAT
; _this$dead$ = ecx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	edx, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	push	184					; 000000b8H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myend, COMDAT
; _this$ = ecx

; 663  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 664  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAPAVSrcRefData@MVRecalculate@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Mylast, COMDAT
; _this$ = ecx

; 658  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 659  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myfirst, COMDAT
; _this$ = ecx

; 648  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 649  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Get_data, COMDAT
; _this$ = ecx

; 633  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 634  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEXXZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Xlen, COMDAT
; _this$dead$ = ecx

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEXXZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = 8							; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reallocate, COMDAT
; _this$ = ecx

; 1601 : 		{	// move to array of exactly _Count elements

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 976  : 		return (_Mybase::allocate(_Count));

	push	DWORD PTR __Count$[esp+20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1601 : 		{	// move to array of exactly _Count elements

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 976  : 		return (_Mybase::allocate(_Count));

	call	?allocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z ; std::allocator<MVRecalculate::SrcRefData>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	mov	edx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[esp+28], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[esp+28]
	push	ecx
	mov	ecx, DWORD PTR [edi]
	push	ebx
	call	??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	esi, DWORD PTR [edi]
	mov	eax, -1307163959			; b21642c9H
	mov	ecx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sub	ecx, esi
	imul	ecx
	add	edx, ecx
	sar	edx, 7
	mov	ebp, edx
	shr	ebp, 31					; 0000001fH
	add	ebp, edx

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();
; 1612 : 		if (this->_Myfirst() != pointer())

	test	esi, esi
	je	SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T2[esp+20]
	mov	edx, DWORD PTR [edi+4]
	push	ecx
	mov	ecx, esi
	call	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	esi, DWORD PTR [edi+8]
	mov	eax, -1307163959			; b21642c9H
	mov	ecx, DWORD PTR [edi]
	sub	esi, ecx
	imul	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	184					; 000000b8H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	lea	eax, DWORD PTR [esi+edx]
	sar	eax, 7
	mov	edx, eax
	shr	edx, 31					; 0000001fH
	add	edx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		this->_Myend() = _Ptr + _Count;

	imul	eax, DWORD PTR __Count$[esp+20], 184
	add	eax, ebx
	mov	DWORD PTR [edi+8], eax

; 1621 : 		this->_Mylast() = _Ptr + _Size;

	imul	eax, ebp, 184
	add	eax, ebx
	mov	DWORD PTR [edi+4], eax

; 1622 : 		this->_Myfirst() = _Ptr;

	mov	DWORD PTR [edi], ebx

; 1623 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
?_Reallocate@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEII@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Grow_to, COMDAT
; _this$ = ecx

; 1585 : 		{	// grow by 50% or at least to _Count

	push	esi

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	esi, DWORD PTR [ecx+8]
	mov	eax, -1307163959			; b21642c9H
	sub	esi, DWORD PTR [ecx]
	imul	esi
	add	edx, esi
	sar	edx, 7
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	edx, 23342213				; 01642c85H
	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	lea	ecx, DWORD PTR [eax+esi]
	xor	eax, eax
	cmp	edx, esi
	pop	esi
	cmovae	eax, ecx

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

	cmp	eax, DWORD PTR __Count$[esp-4]
	cmovb	eax, DWORD PTR __Count$[esp-4]

; 1591 : 			_Capacity = _Count;
; 1592 : 		return (_Capacity);
; 1593 : 		}

	ret	4
?_Grow_to@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IBEII@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXPAVSrcRefData@MVRecalculate@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T1 = 12						; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXPAVSrcRefData@MVRecalculate@@0@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Destroy, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[esp-4]
	mov	edx, DWORD PTR __Last$[esp]
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+4]
	call	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1582 : 		}

	ret	8
?_Destroy@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEXPAVSrcRefData@MVRecalculate@@0@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::max_size, COMDAT
; _this$dead$ = ecx

; 1185 : 		return (this->_Getal().max_size());

	mov	eax, 23342213				; 01642c85H

; 1186 : 		}

	ret	0
?max_size@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		{	// micro-optimization for capacity() - size()

	push	esi

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	esi, DWORD PTR [ecx+8]
	mov	eax, -1307163959			; b21642c9H
	sub	esi, DWORD PTR [ecx+4]
	imul	esi
	add	edx, esi
	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	pop	esi

; 1049 : 		}

	ret	0
?_Unused_capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::max_size, COMDAT
; _this$dead$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	mov	eax, 23342213				; 01642c85H

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::allocate, COMDAT
; _this$dead$ = ecx

; 976  : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z ; std::allocator<MVRecalculate::SrcRefData>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myend, COMDAT
; _this$ = ecx

; 668  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 669  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABQAVSrcRefData@MVRecalculate@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Get_data, COMDAT
; _this$ = ecx

; 638  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 639  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Getal, COMDAT
; _this$ = ecx

; 628  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 629  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		{	// return current length of allocated storage

	push	esi

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	esi, DWORD PTR [ecx+8]
	mov	eax, -1307163959			; b21642c9H
	sub	esi, DWORD PTR [ecx]
	imul	esi
	add	edx, esi
	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	pop	esi

; 1044 : 		}

	ret	0
?capacity@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QBEIXZ ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z PROC ; std::allocator<MVRecalculate::SrcRefData>::deallocate, COMDAT
; _this$dead$ = ecx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	edx, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	push	184					; 000000b8H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx

; 721  : 		}

	ret	8
?deallocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@I@Z ENDP ; std::allocator<MVRecalculate::SrcRefData>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAIABV?$allocator@VSrcRefData@MVRecalculate@@@2@@Z
_TEXT	SEGMENT
?max_size@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAIABV?$allocator@VSrcRefData@MVRecalculate@@@2@@Z PROC ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::max_size, COMDAT
; __Al$dead$ = ecx

; 869  : 		return (_Al.max_size());

	mov	eax, 23342213				; 01642c85H

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAIABV?$allocator@VSrcRefData@MVRecalculate@@@2@@Z ENDP ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z PROC ; std::allocator<MVRecalculate::SrcRefData>::allocate, COMDAT
; _this$dead$ = ecx

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jne	SHORT $LN4@allocate

; 52   : 		return (_Ptr);

	xor	ecx, ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

	mov	eax, ecx

; 726  : 		}

	ret	4
$LN4@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 23342213				; 01642c85H
	jbe	SHORT $LN5@allocate

; 56   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

	imul	eax, eax, 184

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	ecx, DWORD PTR [eax+35]
	and	ecx, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [ecx-4], eax

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

	mov	eax, ecx

; 726  : 		}

	ret	4
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	ecx, eax

; 726  : 		}

	ret	4
$LN14@allocate:
?allocate@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEPAVSrcRefData@MVRecalculate@@I@Z ENDP ; std::allocator<MVRecalculate::SrcRefData>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VSrcRefData@MVRecalculate@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VSrcRefData@MVRecalculate@@@std@@QBEIXZ PROC ; std::allocator<MVRecalculate::SrcRefData>::max_size, COMDAT
; _this$dead$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 23342213				; 01642c85H

; 750  : 		}

	ret	0
?max_size@?$allocator@VSrcRefData@MVRecalculate@@@std@@QBEIXZ ENDP ; std::allocator<MVRecalculate::SrcRefData>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__Al$dead$ = 8						; size = 4
??$_Uninitialized_default_fill_n@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 479  : 	{	// value-initialize _Count objects to raw _First, using _Al

	push	ecx

; 480  : 	typedef _Iter_value_t<_FwdIt> _Ty;
; 481  : 	_Uninitialized_default_fill_n1(_First, _Count, _Al,

	push	DWORD PTR $T1[esp+4]
	push	ecx
	call	??$_Uninitialized_default_fill_n1@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Uninitialized_default_fill_n1<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >

; 482  : 		typename conjunction<
; 483  : 			is_pointer<_FwdIt>,
; 484  : 			is_scalar<_Ty>,
; 485  : 			negation<is_volatile<_Ty>>,
; 486  : 			negation<is_member_pointer<_Ty>>,
; 487  : 			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>::type());
; 488  : 	}

	add	esp, 12					; 0000000cH
	ret	0
??$_Uninitialized_default_fill_n@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >,std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAVSrcRefData@MVRecalculate@@@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEPAVSrcRefData@MVRecalculate@@PAV23@00@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVSrcRefData@MVRecalculate@@@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEPAVSrcRefData@MVRecalculate@@PAV23@00@Z PROC ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Umove<MVRecalculate::SrcRefData *>, COMDAT
; _this$dead$ = ecx

; 1658 : 		{	// move initializing [_First, _Last), using allocator

	sub	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	mov	edx, DWORD PTR __Last$[esp+4]
	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[esp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[esp+12]
	push	ecx
	push	DWORD PTR __Ptr$[esp+16]
	mov	ecx, DWORD PTR __First$[esp+20]
	call	??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1661 : 		}

	add	esp, 24					; 00000018H
	ret	12					; 0000000cH
??$_Umove@PAVSrcRefData@MVRecalculate@@@?$vector@VSrcRefData@MVRecalculate@@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@IAEPAVSrcRefData@MVRecalculate@@PAV23@00@Z ENDP ; std::vector<MVRecalculate::SrcRefData,std::allocator<MVRecalculate::SrcRefData> >::_Umove<MVRecalculate::SrcRefData *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1114 : 	{	// destroy [_First, _Last), choose optimization

	push	ecx

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[esp+4]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

	add	esp, 12					; 0000000cH
	ret	0
??$_Destroy_range@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 489  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >::_Vector_val<std::_Simple_types<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VSrcRefData@MVRecalculate@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VSrcRefData@MVRecalculate@@@std@@QAE@XZ PROC ; std::allocator<MVRecalculate::SrcRefData>::allocator<MVRecalculate::SrcRefData>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@VSrcRefData@MVRecalculate@@@std@@QAE@XZ ENDP ; std::allocator<MVRecalculate::SrcRefData>::allocator<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n1@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Uninitialized_default_fill_n1@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Uninitialized_default_fill_n1<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 453  : 	{	// value-initialize _Count objects to raw _First, using _Al, no special optimization

	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx

; 457  : 	for (; 0 < _Count; --_Count, (void)++_First)

	test	edi, edi
	je	SHORT $LN3@Uninitiali
	npad	6
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	esi, esi
	je	SHORT $LN19@Uninitiali
	push	184					; 000000b8H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; File c:\github\mvtools\sources\sharedptr.hpp

; 35   : :	_obj_ptr (0)

	mov	DWORD PTR [esi+176], 0

; 36   : ,	_count_ptr (0)

	mov	DWORD PTR [esi+180], 0
$LN19@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 457  : 	for (; 0 < _Count; --_Count, (void)++_First)

	add	esi, 184				; 000000b8H
	sub	edi, 1
	jne	SHORT $LL4@Uninitiali
$LN3@Uninitiali:
	pop	edi
	pop	esi

; 458  : 		_Al.construct(_Unfancy(_First));
; 459  : 	_CATCH_ALL
; 460  : 	_Destroy_range(_Next, _First, _Al);
; 461  : 	_RERAISE;
; 462  : 	_CATCH_END
; 463  : 	}

	ret	0
??$_Uninitialized_default_fill_n1@PAVSrcRefData@MVRecalculate@@IV?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAXPAVSrcRefData@MVRecalculate@@IAAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Uninitialized_default_fill_n1<MVRecalculate::SrcRefData *,unsigned int,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z PROC ; std::_Uninitialized_move<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	sub	esp, 8

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[esp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[esp+12]
	push	ecx
	push	DWORD PTR __Dest$[esp+16]
	call	??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,
; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Uninitialized_move@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1099 : 	{	// destroy [_First, _Last), no special optimization

	push	edi
	mov	edi, edx

; 1100 : 	for (; _First != _Last; ++_First)

	cmp	ecx, edi
	je	SHORT $LN3@Destroy_ra
	push	esi
	lea	esi, DWORD PTR [ecx+180]
	npad	2
$LL4@Destroy_ra:
; File c:\github\mvtools\sources\sharedptr.hpp

; 284  : 	if (_obj_ptr != 0)

	cmp	DWORD PTR [esi-4], 0
	je	SHORT $LN26@Destroy_ra

; 285  : 	{
; 286  : 		-- *_count_ptr;

	mov	eax, DWORD PTR [esi]
	dec	DWORD PTR [eax]

; 287  : 		
; 288  : 		if (*_count_ptr == 0)

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN26@Destroy_ra

; 289  : 		{
; 290  : 			delete _obj_ptr;

	mov	ecx, DWORD PTR [esi-4]
	test	ecx, ecx
	je	SHORT $LN28@Destroy_ra
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+24]
$LN28@Destroy_ra:

; 291  : 			_obj_ptr = 0;
; 292  : 
; 293  : 			delete _count_ptr;

	push	4
	push	DWORD PTR [esi]
	mov	DWORD PTR [esi-4], 0
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 294  : 			_count_ptr = 0;

	mov	DWORD PTR [esi], 0
$LN26@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

	add	esi, 184				; 000000b8H
	lea	eax, DWORD PTR [esi-180]
	cmp	eax, edi
	jne	SHORT $LL4@Destroy_ra
	pop	esi
$LN3@Destroy_ra:
	pop	edi

; 1101 : 		_Al.destroy(_Unfancy(_First));
; 1102 : 	}

	ret	0
??$_Destroy_range1@V?$allocator@VSrcRefData@MVRecalculate@@@std@@PAVSrcRefData@MVRecalculate@@@std@@YAXPAVSrcRefData@MVRecalculate@@0AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<MVRecalculate::SrcRefData>,MVRecalculate::SrcRefData *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@VSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z
_TEXT	SEGMENT
??$_Unfancy@VSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z PROC ; std::_Unfancy<MVRecalculate::SrcRefData>, COMDAT
; __Ptr$ = ecx

; 740  : 	return (_Ptr);

	mov	eax, ecx

; 741  : 	}

	ret	0
??$_Unfancy@VSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z ENDP ; std::_Unfancy<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VSrcRefData@MVRecalculate@@$$V@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$construct@VSrcRefData@MVRecalculate@@$$V@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData>, COMDAT
; _this$dead$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	esi

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	esi, DWORD PTR __Ptr$[esp]
	test	esi, esi
	je	SHORT $LN7@construct
	push	184					; 000000b8H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; File c:\github\mvtools\sources\sharedptr.hpp

; 35   : :	_obj_ptr (0)

	mov	DWORD PTR [esi+176], 0

; 36   : ,	_count_ptr (0)

	mov	DWORD PTR [esi+180], 0
$LN7@construct:
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	ret	4
??$construct@VSrcRefData@MVRecalculate@@$$V@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAVSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z
_TEXT	SEGMENT
??$_Unchecked@PAVSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z PROC ; std::_Unchecked<MVRecalculate::SrcRefData *>, COMDAT
; __Src$ = ecx

; 428  : 	return (_Src);

	mov	eax, ecx

; 429  : 	}

	ret	0
??$_Unchecked@PAVSrcRefData@MVRecalculate@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@@Z ENDP ; std::_Unchecked<MVRecalculate::SrcRefData *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move_al_unchecked@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

	sub	esp, 8

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[esp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[esp+12]
	push	ecx
	push	DWORD PTR __Dest$[esp+16]
	call	??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Uninitialized_move_al_unchecked@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAVSrcRefData@MVRecalculate@@PAV12@@std@@YAAAPAVSrcRefData@MVRecalculate@@AAPAV12@PAV12@@Z
_TEXT	SEGMENT
??$_Rechecked@PAVSrcRefData@MVRecalculate@@PAV12@@std@@YAAAPAVSrcRefData@MVRecalculate@@AAPAV12@PAV12@@Z PROC ; std::_Rechecked<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *>, COMDAT
; __Dest$ = ecx
; __Src$ = edx

; 458  : 	_Dest = _Src;

	mov	DWORD PTR [ecx], edx

; 459  : 	return (_Dest);

	mov	eax, ecx

; 460  : 	}

	ret	0
??$_Rechecked@PAVSrcRefData@MVRecalculate@@PAV12@@std@@YAAAPAVSrcRefData@MVRecalculate@@AAPAV12@PAV12@@Z ENDP ; std::_Rechecked<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VSrcRefData@MVRecalculate@@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VSrcRefData@MVRecalculate@@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::destroy<MVRecalculate::SrcRefData>, COMDAT
; _this$dead$ = ecx

; 1002 : 		{	// destroy object at _Ptr

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	call	??1SrcRefData@MVRecalculate@@QAE@XZ

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

	ret	4
??$destroy@VSrcRefData@MVRecalculate@@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::destroy<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z
_TEXT	SEGMENT
??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z PROC ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	esi
	mov	esi, edx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	esi, esi
	je	SHORT $LN5@construct
	push	184					; 000000b8H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; File c:\github\mvtools\sources\sharedptr.hpp

; 35   : :	_obj_ptr (0)

	mov	DWORD PTR [esi+176], 0

; 36   : ,	_count_ptr (0)

	mov	DWORD PTR [esi+180], 0
$LN5@construct:
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	ret	0
??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z ENDP ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@VSrcRefData@MVRecalculate@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVSrcRefData@MVRecalculate@@0@Z
_TEXT	SEGMENT
??$_Ptr_move_cat@VSrcRefData@MVRecalculate@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVSrcRefData@MVRecalculate@@0@Z PROC ; std::_Ptr_move_cat<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 810  : 	return {};

	xor	al, al

; 811  : 	}

	ret	0
??$_Ptr_move_cat@VSrcRefData@MVRecalculate@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVSrcRefData@MVRecalculate@@0@Z ENDP ; std::_Ptr_move_cat<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 273  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	cmp	esi, edi
	je	SHORT $LN41@Uninitiali
	mov	ecx, DWORD PTR __Dest$[esp+4]
	npad	2
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN28@Uninitiali
	push	esi
	call	??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z
$LN28@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	add	esi, 184				; 000000b8H
	add	ecx, 184				; 000000b8H
	cmp	esi, edi
	jne	SHORT $LL4@Uninitiali

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

	pop	edi
	mov	eax, ecx
	pop	esi

; 285  : 	}

	ret	0
$LN41@Uninitiali:

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[esp+4]
	pop	edi
	pop	esi

; 285  : 	}

	ret	0
??$_Uninitialized_move_al_unchecked1@PAVSrcRefData@MVRecalculate@@PAV12@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@YAPAVSrcRefData@MVRecalculate@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<MVRecalculate::SrcRefData *,MVRecalculate::SrcRefData *,std::allocator<MVRecalculate::SrcRefData> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VSrcRefData@MVRecalculate@@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z
_TEXT	SEGMENT
??$destroy@VSrcRefData@MVRecalculate@@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z PROC ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::destroy<MVRecalculate::SrcRefData>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 863  : 		{	// destroy object at _Ptr

	mov	ecx, edx
	jmp	??1SrcRefData@MVRecalculate@@QAE@XZ
??$destroy@VSrcRefData@MVRecalculate@@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@@Z ENDP ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::destroy<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAVSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z
_TEXT	SEGMENT
??$move@AAVSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z PROC ; std::move<MVRecalculate::SrcRefData &>, COMDAT
; __Arg$ = ecx

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, ecx

; 1293 : 	}

	ret	0
??$move@AAVSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z ENDP ; std::move<MVRecalculate::SrcRefData &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\github\mvtools\sources\sharedptr.hpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z PROC ; std::allocator<MVRecalculate::SrcRefData>::construct<MVRecalculate::SrcRefData>, COMDAT
; _this$dead$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	esi

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	esi, DWORD PTR __Ptr$[esp]
	test	esi, esi
	je	SHORT $LN3@construct
	push	184					; 000000b8H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; File c:\github\mvtools\sources\sharedptr.hpp

; 35   : :	_obj_ptr (0)

	mov	DWORD PTR [esi+176], 0

; 36   : ,	_count_ptr (0)

	mov	DWORD PTR [esi+180], 0
$LN3@construct:
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	ret	4
??$construct@VSrcRefData@MVRecalculate@@$$V@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ENDP ; std::allocator<MVRecalculate::SrcRefData>::construct<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VSrcRefData@MVRecalculate@@V12@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VSrcRefData@MVRecalculate@@V12@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>, COMDAT
; _this$dead$ = ecx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	push	DWORD PTR _<_Args_0>$[esp-4]
	call	??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

	ret	8
??$construct@VSrcRefData@MVRecalculate@@V12@@?$_Wrap_alloc@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VSrcRefData@MVRecalculate@@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VSrcRefData@MVRecalculate@@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z PROC ; std::allocator<MVRecalculate::SrcRefData>::destroy<MVRecalculate::SrcRefData>, COMDAT
; _this$dead$ = ecx

; 743  : 		{	// destroy object at _Ptr

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	call	??1SrcRefData@MVRecalculate@@QAE@XZ

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

	ret	4
??$destroy@VSrcRefData@MVRecalculate@@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@@Z ENDP ; std::allocator<MVRecalculate::SrcRefData>::destroy<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\sharedptr.hpp
;	COMDAT ??0SrcRefData@MVRecalculate@@QAE@XZ
_TEXT	SEGMENT
??0SrcRefData@MVRecalculate@@QAE@XZ PROC		; MVRecalculate::SrcRefData::SrcRefData, COMDAT
; _this$ = ecx

; 35   : :	_obj_ptr (0)

	mov	DWORD PTR [ecx+176], 0
	mov	eax, ecx

; 36   : ,	_count_ptr (0)

	mov	DWORD PTR [ecx+180], 0
	ret	0
??0SrcRefData@MVRecalculate@@QAE@XZ ENDP		; MVRecalculate::SrcRefData::SrcRefData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GSrcRefData@MVRecalculate@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GSrcRefData@MVRecalculate@@QAEPAXI@Z PROC		; MVRecalculate::SrcRefData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1SrcRefData@MVRecalculate@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	4
??_GSrcRefData@MVRecalculate@@QAEPAXI@Z ENDP		; MVRecalculate::SrcRefData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\sharedptr.hpp
;	COMDAT ??1SrcRefData@MVRecalculate@@QAE@XZ
_TEXT	SEGMENT
??1SrcRefData@MVRecalculate@@QAE@XZ PROC		; MVRecalculate::SrcRefData::~SrcRefData, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx

; 284  : 	if (_obj_ptr != 0)

	cmp	DWORD PTR [esi+176], 0
	je	SHORT $LN8@SrcRefData

; 285  : 	{
; 286  : 		-- *_count_ptr;

	mov	eax, DWORD PTR [esi+180]
	dec	DWORD PTR [eax]

; 287  : 		
; 288  : 		if (*_count_ptr == 0)

	mov	eax, DWORD PTR [esi+180]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@SrcRefData

; 289  : 		{
; 290  : 			delete _obj_ptr;

	mov	ecx, DWORD PTR [esi+176]
	test	ecx, ecx
	je	SHORT $LN10@SrcRefData
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+24]
$LN10@SrcRefData:

; 291  : 			_obj_ptr = 0;
; 292  : 
; 293  : 			delete _count_ptr;

	push	4
	push	DWORD PTR [esi+180]
	mov	DWORD PTR [esi+176], 0
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 294  : 			_count_ptr = 0;

	mov	DWORD PTR [esi+180], 0
$LN8@SrcRefData:
	pop	esi
	ret	0
??1SrcRefData@MVRecalculate@@QAE@XZ ENDP		; MVRecalculate::SrcRefData::~SrcRefData
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@VSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z
_TEXT	SEGMENT
??$forward@VSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z PROC ; std::forward<MVRecalculate::SrcRefData>, COMDAT
; __Arg$ = ecx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, ecx

; 1277 : 	}

	ret	0
??$forward@VSrcRefData@MVRecalculate@@@std@@YA$$QAVSrcRefData@MVRecalculate@@AAV12@@Z ENDP ; std::forward<MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@$$QAV34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@$$QAV34@@Z PROC ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edx, edx
	je	SHORT $LN8@construct
	push	DWORD PTR _<_Args_0>$[esp-4]
	mov	ecx, edx
	call	??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

	ret	0
??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator_traits@V?$allocator@VSrcRefData@MVRecalculate@@@std@@@std@@SAXAAV?$allocator@VSrcRefData@MVRecalculate@@@1@PAVSrcRefData@MVRecalculate@@$$QAV34@@Z ENDP ; std::allocator_traits<std::allocator<MVRecalculate::SrcRefData> >::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z PROC ; std::allocator<MVRecalculate::SrcRefData>::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>, COMDAT
; _this$dead$ = ecx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	push	DWORD PTR _<_Args_0>$[esp-4]
	call	??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z
$LN3@construct:

; 738  : 		}

	ret	8
??$construct@VSrcRefData@MVRecalculate@@V12@@?$allocator@VSrcRefData@MVRecalculate@@@std@@QAEXPAVSrcRefData@MVRecalculate@@$$QAV23@@Z ENDP ; std::allocator<MVRecalculate::SrcRefData>::construct<MVRecalculate::SrcRefData,MVRecalculate::SrcRefData>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\sharedptr.hpp
;	COMDAT ??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z PROC	; MVRecalculate::SrcRefData::SrcRefData, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	movups	xmm0, XMMWORD PTR [edx]
	movups	XMMWORD PTR [ecx], xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	movups	XMMWORD PTR [ecx+32], xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	movups	XMMWORD PTR [ecx+48], xmm0
	movups	xmm0, XMMWORD PTR [edx+64]
	movups	XMMWORD PTR [ecx+64], xmm0
	movq	xmm0, QWORD PTR [edx+80]
	movq	QWORD PTR [ecx+80], xmm0
	movups	xmm0, XMMWORD PTR [edx+88]
	movups	XMMWORD PTR [ecx+88], xmm0
	movups	xmm0, XMMWORD PTR [edx+104]
	movups	XMMWORD PTR [ecx+104], xmm0
	movups	xmm0, XMMWORD PTR [edx+120]
	movups	XMMWORD PTR [ecx+120], xmm0
	movups	xmm0, XMMWORD PTR [edx+136]
	movups	XMMWORD PTR [ecx+136], xmm0
	movups	xmm0, XMMWORD PTR [edx+152]
	movups	XMMWORD PTR [ecx+152], xmm0
	movq	xmm0, QWORD PTR [edx+168]
	movq	QWORD PTR [ecx+168], xmm0

; 55   : :	_obj_ptr (other._obj_ptr)

	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR [ecx+176], eax

; 56   : ,	_count_ptr (other._count_ptr)

	mov	eax, DWORD PTR [edx+180]
	mov	DWORD PTR [ecx+180], eax

; 259  : 	if (_count_ptr != 0)

	test	eax, eax
	je	SHORT $LN8@SrcRefData

; 260  : 	{
; 261  : 		++ *_count_ptr;

	inc	DWORD PTR [eax]
$LN8@SrcRefData:
	mov	eax, ecx
	ret	4
??0SrcRefData@MVRecalculate@@QAE@$$QAV01@@Z ENDP	; MVRecalculate::SrcRefData::SrcRefData
_TEXT	ENDS
END
