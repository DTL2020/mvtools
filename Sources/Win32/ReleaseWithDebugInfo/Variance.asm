; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\variance.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_Luma8x8_sse2:PROC
EXTRN	_Luma16x16_sse2:PROC
EXTRN	_Luma32x16_sse2:PROC
EXTRN	_Luma16x8_sse2:PROC
EXTRN	_Luma4x4_sse2:PROC
EXTRN	_Luma16x2_sse2:PROC
EXTRN	_Luma16x32_sse2:PROC
EXTRN	_Luma32x32_sse2:PROC
EXTRN	_Luma8x4_sse2:PROC
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
PUBLIC	??$?0V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@AAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)><std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<>,0>
PUBLIC	??$?0$$QAV?$tuple@HHHW4arch_t@@@std@@$$Z$$V@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@Upiecewise_construct_t@1@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)><std::tuple<int,int,int,enum arch_t> &&>
PUBLIC	??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
PUBLIC	??$_Buynode_if_nil@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode_if_nil<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &>
PUBLIC	??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
PUBLIC	?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QBEIXZ ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_first
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getal
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::max_size
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator--
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_nohint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$forward@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z ; std::forward<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &>
PUBLIC	??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
PUBLIC	?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Mysize
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::size
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Destroy_if_not_nil
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Freenode0
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator--
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > &>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > >
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_hint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_first
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getcomp
PUBLIC	?_Compare@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBE_NABV?$tuple@HHHW4arch_t@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Compare
PUBLIC	??$_Kfn@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@SAABV?$tuple@HHHW4arch_t@@@1@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ; std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0>::_Kfn<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>
PUBLIC	??$_Lbound@V?$tuple@HHHW4arch_t@@@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABV?$tuple@HHHW4arch_t@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lbound<std::tuple<int,int,int,enum arch_t> >
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
PUBLIC	??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > &,bool,void,0>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool,void,0>
PUBLIC	??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
PUBLIC	?_Kfn@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Kfn
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_first
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@ABV?$tuple@HHHW4arch_t@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::lower_bound
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Key
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getcomp
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
PUBLIC	??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1><>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
PUBLIC	??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
PUBLIC	??$?0ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1><std::less<std::tuple<int,int,int,enum arch_t> > const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
PUBLIC	??$addressof@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z ; std::addressof<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
PUBLIC	??$try_emplace@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::try_emplace<>
PUBLIC	??$Luma16_sse2@$03$01G@@YAIPBEH@Z		; Luma16_sse2<4,2,unsigned short>
PUBLIC	??$Luma16_sse2@$03$03G@@YAIPBEH@Z		; Luma16_sse2<4,4,unsigned short>
PUBLIC	??$Luma16_sse2@$03$07G@@YAIPBEH@Z		; Luma16_sse2<4,8,unsigned short>
PUBLIC	??$Luma16_sse2@$07$00G@@YAIPBEH@Z		; Luma16_sse2<8,1,unsigned short>
PUBLIC	??$Luma16_sse2@$07$01G@@YAIPBEH@Z		; Luma16_sse2<8,2,unsigned short>
PUBLIC	??$Luma16_sse2@$07$03G@@YAIPBEH@Z		; Luma16_sse2<8,4,unsigned short>
PUBLIC	??$Luma16_sse2@$07$07G@@YAIPBEH@Z		; Luma16_sse2<8,8,unsigned short>
PUBLIC	??$Luma16_sse2@$07$0BA@G@@YAIPBEH@Z		; Luma16_sse2<8,16,unsigned short>
PUBLIC	??$Luma16_sse2@$0BA@$00G@@YAIPBEH@Z		; Luma16_sse2<16,1,unsigned short>
PUBLIC	??$Luma16_sse2@$0BA@$01G@@YAIPBEH@Z		; Luma16_sse2<16,2,unsigned short>
PUBLIC	??$Luma16_sse2@$0BA@$03G@@YAIPBEH@Z		; Luma16_sse2<16,4,unsigned short>
PUBLIC	??$Luma16_sse2@$0BA@$07G@@YAIPBEH@Z		; Luma16_sse2<16,8,unsigned short>
PUBLIC	??$Luma16_sse2@$0BA@$0BA@G@@YAIPBEH@Z		; Luma16_sse2<16,16,unsigned short>
PUBLIC	??$Luma16_sse2@$0BA@$0CA@G@@YAIPBEH@Z		; Luma16_sse2<16,32,unsigned short>
PUBLIC	??$Luma16_sse2@$0CA@$07G@@YAIPBEH@Z		; Luma16_sse2<32,8,unsigned short>
PUBLIC	??$Luma16_sse2@$0CA@$0BA@G@@YAIPBEH@Z		; Luma16_sse2<32,16,unsigned short>
PUBLIC	??$Luma16_sse2@$0CA@$0CA@G@@YAIPBEH@Z		; Luma16_sse2<32,32,unsigned short>
PUBLIC	??$Luma_C@$01$00G@@YAIPBEH@Z			; Luma_C<2,1,unsigned short>
PUBLIC	??$Luma_C@$01$01G@@YAIPBEH@Z			; Luma_C<2,2,unsigned short>
PUBLIC	??$Luma_C@$01$03G@@YAIPBEH@Z			; Luma_C<2,4,unsigned short>
PUBLIC	??$Luma_C@$03$00G@@YAIPBEH@Z			; Luma_C<4,1,unsigned short>
PUBLIC	??$Luma_C@$03$01G@@YAIPBEH@Z			; Luma_C<4,2,unsigned short>
PUBLIC	??$Luma_C@$03$03G@@YAIPBEH@Z			; Luma_C<4,4,unsigned short>
PUBLIC	??$Luma_C@$03$07G@@YAIPBEH@Z			; Luma_C<4,8,unsigned short>
PUBLIC	??$Luma_C@$07$00G@@YAIPBEH@Z			; Luma_C<8,1,unsigned short>
PUBLIC	??$Luma_C@$07$01G@@YAIPBEH@Z			; Luma_C<8,2,unsigned short>
PUBLIC	??$Luma_C@$07$03G@@YAIPBEH@Z			; Luma_C<8,4,unsigned short>
PUBLIC	??$Luma_C@$07$07G@@YAIPBEH@Z			; Luma_C<8,8,unsigned short>
PUBLIC	??$Luma_C@$07$0BA@G@@YAIPBEH@Z			; Luma_C<8,16,unsigned short>
PUBLIC	??$Luma_C@$0BA@$00G@@YAIPBEH@Z			; Luma_C<16,1,unsigned short>
PUBLIC	??$Luma_C@$0BA@$01G@@YAIPBEH@Z			; Luma_C<16,2,unsigned short>
PUBLIC	??$Luma_C@$0BA@$03G@@YAIPBEH@Z			; Luma_C<16,4,unsigned short>
PUBLIC	??$Luma_C@$0BA@$07G@@YAIPBEH@Z			; Luma_C<16,8,unsigned short>
PUBLIC	??$Luma_C@$0BA@$0BA@G@@YAIPBEH@Z		; Luma_C<16,16,unsigned short>
PUBLIC	??$Luma_C@$0BA@$0CA@G@@YAIPBEH@Z		; Luma_C<16,32,unsigned short>
PUBLIC	??$Luma_C@$0CA@$07G@@YAIPBEH@Z			; Luma_C<32,8,unsigned short>
PUBLIC	??$Luma_C@$0CA@$0BA@G@@YAIPBEH@Z		; Luma_C<32,16,unsigned short>
PUBLIC	??$Luma_C@$0CA@$0CA@G@@YAIPBEH@Z		; Luma_C<32,32,unsigned short>
PUBLIC	??$Luma_C@$01$00E@@YAIPBEH@Z			; Luma_C<2,1,unsigned char>
PUBLIC	??$Luma_C@$01$01E@@YAIPBEH@Z			; Luma_C<2,2,unsigned char>
PUBLIC	??$Luma_C@$01$03E@@YAIPBEH@Z			; Luma_C<2,4,unsigned char>
PUBLIC	??$Luma_C@$03$00E@@YAIPBEH@Z			; Luma_C<4,1,unsigned char>
PUBLIC	??$Luma_C@$03$01E@@YAIPBEH@Z			; Luma_C<4,2,unsigned char>
PUBLIC	??$Luma_C@$03$03E@@YAIPBEH@Z			; Luma_C<4,4,unsigned char>
PUBLIC	??$Luma_C@$03$07E@@YAIPBEH@Z			; Luma_C<4,8,unsigned char>
PUBLIC	??$Luma_C@$07$00E@@YAIPBEH@Z			; Luma_C<8,1,unsigned char>
PUBLIC	??$Luma_C@$07$01E@@YAIPBEH@Z			; Luma_C<8,2,unsigned char>
PUBLIC	??$Luma_C@$07$03E@@YAIPBEH@Z			; Luma_C<8,4,unsigned char>
PUBLIC	??$Luma_C@$07$07E@@YAIPBEH@Z			; Luma_C<8,8,unsigned char>
PUBLIC	??$Luma_C@$07$0BA@E@@YAIPBEH@Z			; Luma_C<8,16,unsigned char>
PUBLIC	??$Luma_C@$0BA@$00E@@YAIPBEH@Z			; Luma_C<16,1,unsigned char>
PUBLIC	??$Luma_C@$0BA@$01E@@YAIPBEH@Z			; Luma_C<16,2,unsigned char>
PUBLIC	??$Luma_C@$0BA@$03E@@YAIPBEH@Z			; Luma_C<16,4,unsigned char>
PUBLIC	??$Luma_C@$0BA@$07E@@YAIPBEH@Z			; Luma_C<16,8,unsigned char>
PUBLIC	??$Luma_C@$0BA@$0BA@E@@YAIPBEH@Z		; Luma_C<16,16,unsigned char>
PUBLIC	??$Luma_C@$0BA@$0CA@E@@YAIPBEH@Z		; Luma_C<16,32,unsigned char>
PUBLIC	??$Luma_C@$0CA@$07E@@YAIPBEH@Z			; Luma_C<32,8,unsigned char>
PUBLIC	??$Luma_C@$0CA@$0BA@E@@YAIPBEH@Z		; Luma_C<32,16,unsigned char>
PUBLIC	??$Luma_C@$0CA@$0CA@E@@YAIPBEH@Z		; Luma_C<32,32,unsigned char>
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::allocate
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_second
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Get_data
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::allocate
PUBLIC	?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Color
PUBLIC	?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Isnil
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Min
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rmost
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Root
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate
PUBLIC	?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Color
PUBLIC	?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Isnil
PUBLIC	?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myval
PUBLIC	?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Max
PUBLIC	?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Min
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
PUBLIC	?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myhead
PUBLIC	?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAIXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Mysize
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::deallocate
PUBLIC	?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Left
PUBLIC	?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Parent
PUBLIC	?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Right
PUBLIC	?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Myval
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator++
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_second
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Mynode
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::clear
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lmost
PUBLIC	?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Left
PUBLIC	?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Parent
PUBLIC	?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Right
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Construct
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getal
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Get_data
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::deallocate
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator!=
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::end
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase
PUBLIC	??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Freeheadnode
PUBLIC	?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myhead
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator*
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@SAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@AAU32@@Z ; std::pointer_traits<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> *>::pointer_to
PUBLIC	??0?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tidy
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator->
PUBLIC	??0?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >
PUBLIC	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]
PUBLIC	??1?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::~_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
PUBLIC	??1?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::~map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >
PUBLIC	?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z	; get_luma_function
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$120
__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$120 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$71
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$71 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$0
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\github\mvtools\sources\variance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z
_TEXT	SEGMENT
_archlist$ = -84					; size = 20
$T2 = -64						; size = 16
$T3 = -64						; size = 16
$T4 = -64						; size = 16
$T5 = -64						; size = 16
$T6 = -64						; size = 16
$T7 = -64						; size = 16
$T8 = -64						; size = 16
$T9 = -64						; size = 16
$T10 = -64						; size = 16
$T11 = -64						; size = 16
$T12 = -64						; size = 16
$T13 = -64						; size = 16
$T14 = -64						; size = 16
$T15 = -64						; size = 16
$T16 = -64						; size = 16
$T17 = -64						; size = 16
$T18 = -64						; size = 16
$T19 = -64						; size = 16
$T20 = -64						; size = 16
$T21 = -64						; size = 16
$T22 = -64						; size = 16
$T23 = -64						; size = 16
$T24 = -64						; size = 16
$T25 = -64						; size = 16
$T26 = -64						; size = 16
$T27 = -64						; size = 16
$T28 = -64						; size = 16
$T29 = -64						; size = 16
$T30 = -64						; size = 16
$T31 = -64						; size = 16
$T32 = -64						; size = 16
$T33 = -64						; size = 16
$T34 = -64						; size = 16
$T35 = -64						; size = 16
$T36 = -64						; size = 16
$T37 = -64						; size = 16
$T38 = -64						; size = 16
$T39 = -64						; size = 16
$T40 = -64						; size = 16
$T41 = -64						; size = 16
$T42 = -64						; size = 16
$T43 = -64						; size = 16
$T44 = -64						; size = 16
$T45 = -64						; size = 16
$T46 = -64						; size = 16
$T47 = -64						; size = 16
$T48 = -64						; size = 16
$T49 = -64						; size = 16
$T50 = -64						; size = 16
$T51 = -64						; size = 16
$T52 = -64						; size = 16
$T53 = -64						; size = 16
$T54 = -64						; size = 16
$T55 = -64						; size = 16
$T56 = -64						; size = 16
$T57 = -64						; size = 16
$T58 = -64						; size = 16
$T59 = -64						; size = 16
$T60 = -64						; size = 16
$T61 = -64						; size = 16
$T62 = -64						; size = 16
$T63 = -64						; size = 16
$T64 = -64						; size = 16
$T65 = -64						; size = 16
$T66 = -64						; size = 16
$T67 = -64						; size = 16
$T68 = -64						; size = 16
$T69 = -64						; size = 16
$T70 = -64						; size = 16
_func_luma$ = -48					; size = 8
_BlockX$ = -40						; size = 4
_BlockY$ = -36						; size = 4
$T71 = -32						; size = 8
$T72 = -32						; size = 8
$T73 = -32						; size = 8
$T74 = -32						; size = 8
$T75 = -32						; size = 8
$T76 = -32						; size = 8
$T77 = -32						; size = 8
$T78 = -32						; size = 8
$T79 = -32						; size = 8
$T80 = -32						; size = 8
$T81 = -32						; size = 8
$T82 = -32						; size = 8
$T83 = -32						; size = 8
$T84 = -32						; size = 8
$T85 = -32						; size = 8
$T86 = -32						; size = 8
$T87 = -32						; size = 8
$T88 = -32						; size = 8
$T89 = -32						; size = 8
$T90 = -32						; size = 8
$T91 = -32						; size = 8
$T92 = -32						; size = 8
$T93 = -32						; size = 8
$T94 = -32						; size = 8
$T95 = -32						; size = 8
$T96 = -32						; size = 8
$T97 = -32						; size = 8
$T98 = -32						; size = 8
$T99 = -32						; size = 8
$T100 = -32						; size = 8
$T101 = -32						; size = 8
$T102 = -32						; size = 8
$T103 = -32						; size = 8
$T104 = -32						; size = 8
$T105 = -32						; size = 8
$T106 = -32						; size = 8
$T107 = -32						; size = 8
$T108 = -32						; size = 8
$T109 = -32						; size = 8
$T110 = -32						; size = 8
$T111 = -32						; size = 8
$T112 = -32						; size = 8
$T113 = -32						; size = 8
$T114 = -32						; size = 8
$T115 = -32						; size = 8
$T116 = -32						; size = 8
$T117 = -32						; size = 8
$T118 = -32						; size = 8
$T119 = -28						; size = 4
$T120 = -28						; size = 4
$T121 = -28						; size = 4
$T122 = -28						; size = 4
$T123 = -28						; size = 4
$T124 = -28						; size = 4
$T125 = -28						; size = 4
$T126 = -28						; size = 4
$T127 = -28						; size = 4
$T128 = -28						; size = 4
$T129 = -28						; size = 4
$T130 = -28						; size = 4
$T131 = -28						; size = 4
$T132 = -28						; size = 4
$T133 = -28						; size = 4
$T134 = -28						; size = 4
$T135 = -28						; size = 4
$T136 = -28						; size = 4
$T137 = -28						; size = 4
$T138 = -24						; size = 4
$T139 = -24						; size = 4
$T140 = -24						; size = 4
$T141 = -24						; size = 4
$T142 = -24						; size = 4
$T143 = -24						; size = 4
$T144 = -24						; size = 4
$T145 = -24						; size = 4
$T146 = -24						; size = 4
$T147 = -24						; size = 4
$T148 = -24						; size = 4
$T149 = -24						; size = 4
$T150 = -24						; size = 4
$T151 = -24						; size = 4
$T152 = -24						; size = 4
$T153 = -24						; size = 4
$T154 = -24						; size = 4
$T155 = -24						; size = 4
$T156 = -24						; size = 4
$T157 = -20						; size = 4
$T158 = -20						; size = 4
$T159 = -20						; size = 4
$T160 = -20						; size = 4
$T161 = -20						; size = 4
$T162 = -20						; size = 4
$T163 = -20						; size = 4
$T164 = -20						; size = 4
$T165 = -20						; size = 4
$T166 = -20						; size = 4
$T167 = -20						; size = 4
$T168 = -20						; size = 4
$T169 = -20						; size = 4
$T170 = -20						; size = 4
$T171 = -20						; size = 4
$T172 = -20						; size = 4
$T173 = -20						; size = 4
$T174 = -20						; size = 4
$T175 = -20						; size = 4
_current_arch_try$176 = -16				; size = 4
$T177 = -16						; size = 4
$T178 = -16						; size = 4
$T179 = -16						; size = 4
$T180 = -16						; size = 4
$T181 = -16						; size = 4
$T182 = -16						; size = 4
$T183 = -16						; size = 4
$T184 = -16						; size = 4
$T185 = -16						; size = 4
$T186 = -16						; size = 4
$T187 = -16						; size = 4
$T188 = -16						; size = 4
$T189 = -16						; size = 4
$T190 = -16						; size = 4
$T191 = -16						; size = 4
$T192 = -16						; size = 4
$T193 = -16						; size = 4
$T194 = -16						; size = 4
$T195 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pixelsize$ = 8						; size = 4
_arch$ = 12						; size = 4
?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z PROC	; get_luma_function, COMDAT
; _BlockX$ = ecx
; _BlockY$ = edx

; 125  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _BlockY$[ebp], edx
	mov	DWORD PTR _BlockX$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR _func_luma$[ebp], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR _func_luma$[ebp+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
	mov	DWORD PTR _func_luma$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T70[ebp]
; File c:\github\mvtools\sources\variance.cpp

; 129  :     std::map<std::tuple<int, int, int, arch_t>, LUMAFunction*> func_luma;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000200000000100000000
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	lea	eax, DWORD PTR $T118[ebp]
	push	eax
	movups	XMMWORD PTR $T70[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 132  :     func_luma[make_tuple(32, 32, 1, NO_SIMD)] = Luma_C<32, 32,uint8_t>;

	mov	eax, DWORD PTR $T118[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000100000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 132  :     func_luma[make_tuple(32, 32, 1, NO_SIMD)] = Luma_C<32, 32,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0CA@$0CA@E@@YAIPBEH@Z ; Luma_C<32,32,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T69[ebp]
	push	eax
	lea	eax, DWORD PTR $T117[ebp]
	push	eax
	movups	XMMWORD PTR $T69[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 133  :     func_luma[make_tuple(32, 16, 1, NO_SIMD)] = Luma_C<32, 16,uint8_t>;

	mov	eax, DWORD PTR $T117[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000080000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 133  :     func_luma[make_tuple(32, 16, 1, NO_SIMD)] = Luma_C<32, 16,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0CA@$0BA@E@@YAIPBEH@Z ; Luma_C<32,16,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T68[ebp]
	push	eax
	lea	eax, DWORD PTR $T116[ebp]
	push	eax
	movups	XMMWORD PTR $T68[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 134  :     func_luma[make_tuple(32, 8 , 1, NO_SIMD)] = Luma_C<32, 8,uint8_t>;

	mov	eax, DWORD PTR $T116[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000200000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 134  :     func_luma[make_tuple(32, 8 , 1, NO_SIMD)] = Luma_C<32, 8,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0CA@$07E@@YAIPBEH@Z ; Luma_C<32,8,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T67[ebp]
	push	eax
	lea	eax, DWORD PTR $T115[ebp]
	push	eax
	movups	XMMWORD PTR $T67[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 135  :     func_luma[make_tuple(16, 32, 1, NO_SIMD)] = Luma_C<16, 32,uint8_t>;

	mov	eax, DWORD PTR $T115[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000100000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 135  :     func_luma[make_tuple(16, 32, 1, NO_SIMD)] = Luma_C<16, 32,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$0CA@E@@YAIPBEH@Z ; Luma_C<16,32,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T66[ebp]
	push	eax
	lea	eax, DWORD PTR $T114[ebp]
	push	eax
	movups	XMMWORD PTR $T66[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 136  :     func_luma[make_tuple(16, 16, 1, NO_SIMD)] = Luma_C<16, 16,uint8_t>;

	mov	eax, DWORD PTR $T114[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000080000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 136  :     func_luma[make_tuple(16, 16, 1, NO_SIMD)] = Luma_C<16, 16,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$0BA@E@@YAIPBEH@Z ; Luma_C<16,16,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T65[ebp]
	push	eax
	lea	eax, DWORD PTR $T113[ebp]
	push	eax
	movups	XMMWORD PTR $T65[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 137  :     func_luma[make_tuple(16, 8 , 1, NO_SIMD)] = Luma_C<16, 8,uint8_t>;

	mov	eax, DWORD PTR $T113[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000040000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 137  :     func_luma[make_tuple(16, 8 , 1, NO_SIMD)] = Luma_C<16, 8,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$07E@@YAIPBEH@Z ; Luma_C<16,8,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T64[ebp]
	push	eax
	lea	eax, DWORD PTR $T112[ebp]
	push	eax
	movups	XMMWORD PTR $T64[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 138  :     func_luma[make_tuple(16, 4 , 1, NO_SIMD)] = Luma_C<16, 4,uint8_t>;

	mov	eax, DWORD PTR $T112[ebp]
	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$03E@@YAIPBEH@Z ; Luma_C<16,4,unsigned char>
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000020000000100000000
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T63[ebp]
	push	eax
	lea	eax, DWORD PTR $T111[ebp]
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	movups	XMMWORD PTR $T63[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 139  :     func_luma[make_tuple(16, 2 , 1, NO_SIMD)] = Luma_C<16, 2,uint8_t>;

	mov	eax, DWORD PTR $T111[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000010000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 139  :     func_luma[make_tuple(16, 2 , 1, NO_SIMD)] = Luma_C<16, 2,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$01E@@YAIPBEH@Z ; Luma_C<16,2,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T62[ebp]
	push	eax
	lea	eax, DWORD PTR $T110[ebp]
	push	eax
	movups	XMMWORD PTR $T62[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 140  :     func_luma[make_tuple(16, 1 , 1, NO_SIMD)] = Luma_C<16, 1,uint8_t>;

	mov	eax, DWORD PTR $T110[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000100000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 140  :     func_luma[make_tuple(16, 1 , 1, NO_SIMD)] = Luma_C<16, 1,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$00E@@YAIPBEH@Z ; Luma_C<16,1,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T61[ebp]
	push	eax
	lea	eax, DWORD PTR $T109[ebp]
	push	eax
	movups	XMMWORD PTR $T61[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 141  :     func_luma[make_tuple(8 , 16, 1, NO_SIMD)] = Luma_C<8 , 16,uint8_t>;

	mov	eax, DWORD PTR $T109[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000080000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 141  :     func_luma[make_tuple(8 , 16, 1, NO_SIMD)] = Luma_C<8 , 16,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$0BA@E@@YAIPBEH@Z ; Luma_C<8,16,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T60[ebp]
	push	eax
	lea	eax, DWORD PTR $T108[ebp]
	push	eax
	movups	XMMWORD PTR $T60[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 142  :     func_luma[make_tuple(8 , 8 , 1, NO_SIMD)] = Luma_C<8 , 8,uint8_t>;

	mov	eax, DWORD PTR $T108[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000040000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 142  :     func_luma[make_tuple(8 , 8 , 1, NO_SIMD)] = Luma_C<8 , 8,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$07E@@YAIPBEH@Z ; Luma_C<8,8,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T59[ebp]
	push	eax
	lea	eax, DWORD PTR $T107[ebp]
	push	eax
	movups	XMMWORD PTR $T59[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 143  :     func_luma[make_tuple(8 , 4 , 1, NO_SIMD)] = Luma_C<8 , 4,uint8_t>;

	mov	eax, DWORD PTR $T107[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000020000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 143  :     func_luma[make_tuple(8 , 4 , 1, NO_SIMD)] = Luma_C<8 , 4,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$03E@@YAIPBEH@Z ; Luma_C<8,4,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T58[ebp]
	push	eax
	lea	eax, DWORD PTR $T106[ebp]
	push	eax
	movups	XMMWORD PTR $T58[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 144  :     func_luma[make_tuple(8 , 2 , 1, NO_SIMD)] = Luma_C<8 , 2,uint8_t>;

	mov	eax, DWORD PTR $T106[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000010000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 144  :     func_luma[make_tuple(8 , 2 , 1, NO_SIMD)] = Luma_C<8 , 2,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$01E@@YAIPBEH@Z ; Luma_C<8,2,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T57[ebp]
	push	eax
	lea	eax, DWORD PTR $T105[ebp]
	push	eax
	movups	XMMWORD PTR $T57[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 145  :     func_luma[make_tuple(8 , 1 , 1, NO_SIMD)] = Luma_C<8 , 1,uint8_t>;

	mov	eax, DWORD PTR $T105[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000080000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 145  :     func_luma[make_tuple(8 , 1 , 1, NO_SIMD)] = Luma_C<8 , 1,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$00E@@YAIPBEH@Z ; Luma_C<8,1,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T56[ebp]
	push	eax
	lea	eax, DWORD PTR $T104[ebp]
	push	eax
	movups	XMMWORD PTR $T56[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 146  :     func_luma[make_tuple(4 , 8 , 1, NO_SIMD)] = Luma_C<4 , 8,uint8_t>;

	mov	eax, DWORD PTR $T104[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000040000000100000000
	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$07E@@YAIPBEH@Z ; Luma_C<4,8,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T55[ebp]
	push	eax
	lea	eax, DWORD PTR $T103[ebp]
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	movups	XMMWORD PTR $T55[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 147  :     func_luma[make_tuple(4 , 4 , 1, NO_SIMD)] = Luma_C<4 , 4,uint8_t>;

	mov	eax, DWORD PTR $T103[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000020000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 147  :     func_luma[make_tuple(4 , 4 , 1, NO_SIMD)] = Luma_C<4 , 4,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$03E@@YAIPBEH@Z ; Luma_C<4,4,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T54[ebp]
	push	eax
	lea	eax, DWORD PTR $T102[ebp]
	push	eax
	movups	XMMWORD PTR $T54[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 148  :     func_luma[make_tuple(4 , 2 , 1, NO_SIMD)] = Luma_C<4 , 2,uint8_t>;

	mov	eax, DWORD PTR $T102[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000010000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 148  :     func_luma[make_tuple(4 , 2 , 1, NO_SIMD)] = Luma_C<4 , 2,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$01E@@YAIPBEH@Z ; Luma_C<4,2,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T53[ebp]
	push	eax
	lea	eax, DWORD PTR $T101[ebp]
	push	eax
	movups	XMMWORD PTR $T53[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 149  :     func_luma[make_tuple(4 , 1 , 1, NO_SIMD)] = Luma_C<4 , 1,uint8_t>;

	mov	eax, DWORD PTR $T101[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000040000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 149  :     func_luma[make_tuple(4 , 1 , 1, NO_SIMD)] = Luma_C<4 , 1,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$00E@@YAIPBEH@Z ; Luma_C<4,1,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T52[ebp]
	push	eax
	lea	eax, DWORD PTR $T100[ebp]
	push	eax
	movups	XMMWORD PTR $T52[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 150  :     func_luma[make_tuple(2 , 4 , 1, NO_SIMD)] = Luma_C<2 , 4,uint8_t>;

	mov	eax, DWORD PTR $T100[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000020000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 150  :     func_luma[make_tuple(2 , 4 , 1, NO_SIMD)] = Luma_C<2 , 4,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$01$03E@@YAIPBEH@Z ; Luma_C<2,4,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T51[ebp]
	push	eax
	lea	eax, DWORD PTR $T99[ebp]
	push	eax
	movups	XMMWORD PTR $T51[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 151  :     func_luma[make_tuple(2 , 2 , 1, NO_SIMD)] = Luma_C<2 , 2,uint8_t>;

	mov	eax, DWORD PTR $T99[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000010000000100000000
; File c:\github\mvtools\sources\variance.cpp

; 151  :     func_luma[make_tuple(2 , 2 , 1, NO_SIMD)] = Luma_C<2 , 2,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$01$01E@@YAIPBEH@Z ; Luma_C<2,2,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T50[ebp]
	push	eax
	lea	eax, DWORD PTR $T98[ebp]
	push	eax
	movups	XMMWORD PTR $T50[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 152  :     func_luma[make_tuple(2 , 1 , 1, NO_SIMD)] = Luma_C<2 , 1,uint8_t>;

	mov	eax, DWORD PTR $T98[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000200000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 152  :     func_luma[make_tuple(2 , 1 , 1, NO_SIMD)] = Luma_C<2 , 1,uint8_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$01$00E@@YAIPBEH@Z ; Luma_C<2,1,unsigned char>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T49[ebp]
	push	eax
	lea	eax, DWORD PTR $T97[ebp]
	push	eax
	movups	XMMWORD PTR $T49[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 154  :     func_luma[make_tuple(32, 32, 2, NO_SIMD)] = Luma_C<32, 32,uint16_t>;

	mov	eax, DWORD PTR $T97[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000100000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 154  :     func_luma[make_tuple(32, 32, 2, NO_SIMD)] = Luma_C<32, 32,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0CA@$0CA@G@@YAIPBEH@Z ; Luma_C<32,32,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T48[ebp]
	push	eax
	lea	eax, DWORD PTR $T96[ebp]
	push	eax
	movups	XMMWORD PTR $T48[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 155  :     func_luma[make_tuple(32, 16, 2, NO_SIMD)] = Luma_C<32, 16,uint16_t>;

	mov	eax, DWORD PTR $T96[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000080000000200000000
	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0CA@$0BA@G@@YAIPBEH@Z ; Luma_C<32,16,unsigned short>
	movups	XMMWORD PTR $T47[ebp], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T47[ebp]
	push	eax
	lea	eax, DWORD PTR $T95[ebp]
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 156  :     func_luma[make_tuple(32, 8 , 2, NO_SIMD)] = Luma_C<32, 8,uint16_t>;

	mov	eax, DWORD PTR $T95[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000200000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 156  :     func_luma[make_tuple(32, 8 , 2, NO_SIMD)] = Luma_C<32, 8,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0CA@$07G@@YAIPBEH@Z ; Luma_C<32,8,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T46[ebp]
	push	eax
	lea	eax, DWORD PTR $T94[ebp]
	push	eax
	movups	XMMWORD PTR $T46[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 157  :     func_luma[make_tuple(16, 32, 2, NO_SIMD)] = Luma_C<16, 32,uint16_t>;

	mov	eax, DWORD PTR $T94[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000100000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 157  :     func_luma[make_tuple(16, 32, 2, NO_SIMD)] = Luma_C<16, 32,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$0CA@G@@YAIPBEH@Z ; Luma_C<16,32,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T45[ebp]
	push	eax
	lea	eax, DWORD PTR $T93[ebp]
	push	eax
	movups	XMMWORD PTR $T45[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 158  :     func_luma[make_tuple(16, 16, 2, NO_SIMD)] = Luma_C<16, 16,uint16_t>;

	mov	eax, DWORD PTR $T93[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000080000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 158  :     func_luma[make_tuple(16, 16, 2, NO_SIMD)] = Luma_C<16, 16,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$0BA@G@@YAIPBEH@Z ; Luma_C<16,16,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T44[ebp]
	push	eax
	lea	eax, DWORD PTR $T92[ebp]
	push	eax
	movups	XMMWORD PTR $T44[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 159  :     func_luma[make_tuple(16, 8 , 2, NO_SIMD)] = Luma_C<16, 8,uint16_t>;

	mov	eax, DWORD PTR $T92[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000040000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 159  :     func_luma[make_tuple(16, 8 , 2, NO_SIMD)] = Luma_C<16, 8,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$07G@@YAIPBEH@Z ; Luma_C<16,8,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T43[ebp]
	push	eax
	lea	eax, DWORD PTR $T91[ebp]
	push	eax
	movups	XMMWORD PTR $T43[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 160  :     func_luma[make_tuple(16, 4 , 2, NO_SIMD)] = Luma_C<16, 4,uint16_t>;

	mov	eax, DWORD PTR $T91[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000020000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 160  :     func_luma[make_tuple(16, 4 , 2, NO_SIMD)] = Luma_C<16, 4,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$03G@@YAIPBEH@Z ; Luma_C<16,4,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T42[ebp]
	push	eax
	lea	eax, DWORD PTR $T90[ebp]
	push	eax
	movups	XMMWORD PTR $T42[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 161  :     func_luma[make_tuple(16, 2 , 2, NO_SIMD)] = Luma_C<16, 2,uint16_t>;

	mov	eax, DWORD PTR $T90[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000010000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 161  :     func_luma[make_tuple(16, 2 , 2, NO_SIMD)] = Luma_C<16, 2,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$01G@@YAIPBEH@Z ; Luma_C<16,2,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T41[ebp]
	push	eax
	lea	eax, DWORD PTR $T89[ebp]
	push	eax
	movups	XMMWORD PTR $T41[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 162  :     func_luma[make_tuple(16, 1 , 2, NO_SIMD)] = Luma_C<16, 1,uint16_t>;

	mov	eax, DWORD PTR $T89[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000100000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 162  :     func_luma[make_tuple(16, 1 , 2, NO_SIMD)] = Luma_C<16, 1,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$0BA@$00G@@YAIPBEH@Z ; Luma_C<16,1,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T40[ebp]
	push	eax
	lea	eax, DWORD PTR $T88[ebp]
	push	eax
	movups	XMMWORD PTR $T40[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 163  :     func_luma[make_tuple(8 , 16, 2, NO_SIMD)] = Luma_C<8 , 16,uint16_t>;

	mov	eax, DWORD PTR $T88[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000080000000200000000
	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$0BA@G@@YAIPBEH@Z ; Luma_C<8,16,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T39[ebp]
	movups	XMMWORD PTR $T39[ebp], xmm0
	push	eax
	lea	eax, DWORD PTR $T87[ebp]
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 164  :     func_luma[make_tuple(8 , 8 , 2, NO_SIMD)] = Luma_C<8 , 8,uint16_t>;

	mov	eax, DWORD PTR $T87[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000040000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 164  :     func_luma[make_tuple(8 , 8 , 2, NO_SIMD)] = Luma_C<8 , 8,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$07G@@YAIPBEH@Z ; Luma_C<8,8,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T38[ebp]
	push	eax
	lea	eax, DWORD PTR $T86[ebp]
	push	eax
	movups	XMMWORD PTR $T38[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 165  :     func_luma[make_tuple(8 , 4 , 2, NO_SIMD)] = Luma_C<8 , 4,uint16_t>;

	mov	eax, DWORD PTR $T86[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000020000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 165  :     func_luma[make_tuple(8 , 4 , 2, NO_SIMD)] = Luma_C<8 , 4,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$03G@@YAIPBEH@Z ; Luma_C<8,4,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T37[ebp]
	push	eax
	lea	eax, DWORD PTR $T85[ebp]
	push	eax
	movups	XMMWORD PTR $T37[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 166  :     func_luma[make_tuple(8 , 2 , 2, NO_SIMD)] = Luma_C<8 , 2,uint16_t>;

	mov	eax, DWORD PTR $T85[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000010000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 166  :     func_luma[make_tuple(8 , 2 , 2, NO_SIMD)] = Luma_C<8 , 2,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$01G@@YAIPBEH@Z ; Luma_C<8,2,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T36[ebp]
	push	eax
	lea	eax, DWORD PTR $T84[ebp]
	push	eax
	movups	XMMWORD PTR $T36[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 167  :     func_luma[make_tuple(8 , 1 , 2, NO_SIMD)] = Luma_C<8 , 1,uint16_t>;

	mov	eax, DWORD PTR $T84[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000080000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 167  :     func_luma[make_tuple(8 , 1 , 2, NO_SIMD)] = Luma_C<8 , 1,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$07$00G@@YAIPBEH@Z ; Luma_C<8,1,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T35[ebp]
	push	eax
	lea	eax, DWORD PTR $T83[ebp]
	push	eax
	movups	XMMWORD PTR $T35[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 168  :     func_luma[make_tuple(4 , 8 , 2, NO_SIMD)] = Luma_C<4 , 8,uint16_t>;

	mov	eax, DWORD PTR $T83[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000040000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 168  :     func_luma[make_tuple(4 , 8 , 2, NO_SIMD)] = Luma_C<4 , 8,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$07G@@YAIPBEH@Z ; Luma_C<4,8,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T34[ebp]
	push	eax
	lea	eax, DWORD PTR $T82[ebp]
	push	eax
	movups	XMMWORD PTR $T34[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 169  :     func_luma[make_tuple(4 , 4 , 2, NO_SIMD)] = Luma_C<4 , 4,uint16_t>;

	mov	eax, DWORD PTR $T82[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000020000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 169  :     func_luma[make_tuple(4 , 4 , 2, NO_SIMD)] = Luma_C<4 , 4,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$03G@@YAIPBEH@Z ; Luma_C<4,4,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T33[ebp]
	push	eax
	lea	eax, DWORD PTR $T81[ebp]
	push	eax
	movups	XMMWORD PTR $T33[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 170  :     func_luma[make_tuple(4 , 2 , 2, NO_SIMD)] = Luma_C<4 , 2,uint16_t>;

	mov	eax, DWORD PTR $T81[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000004000000010000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 170  :     func_luma[make_tuple(4 , 2 , 2, NO_SIMD)] = Luma_C<4 , 2,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$01G@@YAIPBEH@Z ; Luma_C<4,2,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T32[ebp]
	push	eax
	lea	eax, DWORD PTR $T80[ebp]
	push	eax
	movups	XMMWORD PTR $T32[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 171  :     func_luma[make_tuple(4 , 1 , 2, NO_SIMD)] = Luma_C<4 , 1,uint16_t>;

	mov	eax, DWORD PTR $T80[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000040000000200000000
	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$03$00G@@YAIPBEH@Z ; Luma_C<4,1,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T31[ebp]
	movups	XMMWORD PTR $T31[ebp], xmm0
	push	eax
	lea	eax, DWORD PTR $T79[ebp]
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 172  :     func_luma[make_tuple(2 , 4 , 2, NO_SIMD)] = Luma_C<2 , 4,uint16_t>;

	mov	eax, DWORD PTR $T79[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000020000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 172  :     func_luma[make_tuple(2 , 4 , 2, NO_SIMD)] = Luma_C<2 , 4,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$01$03G@@YAIPBEH@Z ; Luma_C<2,4,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T30[ebp]
	push	eax
	lea	eax, DWORD PTR $T78[ebp]
	push	eax
	movups	XMMWORD PTR $T30[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 173  :     func_luma[make_tuple(2 , 2 , 2, NO_SIMD)] = Luma_C<2 , 2,uint16_t>;

	mov	eax, DWORD PTR $T78[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000010000000200000000
; File c:\github\mvtools\sources\variance.cpp

; 173  :     func_luma[make_tuple(2 , 2 , 2, NO_SIMD)] = Luma_C<2 , 2,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$01$01G@@YAIPBEH@Z ; Luma_C<2,2,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T29[ebp]
	push	eax
	lea	eax, DWORD PTR $T77[ebp]
	push	eax
	movups	XMMWORD PTR $T29[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 174  :     func_luma[make_tuple(2 , 1 , 2, NO_SIMD)] = Luma_C<2 , 1,uint16_t>;

	mov	eax, DWORD PTR $T77[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000200000000100000002
; File c:\github\mvtools\sources\variance.cpp

; 174  :     func_luma[make_tuple(2 , 1 , 2, NO_SIMD)] = Luma_C<2 , 1,uint16_t>;

	mov	DWORD PTR [eax+32], OFFSET ??$Luma_C@$01$00G@@YAIPBEH@Z ; Luma_C<2,1,unsigned short>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T28[ebp]
	push	eax
	lea	eax, DWORD PTR $T76[ebp]
	push	eax
	movups	XMMWORD PTR $T28[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 176  :     func_luma[make_tuple(32, 32, 1, USE_SSE2)] = Luma32x32_sse2;

	mov	eax, DWORD PTR $T76[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000020000000100000000100000002
; File c:\github\mvtools\sources\variance.cpp

; 176  :     func_luma[make_tuple(32, 32, 1, USE_SSE2)] = Luma32x32_sse2;

	mov	DWORD PTR [eax+32], OFFSET _Luma32x32_sse2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T27[ebp]
	push	eax
	lea	eax, DWORD PTR $T75[ebp]
	push	eax
	movups	XMMWORD PTR $T27[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 177  :     func_luma[make_tuple(32, 16, 1, USE_SSE2)] = Luma32x16_sse2;

	mov	eax, DWORD PTR $T75[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000200000000100000002
; File c:\github\mvtools\sources\variance.cpp

; 177  :     func_luma[make_tuple(32, 16, 1, USE_SSE2)] = Luma32x16_sse2;

	mov	DWORD PTR [eax+32], OFFSET _Luma32x16_sse2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T26[ebp]
	push	eax
	lea	eax, DWORD PTR $T74[ebp]
	push	eax
	movups	XMMWORD PTR $T26[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 179  :     func_luma[make_tuple(16, 32, 1, USE_SSE2)] = Luma16x32_sse2;

	mov	eax, DWORD PTR $T74[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000100000000100000002
; File c:\github\mvtools\sources\variance.cpp

; 179  :     func_luma[make_tuple(16, 32, 1, USE_SSE2)] = Luma16x32_sse2;

	mov	DWORD PTR [eax+32], OFFSET _Luma16x32_sse2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T25[ebp]
	push	eax
	lea	eax, DWORD PTR $T73[ebp]
	push	eax
	movups	XMMWORD PTR $T25[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 180  :     func_luma[make_tuple(16, 16, 1, USE_SSE2)] = Luma16x16_sse2;

	mov	eax, DWORD PTR $T73[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000080000000100000002
; File c:\github\mvtools\sources\variance.cpp

; 180  :     func_luma[make_tuple(16, 16, 1, USE_SSE2)] = Luma16x16_sse2;

	mov	DWORD PTR [eax+32], OFFSET _Luma16x16_sse2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T24[ebp]
	push	eax
	lea	eax, DWORD PTR $T72[ebp]
	push	eax
	movups	XMMWORD PTR $T24[ebp], xmm0
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 181  :     func_luma[make_tuple(16, 8 , 1, USE_SSE2)] = Luma16x8_sse2;

	mov	eax, DWORD PTR $T72[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000010000000020000000100000002
	mov	DWORD PTR [eax+32], OFFSET _Luma16x8_sse2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	lea	eax, DWORD PTR $T23[ebp]
	push	eax
	movups	XMMWORD PTR $T23[ebp], xmm0
	lea	eax, DWORD PTR $T71[ebp]
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
; File c:\github\mvtools\sources\variance.cpp

; 183  :     func_luma[make_tuple(16, 2 , 1, USE_SSE2)] = Luma16x2_sse2;

	mov	eax, DWORD PTR $T71[ebp]

; 184  :     //func_luma[make_tuple(8 , 16, 1, USE_SSE2)] = Luma8x16_sse2;
; 185  :     func_luma[make_tuple(8 , 8 , 1, USE_SSE2)] = Luma8x8_sse2;

	lea	ecx, DWORD PTR _func_luma$[ebp]
	movaps	xmm0, XMMWORD PTR __xmm@00000008000000080000000100000002
	mov	DWORD PTR [eax+32], OFFSET _Luma16x2_sse2
	lea	eax, DWORD PTR $T22[ebp]
	push	eax
	movups	XMMWORD PTR $T22[ebp], xmm0
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 186  :     func_luma[make_tuple(8 , 4 , 1, USE_SSE2)] = Luma8x4_sse2;

	lea	edx, DWORD PTR $T137[ebp]
	mov	DWORD PTR $T195[ebp], 2
	lea	ecx, DWORD PTR $T21[ebp]
	mov	DWORD PTR $T175[ebp], 1
	mov	DWORD PTR $T156[ebp], 4
	mov	DWORD PTR [eax], OFFSET _Luma8x8_sse2
	lea	eax, DWORD PTR $T195[ebp]
	push	eax
	lea	eax, DWORD PTR $T175[ebp]
	mov	DWORD PTR $T137[ebp], 8
	push	eax
	lea	eax, DWORD PTR $T156[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 187  :     //func_luma[make_tuple(8 , 2 , 1, USE_SSE2)] = Luma8x2_sse2;
; 188  :     //func_luma[make_tuple(8 , 1 , 1, USE_SSE2)] = Luma8x1_sse2;
; 189  :     //func_luma[make_tuple(4 , 8 , 1, USE_SSE2)] = Luma4x8_sse2;
; 190  :     func_luma[make_tuple(4 , 4 , 1, USE_SSE2)] = Luma4x4_sse2;

	lea	edx, DWORD PTR $T194[ebp]
	mov	DWORD PTR $T136[ebp], 2
	lea	ecx, DWORD PTR $T20[ebp]
	mov	DWORD PTR $T155[ebp], 1
	mov	DWORD PTR $T174[ebp], 4
	mov	DWORD PTR [eax], OFFSET _Luma8x4_sse2
	lea	eax, DWORD PTR $T136[ebp]
	push	eax
	lea	eax, DWORD PTR $T155[ebp]
	mov	DWORD PTR $T194[ebp], 4
	push	eax
	lea	eax, DWORD PTR $T174[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 191  :     //func_luma[make_tuple(4 , 2 , 1, USE_SSE2)] = Luma4x2_sse2;
; 192  :     //func_luma[make_tuple(2 , 4 , 1, USE_SSE2)] = Luma2x4_sse2;
; 193  :     //func_luma[make_tuple(2 , 2 , 1, USE_SSE2)] = Luma2x2_sse2;
; 194  :     
; 195  :     func_luma[make_tuple(32, 32, 2, USE_SSE2)] = Luma16_sse2<32, 32,uint16_t>;

	lea	edx, DWORD PTR $T193[ebp]
	mov	DWORD PTR $T135[ebp], 2
	lea	ecx, DWORD PTR $T19[ebp]
	mov	DWORD PTR $T154[ebp], 2
	mov	DWORD PTR $T173[ebp], 32		; 00000020H
	mov	DWORD PTR [eax], OFFSET _Luma4x4_sse2
	lea	eax, DWORD PTR $T135[ebp]
	push	eax
	lea	eax, DWORD PTR $T154[ebp]
	mov	DWORD PTR $T193[ebp], 32		; 00000020H
	push	eax
	lea	eax, DWORD PTR $T173[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 196  :     func_luma[make_tuple(32, 16, 2, USE_SSE2)] = Luma16_sse2<32, 16,uint16_t>;

	lea	edx, DWORD PTR $T192[ebp]
	mov	DWORD PTR $T134[ebp], 2
	lea	ecx, DWORD PTR $T18[ebp]
	mov	DWORD PTR $T153[ebp], 2
	mov	DWORD PTR $T172[ebp], 16		; 00000010H
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0CA@$0CA@G@@YAIPBEH@Z ; Luma16_sse2<32,32,unsigned short>
	lea	eax, DWORD PTR $T134[ebp]
	push	eax
	lea	eax, DWORD PTR $T153[ebp]
	mov	DWORD PTR $T192[ebp], 32		; 00000020H
	push	eax
	lea	eax, DWORD PTR $T172[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 197  :     func_luma[make_tuple(32, 8 , 2, USE_SSE2)] = Luma16_sse2<32, 8,uint16_t>;

	lea	edx, DWORD PTR $T191[ebp]
	mov	DWORD PTR $T133[ebp], 2
	lea	ecx, DWORD PTR $T17[ebp]
	mov	DWORD PTR $T152[ebp], 2
	mov	DWORD PTR $T171[ebp], 8
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0CA@$0BA@G@@YAIPBEH@Z ; Luma16_sse2<32,16,unsigned short>
	lea	eax, DWORD PTR $T133[ebp]
	push	eax
	lea	eax, DWORD PTR $T152[ebp]
	mov	DWORD PTR $T191[ebp], 32		; 00000020H
	push	eax
	lea	eax, DWORD PTR $T171[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 198  :     func_luma[make_tuple(16, 32, 2, USE_SSE2)] = Luma16_sse2<16, 32,uint16_t>;

	lea	edx, DWORD PTR $T190[ebp]
	mov	DWORD PTR $T132[ebp], 2
	lea	ecx, DWORD PTR $T16[ebp]
	mov	DWORD PTR $T151[ebp], 2
	mov	DWORD PTR $T170[ebp], 32		; 00000020H
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0CA@$07G@@YAIPBEH@Z ; Luma16_sse2<32,8,unsigned short>
	lea	eax, DWORD PTR $T132[ebp]
	push	eax
	lea	eax, DWORD PTR $T151[ebp]
	mov	DWORD PTR $T190[ebp], 16		; 00000010H
	push	eax
	lea	eax, DWORD PTR $T170[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 199  :     func_luma[make_tuple(16, 16, 2, USE_SSE2)] = Luma16_sse2<16, 16,uint16_t>;

	lea	edx, DWORD PTR $T189[ebp]
	mov	DWORD PTR $T131[ebp], 2
	lea	ecx, DWORD PTR $T15[ebp]
	mov	DWORD PTR $T150[ebp], 2
	mov	DWORD PTR $T169[ebp], 16		; 00000010H
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0BA@$0CA@G@@YAIPBEH@Z ; Luma16_sse2<16,32,unsigned short>
	lea	eax, DWORD PTR $T131[ebp]
	push	eax
	lea	eax, DWORD PTR $T150[ebp]
	mov	DWORD PTR $T189[ebp], 16		; 00000010H
	push	eax
	lea	eax, DWORD PTR $T169[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 200  :     func_luma[make_tuple(16, 8 , 2, USE_SSE2)] = Luma16_sse2<16, 8,uint16_t>;

	lea	edx, DWORD PTR $T188[ebp]
	mov	DWORD PTR $T130[ebp], 2
	lea	ecx, DWORD PTR $T14[ebp]
	mov	DWORD PTR $T149[ebp], 2
	mov	DWORD PTR $T168[ebp], 8
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0BA@$0BA@G@@YAIPBEH@Z ; Luma16_sse2<16,16,unsigned short>
	lea	eax, DWORD PTR $T130[ebp]
	push	eax
	lea	eax, DWORD PTR $T149[ebp]
	mov	DWORD PTR $T188[ebp], 16		; 00000010H
	push	eax
	lea	eax, DWORD PTR $T168[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 201  :     func_luma[make_tuple(16, 4 , 2, USE_SSE2)] = Luma16_sse2<16, 4,uint16_t>;

	mov	DWORD PTR $T129[ebp], 2
	mov	DWORD PTR $T148[ebp], 2
	mov	DWORD PTR $T167[ebp], 4
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0BA@$07G@@YAIPBEH@Z ; Luma16_sse2<16,8,unsigned short>
	lea	eax, DWORD PTR $T129[ebp]
	mov	DWORD PTR $T187[ebp], 16		; 00000010H
	push	eax
	lea	eax, DWORD PTR $T148[ebp]
	push	eax
	lea	eax, DWORD PTR $T167[ebp]
	push	eax
	lea	edx, DWORD PTR $T187[ebp]
	lea	ecx, DWORD PTR $T13[ebp]
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 202  :     func_luma[make_tuple(16, 2 , 2, USE_SSE2)] = Luma16_sse2<16, 2,uint16_t>;

	lea	edx, DWORD PTR $T186[ebp]
	mov	DWORD PTR $T128[ebp], 2
	lea	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T147[ebp], 2
	mov	DWORD PTR $T166[ebp], 2
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0BA@$03G@@YAIPBEH@Z ; Luma16_sse2<16,4,unsigned short>
	lea	eax, DWORD PTR $T128[ebp]
	push	eax
	lea	eax, DWORD PTR $T147[ebp]
	mov	DWORD PTR $T186[ebp], 16		; 00000010H
	push	eax
	lea	eax, DWORD PTR $T166[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 203  :     func_luma[make_tuple(16, 1 , 2, USE_SSE2)] = Luma16_sse2<16, 1,uint16_t>;

	lea	edx, DWORD PTR $T185[ebp]
	mov	DWORD PTR $T127[ebp], 2
	lea	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR $T146[ebp], 2
	mov	DWORD PTR $T165[ebp], 1
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0BA@$01G@@YAIPBEH@Z ; Luma16_sse2<16,2,unsigned short>
	lea	eax, DWORD PTR $T127[ebp]
	push	eax
	lea	eax, DWORD PTR $T146[ebp]
	mov	DWORD PTR $T185[ebp], 16		; 00000010H
	push	eax
	lea	eax, DWORD PTR $T165[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 204  :     func_luma[make_tuple(8 , 16, 2, USE_SSE2)] = Luma16_sse2<8 , 16,uint16_t>;

	lea	edx, DWORD PTR $T184[ebp]
	mov	DWORD PTR $T126[ebp], 2
	lea	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR $T145[ebp], 2
	mov	DWORD PTR $T164[ebp], 16		; 00000010H
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$0BA@$00G@@YAIPBEH@Z ; Luma16_sse2<16,1,unsigned short>
	lea	eax, DWORD PTR $T126[ebp]
	push	eax
	lea	eax, DWORD PTR $T145[ebp]
	mov	DWORD PTR $T184[ebp], 8
	push	eax
	lea	eax, DWORD PTR $T164[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 205  :     func_luma[make_tuple(8 , 8 , 2, USE_SSE2)] = Luma16_sse2<8 , 8,uint16_t>;

	lea	edx, DWORD PTR $T183[ebp]
	mov	DWORD PTR $T125[ebp], 2
	lea	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR $T144[ebp], 2
	mov	DWORD PTR $T163[ebp], 8
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$07$0BA@G@@YAIPBEH@Z ; Luma16_sse2<8,16,unsigned short>
	lea	eax, DWORD PTR $T125[ebp]
	push	eax
	lea	eax, DWORD PTR $T144[ebp]
	mov	DWORD PTR $T183[ebp], 8
	push	eax
	lea	eax, DWORD PTR $T163[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 206  :     func_luma[make_tuple(8 , 4 , 2, USE_SSE2)] = Luma16_sse2<8 , 4,uint16_t>;

	lea	edx, DWORD PTR $T182[ebp]
	mov	DWORD PTR $T124[ebp], 2
	lea	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T143[ebp], 2
	mov	DWORD PTR $T162[ebp], 4
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$07$07G@@YAIPBEH@Z ; Luma16_sse2<8,8,unsigned short>
	lea	eax, DWORD PTR $T124[ebp]
	push	eax
	lea	eax, DWORD PTR $T143[ebp]
	mov	DWORD PTR $T182[ebp], 8
	push	eax
	lea	eax, DWORD PTR $T162[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 207  :     func_luma[make_tuple(8 , 2 , 2, USE_SSE2)] = Luma16_sse2<8 , 2,uint16_t>;

	lea	edx, DWORD PTR $T181[ebp]
	mov	DWORD PTR $T123[ebp], 2
	lea	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T142[ebp], 2
	mov	DWORD PTR $T161[ebp], 2
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$07$03G@@YAIPBEH@Z ; Luma16_sse2<8,4,unsigned short>
	lea	eax, DWORD PTR $T123[ebp]
	push	eax
	lea	eax, DWORD PTR $T142[ebp]
	mov	DWORD PTR $T181[ebp], 8
	push	eax
	lea	eax, DWORD PTR $T161[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 208  :     func_luma[make_tuple(8 , 1 , 2, USE_SSE2)] = Luma16_sse2<8 , 1,uint16_t>;

	lea	edx, DWORD PTR $T180[ebp]
	mov	DWORD PTR $T122[ebp], 2
	lea	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T141[ebp], 2
	mov	DWORD PTR $T160[ebp], 1
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$07$01G@@YAIPBEH@Z ; Luma16_sse2<8,2,unsigned short>
	lea	eax, DWORD PTR $T122[ebp]
	push	eax
	lea	eax, DWORD PTR $T141[ebp]
	mov	DWORD PTR $T180[ebp], 8
	push	eax
	lea	eax, DWORD PTR $T160[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 209  :     func_luma[make_tuple(4 , 8 , 2, USE_SSE2)] = Luma16_sse2<4 , 8,uint16_t>;

	lea	edx, DWORD PTR $T179[ebp]
	mov	DWORD PTR $T121[ebp], 2
	lea	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T140[ebp], 2
	mov	DWORD PTR $T159[ebp], 8
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$07$00G@@YAIPBEH@Z ; Luma16_sse2<8,1,unsigned short>
	lea	eax, DWORD PTR $T121[ebp]
	push	eax
	lea	eax, DWORD PTR $T140[ebp]
	mov	DWORD PTR $T179[ebp], 4
	push	eax
	lea	eax, DWORD PTR $T159[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 210  :     func_luma[make_tuple(4 , 4 , 2, USE_SSE2)] = Luma16_sse2<4 , 4,uint16_t>;

	mov	DWORD PTR $T120[ebp], 2
	mov	DWORD PTR $T139[ebp], 2
	mov	DWORD PTR $T158[ebp], 4
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$03$07G@@YAIPBEH@Z ; Luma16_sse2<4,8,unsigned short>
	lea	eax, DWORD PTR $T120[ebp]
	mov	DWORD PTR $T178[ebp], 4
	push	eax
	lea	eax, DWORD PTR $T139[ebp]
	push	eax
	lea	eax, DWORD PTR $T158[ebp]
	push	eax
	lea	edx, DWORD PTR $T178[ebp]
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]

; 211  :     func_luma[make_tuple(4 , 2 , 2, USE_SSE2)] = Luma16_sse2<4 , 2,uint16_t>;

	lea	edx, DWORD PTR $T177[ebp]
	mov	DWORD PTR $T119[ebp], 2
	lea	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T138[ebp], 2
	mov	DWORD PTR $T157[ebp], 2
	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$03$03G@@YAIPBEH@Z ; Luma16_sse2<4,4,unsigned short>
	lea	eax, DWORD PTR $T119[ebp]
	push	eax
	lea	eax, DWORD PTR $T138[ebp]
	mov	DWORD PTR $T177[ebp], 4
	push	eax
	lea	eax, DWORD PTR $T157[ebp]
	push	eax
	call	??$make_tuple@HHHW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@$$QAH00$$QAW4arch_t@@@Z ; std::make_tuple<int,int,int,enum arch_t>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]
	movaps	xmm0, XMMWORD PTR __xmm@00000002000000030000000500000006
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	lea	esi, DWORD PTR _archlist$[ebp]
	mov	ebx, DWORD PTR _arch$[ebp]
	movups	XMMWORD PTR _archlist$[ebp], xmm0
; File c:\github\mvtools\sources\variance.cpp

; 211  :     func_luma[make_tuple(4 , 2 , 2, USE_SSE2)] = Luma16_sse2<4 , 2,uint16_t>;

	mov	DWORD PTR [eax], OFFSET ??$Luma16_sse2@$03$01G@@YAIPBEH@Z ; Luma16_sse2<4,2,unsigned short>

; 212  :     // no 4,1 or 2,x,x for uint16_t
; 213  :     
; 214  :     LUMAFunction *result = nullptr;
; 215  :     arch_t archlist[] = { USE_AVX2, USE_AVX, USE_SSE41, USE_SSE2, NO_SIMD };

	mov	DWORD PTR _archlist$[ebp+16], 0
$LL2@get_luma_f:

; 216  :     int index = 0;
; 217  :     while (result == nullptr) {
; 218  :       arch_t current_arch_try = archlist[index++];

	mov	eax, DWORD PTR [esi]
	lea	esi, DWORD PTR [esi+4]
	mov	DWORD PTR _current_arch_try$176[ebp], eax

; 219  :       if (current_arch_try > arch) continue;

	cmp	eax, ebx
	jg	SHORT $LL2@get_luma_f

; 220  :       result = func_luma[make_tuple(BlockX, BlockY, pixelsize, current_arch_try)];

	lea	eax, DWORD PTR _current_arch_try$176[ebp]
	push	eax
	lea	eax, DWORD PTR _pixelsize$[ebp]
	push	eax
	lea	eax, DWORD PTR _BlockY$[ebp]
	push	eax
	lea	edx, DWORD PTR _BlockX$[ebp]
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$make_tuple@AAHAAHAAHAAW4arch_t@@@std@@YA?AV?$tuple@HHHW4arch_t@@@0@AAH00AAW4arch_t@@@Z ; std::make_tuple<int &,int &,int &,enum arch_t &>
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _func_luma$[ebp]
	push	eax
	call	??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]
	mov	edi, DWORD PTR [eax]

; 221  :       if (result == nullptr && current_arch_try == NO_SIMD)

	test	edi, edi
	jne	SHORT $LN4823@get_luma_f
	cmp	DWORD PTR _current_arch_try$176[ebp], edi
	jne	SHORT $LL2@get_luma_f
$LN4823@get_luma_f:

; 222  :         break;
; 223  :     }
; 224  : 
; 225  : #if 0
; 226  :     LUMAFunction *result = func_luma[make_tuple(BlockX, BlockY, pixelsize, arch)];
; 227  : 
; 228  :     arch_t arch_orig = arch;
; 229  : 
; 230  :     // no AVX2 -> try AVX
; 231  :     if (result == nullptr && (arch==USE_AVX2 || arch_orig==USE_AVX)) {
; 232  :       arch = USE_AVX;
; 233  :       result = func_luma[make_tuple(BlockX, BlockY, pixelsize, USE_AVX)];
; 234  :     }
; 235  :     // no AVX -> try SSE2
; 236  :     if (result == nullptr && (arch==USE_AVX || arch_orig==USE_SSE2)) {
; 237  :       arch = USE_SSE2;
; 238  :       result = func_luma[make_tuple(BlockX, BlockY, pixelsize, USE_SSE2)];
; 239  :     }
; 240  :     // no SSE2 -> try C
; 241  :     if (result == nullptr && (arch==USE_SSE2 || arch_orig==NO_SIMD)) {
; 242  :       arch = NO_SIMD;
; 243  :       /* C version variations are only working in SAD
; 244  :       // priority: C version compiled to avx2, avx
; 245  :       if(arch_orig==USE_AVX2)
; 246  :       result = get_luma_avx2_C_function(BlockX, BlockY, pixelsize, NO_SIMD);
; 247  :       else if(arch_orig==USE_AVX)
; 248  :       result = get_luma_avx_C_function(BlockX, BlockY, pixelsize, NO_SIMD);
; 249  :       */
; 250  :       if(result == nullptr)
; 251  :         result = func_luma[make_tuple(BlockX, BlockY, pixelsize, NO_SIMD)]; // fallback to C
; 252  :     }
; 253  : #endif
; 254  :     return result;

	lea	ecx, DWORD PTR _func_luma$[ebp]
	call	??1?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ

; 255  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z$0:
	lea	ecx, DWORD PTR _func_luma$[ebp]
	jmp	??1?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ
__ehhandler$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?get_luma_function@@YAP6AIPBEH@ZHHHW4arch_t@@@Z ENDP	; get_luma_function
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ PROC ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::~map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >, COMDAT
; _this$ = ecx
	push	ecx
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [esi]

; 2168 : 		erase(begin(), end());

	push	eax
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T1[esp+16]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [esi]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 4
	pop	esi
	pop	ecx
	ret	0
??1?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::~map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::~_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >, COMDAT
; _this$ = ecx

; 1090 : 		{	// destroy tree

	push	ecx
	push	esi
	mov	esi, ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [esi]

; 2168 : 		erase(begin(), end());

	push	eax
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T1[esp+16]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [esi]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 4
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1092 : 		}

	pop	ecx
	ret	0
??1?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::~_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Keyval$ = 8						; size = 4
??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z PROC ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[], COMDAT
; _this$ = ecx

; 177  : 		{	// find element matching _Keyval or insert with default mapped

	sub	esp, 8

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	push	DWORD PTR __Keyval$[esp+4]
	lea	eax, DWORD PTR $T1[esp+12]
	push	eax
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >

; 178  : 		return (try_emplace(_STD move(_Keyval)).first->second);

	mov	eax, DWORD PTR $T1[esp+8]
	add	eax, 32					; 00000020H

; 179  : 		}

	add	esp, 8
	ret	4
??A?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAEAAP6AIPBEH@Z$$QAV?$tuple@HHHW4arch_t@@@1@@Z ENDP ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ PROC ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+8], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

	mov	eax, esi
	pop	esi
	pop	ecx
	ret	0
??0?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator->, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 407  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}

	ret	0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [ecx]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 727  : 		}

	ret	0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2167 : 		{	// free all storage

	push	ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [ecx]

; 2168 : 		erase(begin(), end());

	push	eax
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T1[esp+12]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase

; 2169 : 		}

	pop	ecx
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >, COMDAT
; _this$ = ecx

; 1004 : 		{	// construct empty tree from comparator

	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+8], esi

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax

; 1005 : 		}

	mov	eax, esi
	pop	esi
	pop	ecx
	ret	4
??0?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@SAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@AAU32@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@SAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> *>::pointer_to, COMDAT
; __Val$ = ecx

; 280  : 		return (_STD addressof(_Val));

	mov	eax, ecx

; 281  : 		}

	ret	0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@SAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator*, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}

	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 930  : 		return (_Get_data()._Myhead);

	mov	eax, ecx

; 931  : 		}

	ret	0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Freeheadnode, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 846  : 		}

	ret	4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct from comparator

	push	esi
	mov	esi, ecx

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax

; 705  : 		_Construct();
; 706  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase, COMDAT
; _this$ = ecx

; 1444 : 		{	// erase [_First, _Last)

	push	ecx

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First$[esp]

; 1445 : 		if (_First == begin() && _Last == end())

	mov	edx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, ecx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	esi, DWORD PTR [edi]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, DWORD PTR [esi]

; 1445 : 		if (_First == begin() && _Last == end())

	jne	SHORT $LN176@erase

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	edx, esi

; 1445 : 		if (_First == begin() && _Last == end())

	jne	SHORT $LN176@erase

; 1446 : 			{	// erase all
; 1447 : 			clear();

	call	?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::clear

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edi]
	pop	edi
	pop	esi

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], ecx

; 1455 : 			}
; 1456 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN176@erase:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, edx

; 1448 : 			return (begin());
; 1449 : 			}
; 1450 : 		else
; 1451 : 			{	// partial erase, one at a time
; 1452 : 			while (_First != _Last)

	je	SHORT $LN3@erase
$LL2@erase:

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0

; 279  : 		_Myiter _Tmp = *this;

	mov	ecx, eax

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	jne	SHORT $LN133@erase

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [eax+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN178@erase

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN188@erase
	npad	7
$LL144@erase:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	edx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL144@erase

; 65   : 		else

	jmp	SHORT $LN188@erase
$LN178@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	edx, DWORD PTR [eax+4]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN188@erase
$LL128@erase:
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN188@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, edx
	mov	DWORD PTR __First$[esp+8], eax
	mov	edx, DWORD PTR [edx+4]
	cmp	BYTE PTR [edx+13], 0
	je	SHORT $LL128@erase
$LN188@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	DWORD PTR __First$[esp+8], edx
$LN133@erase:

; 1453 : 				erase(_First++);

	push	ecx
	lea	eax, DWORD PTR $T1[esp+16]
	mov	ecx, edi
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First$[esp+8]
	cmp	eax, DWORD PTR __Last$[esp+8]

; 1448 : 			return (begin());
; 1449 : 			}
; 1450 : 		else
; 1451 : 			{	// partial erase, one at a time
; 1452 : 			while (_First != _Last)

	jne	SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+8]
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx], eax

; 1454 : 			return (iterator(_First._Ptr, &this->_Get_data()));

	mov	eax, ecx

; 1455 : 			}
; 1456 : 		}

	pop	ecx
	ret	12					; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::end, COMDAT
; _this$ = ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1121 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1122 : 		}

	ret	4
?end@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::begin, COMDAT
; _this$ = ecx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 1111 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1112 : 		}

	ret	4
?begin@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >, COMDAT
; _this$ = ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [ecx], eax

; 385  : 		}

	mov	eax, ecx
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator!=, COMDAT
; _this$ = ecx

; 340  : 		{	// test for iterator inequality

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 341  : 		return (!(*this == _Right));
; 342  : 		}

	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator==, COMDAT
; _this$ = ecx

; 324  : 		{	// test for iterator equality

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (this->_Getcont() != _Right._Getcont())
; 327  : 			{	// report error
; 328  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 329  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 330  : 			}
; 331  : 
; 332  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 333  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}

	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator++, COMDAT
; _this$ = ecx

; 279  : 		_Myiter _Tmp = *this;

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [esi], edx

; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++

; 280  : 		++*this;
; 281  : 		return (_Tmp);

	mov	eax, esi
	pop	esi

; 282  : 		}

	ret	8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator*, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 234  : 		if (_Mycont == 0
; 235  : 			|| this->_Ptr == nullptr_t{}
; 236  : 			|| this->_Ptr == _Mycont->_Myhead)
; 237  : 			{	// report error
; 238  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 239  : 			_SCL_SECURE_OUT_OF_RANGE;
; 240  : 			}
; 241  : 
; 242  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 243  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 244  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 245  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 246  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 247  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 248  : 
; 249  : 		return (_Mytree::_Myval(this->_Ptr));
; 250  : 		}

	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::deallocate, COMDAT
; _this$dead$ = ecx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 920  : 		return (_Mypair._Get_second()._Get_second());

	mov	eax, ecx

; 921  : 		}

	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 910  : 		return (_Mypair._Get_second()._Get_first());

	mov	eax, ecx

; 911  : 		}

	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 720  : 		{	// construct head node

	push	esi
	mov	esi, ecx

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax
	pop	esi

; 722  : 		}

	ret	0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Right, COMDAT
; __Pnode$ = ecx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	lea	eax, DWORD PTR [ecx+8]

; 683  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 684  : 		}

	ret	0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Parent, COMDAT
; __Pnode$ = ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	eax, DWORD PTR [ecx+4]

; 678  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 679  : 		}

	ret	0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Left, COMDAT
; __Pnode$ = ecx

; 673  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

	mov	eax, ecx

; 674  : 		}

	ret	0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2077 : 		return (this->_Left(this->_Myhead()));

	mov	eax, DWORD PTR [ecx]

; 2078 : 		}

	ret	0
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::clear, COMDAT
; _this$ = ecx

; 1467 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 		this->_Orphan_ptr(nullptr_t{});
; 1470 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 
; 1472 : 		_Erase(_Root());

	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR [eax+4]

; 2033 : 		for (_Nodeptr _Pnode = _Rootnode;

	mov	esi, ebx

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	cmp	BYTE PTR [ebx+13], 0
	jne	SHORT $LN23@clear
	npad	6
$LL24@clear:

; 2035 : 			{	// free subtrees, then node
; 2036 : 			_Erase(this->_Right(_Pnode));

	push	DWORD PTR [esi+8]
	mov	ecx, edi
	call	?_Erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Erase

; 2037 : 			_Pnode = this->_Left(_Pnode);

	mov	esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	ebx, esi
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL24@clear
$LN23@clear:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]

; 1477 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR [eax+4], eax
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax], eax

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [edi]

; 1473 : 		_Root() = this->_Myhead();
; 1474 : 		_Lmost() = this->_Myhead();
; 1475 : 		_Rmost() = this->_Myhead();

	mov	DWORD PTR [eax+8], eax

; 1476 : 		this->_Mysize() = 0;

	mov	DWORD PTR [edi+4], 0

; 1477 : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::clear
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1195 = -12						; size = 4
tv1197 = -8						; size = 4
tv1196 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase, COMDAT
; _this$ = ecx

; 1259 : 		{	// erase element at _Where

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp

; 123  : 		return (_Ptr);

	mov	ebp, DWORD PTR __Where$[esp+16]

; 1259 : 		{	// erase element at _Where

	mov	ebx, ecx
	push	esi
	push	edi

; 273  : 		++static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Where$[esp+24]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [ebp]

; 1260 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1261 : 		if (_Where._Getcont() != &this->_Get_data()
; 1262 : 			|| this->_Isnil(_Where._Mynode()))
; 1263 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1264 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1265 : 		++_Where;	// save successor iterator for return
; 1266 : 		_Orphan_ptr(_Erasednode);
; 1267 : 
; 1268 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1269 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1270 : 		++_Where;	// save successor iterator for return
; 1271 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1272 : 
; 1273 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1274 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1275 : 		_Nodeptr _Pnode = _Erasednode;
; 1276 : 
; 1277 : 		if (this->_Isnil(this->_Left(_Pnode)))

	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LN5@erase

; 1278 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

	mov	edi, DWORD PTR [ebp+8]

; 1279 : 		else if (this->_Isnil(this->_Right(_Pnode)))

	jmp	SHORT $LN691@erase
$LN5@erase:
	mov	eax, DWORD PTR [ebp+8]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN7@erase

; 1280 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

	mov	edi, ecx

; 1281 : 		else

	jmp	SHORT $LN691@erase
$LN7@erase:

; 123  : 		return (_Ptr);

	mov	edx, DWORD PTR __Where$[esp+24]

; 1282 : 			{	// two subtrees, must lift successor node to replace erased
; 1283 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1284 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

	mov	edi, DWORD PTR [edx+8]

; 1285 : 			}
; 1286 : 
; 1287 : 		if (_Pnode == _Erasednode)

	cmp	edx, ebp
	jne	$LN9@erase
$LN691@erase:

; 1288 : 			{	// at most one subtree, relink it
; 1289 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1290 : 			if (!this->_Isnil(_Fixnode))

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [ebp+4]
	jne	SHORT $LN11@erase

; 1291 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	DWORD PTR [edi+4], esi
$LN11@erase:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ebx]

; 1292 : 
; 1293 : 			if (_Root() == _Erasednode)

	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN12@erase

; 1294 : 				_Root() = _Fixnode;	// link down from root

	mov	DWORD PTR [eax+4], edi

; 1295 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

	jmp	SHORT $LN15@erase
$LN12@erase:
	cmp	DWORD PTR [esi], ebp
	jne	SHORT $LN14@erase

; 1296 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	DWORD PTR [esi], edi

; 1297 : 			else

	jmp	SHORT $LN15@erase
$LN14@erase:

; 1298 : 				this->_Right(_Fixnodeparent) =

	mov	DWORD PTR [esi+8], edi
$LN15@erase:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	edx, DWORD PTR [ebx]

; 1299 : 					_Fixnode;	// link down to right
; 1300 : 
; 1301 : 			if (_Lmost() == _Erasednode)

	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN16@erase

; 1302 : 				_Lmost() = this->_Isnil(_Fixnode)

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN42@erase
	mov	ecx, esi
	jmp	SHORT $LN166@erase
$LN42@erase:

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edi]

; 698  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

	mov	ecx, edi

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN166@erase
	npad	3
$LL165@erase:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL165@erase
$LN166@erase:

; 1302 : 				_Lmost() = this->_Isnil(_Fixnode)

	mov	DWORD PTR [edx], ecx
$LN16@erase:

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	edx, DWORD PTR [ebx]

; 1303 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1304 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1305 : 
; 1306 : 			if (_Rmost() == _Erasednode)

	cmp	DWORD PTR [edx+8], ebp
	jne	$LN373@erase

; 1307 : 				_Rmost() = this->_Isnil(_Fixnode)

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN44@erase
	mov	ecx, esi
	mov	DWORD PTR [edx+8], ecx

; 1308 : 					? _Fixnodeparent	// largest is parent of erased node
; 1309 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1310 : 			}
; 1311 : 		else

	jmp	SHORT $LN373@erase
$LN44@erase:

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edi+8]

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

	mov	ecx, edi

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN218@erase
	npad	1
$LL217@erase:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL217@erase
$LN218@erase:

; 1307 : 				_Rmost() = this->_Isnil(_Fixnode)

	mov	DWORD PTR [edx+8], ecx

; 1308 : 					? _Fixnodeparent	// largest is parent of erased node
; 1309 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1310 : 			}
; 1311 : 		else

	jmp	SHORT $LN373@erase
$LN9@erase:

; 1312 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1313 : 			this->_Parent(this->_Left(_Erasednode)) =

	mov	DWORD PTR [ecx+4], edx

; 1314 : 				_Pnode;	// link left up
; 1315 : 			this->_Left(_Pnode) =

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [edx], eax

; 1316 : 				this->_Left(_Erasednode);	// link successor down
; 1317 : 
; 1318 : 			if (_Pnode == this->_Right(_Erasednode))

	cmp	edx, DWORD PTR [ebp+8]
	jne	SHORT $LN18@erase

; 1319 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	esi, edx

; 1320 : 			else

	jmp	SHORT $LN19@erase
$LN18@erase:

; 1321 : 				{	// successor further down, link in place of erased
; 1322 : 				_Fixnodeparent =
; 1323 : 					this->_Parent(_Pnode);	// parent is successor's
; 1324 : 				if (!this->_Isnil(_Fixnode))

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [edx+4]
	jne	SHORT $LN20@erase

; 1325 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	DWORD PTR [edi+4], esi
$LN20@erase:

; 1326 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

	mov	DWORD PTR [esi], edi

; 1327 : 				this->_Right(_Pnode) =

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [edx+8], eax

; 1328 : 					this->_Right(_Erasednode);	// link next down
; 1329 : 				this->_Parent(this->_Right(_Erasednode)) =

	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [eax+4], edx
$LN19@erase:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ebx]

; 1330 : 					_Pnode;	// right up
; 1331 : 				}
; 1332 : 
; 1333 : 			if (_Root() == _Erasednode)

	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN21@erase

; 1334 : 				_Root() = _Pnode;	// link down from root

	mov	DWORD PTR [eax+4], edx

; 1335 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

	jmp	SHORT $LN24@erase
$LN21@erase:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ebp+4]

; 1335 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN23@erase

; 1336 : 				this->_Left(this->_Parent(_Erasednode)) =

	mov	DWORD PTR [eax], edx

; 1337 : 					_Pnode;	// link down to left
; 1338 : 			else

	jmp	SHORT $LN24@erase
$LN23@erase:

; 1339 : 				this->_Right(this->_Parent(_Erasednode)) =

	mov	DWORD PTR [eax+8], edx
$LN24@erase:

; 1340 : 					_Pnode;	// link down to right
; 1341 : 
; 1342 : 			this->_Parent(_Pnode) =

	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 50   : 	_Left = _STD move(_Right);

	mov	al, BYTE PTR [ebp+12]
	mov	cl, BYTE PTR [edx+12]
	mov	BYTE PTR [edx+12], al

; 51   : 	_Right = _STD move(_Tmp);

	mov	BYTE PTR [ebp+12], cl
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1348 : 		if (this->_Color(_Erasednode) == this->_Black)

	cmp	BYTE PTR [ebp+12], 1
	jne	$LN25@erase

; 1349 : 			{	// erasing black link, must recolor/rebalance tree
; 1350 : 			for (; _Fixnode != _Root()
; 1351 : 				&& this->_Color(_Fixnode) == this->_Black;

	mov	eax, DWORD PTR [ebx]
	cmp	edi, DWORD PTR [eax+4]
	je	$LN3@erase
	npad	4
$LL4@erase:
	cmp	BYTE PTR [edi+12], 1
	mov	edx, esi
	mov	DWORD PTR tv1195[esp+28], edx
	mov	DWORD PTR tv1197[esp+28], esi
	mov	DWORD PTR tv1196[esp+28], esi
	jne	$LN3@erase

; 1353 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

	mov	ecx, DWORD PTR [esi]
	cmp	edi, ecx
	jne	SHORT $LN26@erase

; 1354 : 					{	// fixup left subtree
; 1355 : 					_Pnode = this->_Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]

; 1356 : 					if (this->_Color(_Pnode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN28@erase

; 1357 : 						{	// rotate red up from right subtree
; 1358 : 						this->_Color(_Pnode) = this->_Black;

	mov	BYTE PTR [ecx+12], 1

; 1359 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1360 : 						_Lrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [esi+12], 0
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate

; 1361 : 						_Pnode = this->_Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]
	mov	edx, esi
$LN28@erase:

; 1362 : 						}
; 1363 : 
; 1364 : 					if (this->_Isnil(_Pnode))

	cmp	BYTE PTR [ecx+13], 0
	jne	$LN2@erase

; 1365 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1366 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1367 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN31@erase
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	je	SHORT $LN694@erase
$LN31@erase:

; 1368 : 						{	// redden right subtree with black children
; 1369 : 						this->_Color(_Pnode) = this->_Red;
; 1370 : 						_Fixnode = _Fixnodeparent;
; 1371 : 						}
; 1372 : 					else
; 1373 : 						{	// must rearrange right subtree
; 1374 : 						if (this->_Color(this->_Right(_Pnode))
; 1375 : 							== this->_Black)

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN33@erase

; 1376 : 							{	// rotate red up from left sub-subtree
; 1377 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx]

; 1378 : 							this->_Color(_Pnode) = this->_Red;
; 1379 : 							_Rrotate(_Pnode);

	push	ecx
	mov	BYTE PTR [eax+12], 1
	mov	BYTE PTR [ecx+12], 0
	mov	ecx, ebx
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate

; 1380 : 							_Pnode = this->_Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1381 : 							}
; 1382 : 
; 1383 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 1384 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	BYTE PTR [esi+12], 1

; 1385 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx+8]

; 1386 : 						_Lrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate

; 1387 : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN3@erase
$LN26@erase:

; 1388 : 						}
; 1389 : 					}
; 1390 : 				else
; 1391 : 					{	// fixup right subtree
; 1392 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1393 : 					if (this->_Color(_Pnode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN34@erase

; 1394 : 						{	// rotate red up from left subtree
; 1395 : 						this->_Color(_Pnode) = this->_Black;

	mov	BYTE PTR [ecx+12], 1

; 1396 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1397 : 						_Rrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [esi+12], 0
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate

; 1398 : 						_Pnode = this->_Left(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR tv1195[esp+28]
$LN34@erase:

; 1399 : 						}
; 1400 : 
; 1401 : 					if (this->_Isnil(_Pnode))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN2@erase

; 1402 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1403 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1404 : 						this->_Black
; 1405 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN37@erase
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN37@erase
$LN694@erase:

; 1406 : 						{	// redden left subtree with black children
; 1407 : 						this->_Color(_Pnode) = this->_Red;

	mov	BYTE PTR [ecx+12], 0
$LN2@erase:

; 1349 : 			{	// erasing black link, must recolor/rebalance tree
; 1350 : 			for (; _Fixnode != _Root()
; 1351 : 				&& this->_Color(_Fixnode) == this->_Black;

	mov	eax, DWORD PTR [ebx]

; 1352 : 				_Fixnodeparent = this->_Parent(_Fixnode))

	mov	esi, DWORD PTR [esi+4]
	mov	edi, DWORD PTR tv1197[esp+28]
	cmp	edx, DWORD PTR [eax+4]
	jne	$LL4@erase
	mov	edi, DWORD PTR tv1196[esp+28]
$LN3@erase:

; 1424 : 						break;	// tree now recolored/rebalanced
; 1425 : 						}
; 1426 : 					}
; 1427 : 
; 1428 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

	mov	BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	push	ebp
	call	??3@YAXPAX@Z				; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1436 : 		if (0 < this->_Mysize())

	mov	eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR __Where$[esp+24]

; 1436 : 		if (0 < this->_Mysize())

	test	eax, eax
	je	SHORT $LN693@erase

; 1437 : 			--this->_Mysize();

	dec	eax
	mov	DWORD PTR [ebx+4], eax
$LN693@erase:

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+24]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 1438 : 
; 1439 : 		return (iterator(_Where._Ptr,
; 1440 : 			&this->_Get_data()));	// return successor iterator
; 1441 : 		}

	add	esp, 12					; 0000000cH
	ret	8
$LN37@erase:

; 1408 : 						_Fixnode = _Fixnodeparent;
; 1409 : 						}
; 1410 : 					else
; 1411 : 						{	// must rearrange left subtree
; 1412 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN39@erase

; 1413 : 							{	// rotate red up from right sub-subtree
; 1414 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx+8]

; 1415 : 							this->_Color(_Pnode) = this->_Red;
; 1416 : 							_Lrotate(_Pnode);

	push	ecx
	mov	BYTE PTR [eax+12], 1
	mov	BYTE PTR [ecx+12], 0
	mov	ecx, ebx
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate

; 1417 : 							_Pnode = this->_Left(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi]
$LN39@erase:

; 1418 : 							}
; 1419 : 
; 1420 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 1421 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	BYTE PTR [esi+12], 1

; 1422 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx]

; 1423 : 						_Rrotate(_Fixnodeparent);

	mov	ecx, ebx
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate
	jmp	SHORT $LN3@erase
?erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

	mov	eax, DWORD PTR [ecx]

; 124  : 		}

	ret	0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator++, COMDAT
; _this$ = ecx

; 258  : 		{	// preincrement

	push	esi
	mov	esi, ecx

; 259  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 260  : 		if (this->_Getcont() == 0
; 261  : 			|| this->_Ptr == nullptr_t{}
; 262  : 			|| _Mytree::_Isnil(this->_Ptr))
; 263  : 			{	// report error
; 264  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 265  : 			_SCL_SECURE_OUT_OF_RANGE;
; 266  : 			}
; 267  : 
; 268  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 269  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr_t{});
; 270  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++

; 274  : 		return (*this);

	mov	eax, esi
	pop	esi

; 275  : 		}

	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >, COMDAT
; _this$ = ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [ecx], eax

; 215  : 		}

	mov	eax, ecx
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Myval, COMDAT
; __Pnode$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	lea	eax, DWORD PTR [ecx+16]

; 604  : 		}

	ret	0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Right, COMDAT
; __Pnode$ = ecx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	lea	eax, DWORD PTR [ecx+8]

; 599  : 		}

	ret	0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Parent, COMDAT
; __Pnode$ = ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	eax, DWORD PTR [ecx+4]

; 594  : 		}

	ret	0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Left, COMDAT
; __Pnode$ = ecx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, ecx

; 589  : 		}

	ret	0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx

; 721  : 		}

	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 940  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+4]

; 941  : 		}

	ret	0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 935  : 		return (_Get_data()._Myhead);

	mov	eax, ecx

; 936  : 		}

	ret	0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 83   : 		_Ptr = ::operator new(_User_size);

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	eax, eax
	je	SHORT $LN61@Buyheadnod
	mov	DWORD PTR [eax], eax
$LN61@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN96@Buyheadnod
	mov	DWORD PTR [ecx], eax
$LN96@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	lea	ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN131@Buyheadnod
	mov	DWORD PTR [ecx], eax
$LN131@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 832  : 		_Color(_Pnode) = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 833  : 		_Isnil(_Pnode) = true;
; 834  : 		return (_Pnode);
; 835  : 		}

	ret	0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Min, COMDAT
; __Pnode$ = ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN17@Min
$LL4@Min:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL4@Min
$LN17@Min:

; 698  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

	mov	eax, ecx

; 699  : 		}

	ret	0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Max, COMDAT
; __Pnode$ = ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN17@Max
	npad	7
$LL4@Max:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL4@Max
$LN17@Max:

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

	mov	eax, ecx

; 694  : 		}

	ret	0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myval, COMDAT
; __Pnode$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	lea	eax, DWORD PTR [ecx+16]

; 688  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 689  : 		}

	ret	0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Isnil, COMDAT
; __Pnode$ = ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	lea	eax, DWORD PTR [ecx+13]

; 668  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 669  : 		}

	ret	0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Color, COMDAT
; __Pnode$ = ecx

; 578  : 		return ((char&)_Pnode->_Color);

	lea	eax, DWORD PTR [ecx+12]

; 663  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 664  : 		}

	ret	0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2112 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx]

; 2113 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi+8]

; 2114 : 
; 2115 : 		if (!this->_Isnil(this->_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Rrotate

; 2116 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2117 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ecx]

; 2118 : 
; 2119 : 		if (_Wherenode == _Root())

	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 2120 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2128 : 		}

	ret	4
$LN3@Rrotate:

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [edx+4]

; 2121 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2128 : 		}

	ret	4
$LN5@Rrotate:

; 2123 : 		else
; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2128 : 		}

	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Root, COMDAT
; _this$ = ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ecx]
	add	eax, 4

; 2107 : 		return (this->_Parent(this->_Myhead()));
; 2108 : 		}

	ret	0
?_Root@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 2102 : 		return (this->_Right(this->_Myhead()));
; 2103 : 		}

	ret	0
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	push	esi

; 2082 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

	mov	esi, DWORD PTR [edx+8]

; 2083 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx+8], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi]

; 2084 : 
; 2085 : 		if (!this->_Isnil(this->_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Lrotate

; 2086 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2087 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ecx]

; 2088 : 
; 2089 : 		if (_Wherenode == _Root())

	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 2090 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2098 : 		}

	ret	4
$LN3@Lrotate:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edx+4]

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 2092 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2098 : 		}

	ret	4
$LN5@Lrotate:

; 2093 : 		else
; 2094 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2098 : 		}

	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2032 : 		{	// free entire subtree, recursively

	push	ebx
	push	esi
	push	edi

; 2033 : 		for (_Nodeptr _Pnode = _Rootnode;

	mov	edi, DWORD PTR __Rootnode$[esp+8]
	mov	ebx, ecx
	mov	esi, edi

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	cmp	BYTE PTR [edi+13], 0
	jne	SHORT $LN3@Erase
$LL4@Erase:

; 2035 : 			{	// free subtrees, then node
; 2036 : 			_Erase(this->_Right(_Pnode));

	push	DWORD PTR [esi+8]
	mov	ecx, ebx
	call	?_Erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Erase

; 2037 : 			_Pnode = this->_Left(_Pnode);

	mov	esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	edi, esi
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL4@Erase
$LN3@Erase:
	pop	edi
	pop	esi
	pop	ebx

; 2038 : 			this->_Getal().destroy(
; 2039 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2040 : 
; 2041 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2042 : 			}
; 2043 : 		}

	ret	4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

	mov	edx, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN41@operator

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN34@operator

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN19@operator
	npad	5
$LL18@operator:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

	mov	DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

	mov	eax, edx

; 74   : 		}

	ret	0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN3@operator
$LL2@operator:
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

	mov	eax, edx

; 74   : 		}

	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

	mov	eax, ecx
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Min, COMDAT
; __Pnode$ = ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN15@Min
$LL2@Min:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Min
$LN15@Min:

; 617  : 		return (_Pnode);

	mov	eax, ecx

; 618  : 		}

	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Max, COMDAT
; __Pnode$ = ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN15@Max
	npad	7
$LL2@Max:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Max
$LN15@Max:

; 610  : 		return (_Pnode);

	mov	eax, ecx

; 611  : 		}

	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Isnil, COMDAT
; __Pnode$ = ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	lea	eax, DWORD PTR [ecx+13]

; 584  : 		}

	ret	0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Color, COMDAT
; __Pnode$ = ecx

; 578  : 		return ((char&)_Pnode->_Color);

	lea	eax, DWORD PTR [ecx+12]

; 579  : 		}

	ret	0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::allocate, COMDAT
; _this$dead$ = ecx

; 83   : 		_Ptr = ::operator new(_User_size);

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 976  : 		return (_Mybase::allocate(_Count));
; 977  : 		}

	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 925  : 		return (_Mypair._Get_second()._Get_second());

	mov	eax, ecx

; 926  : 		}

	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 83   : 		_Ptr = ::operator new(_User_size);

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0CA@$0CA@E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0CA@$0CA@E@@YAIPBEH@Z PROC			; Luma_C<32,32,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+32]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+16]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0CA@$0CA@E@@YAIPBEH@Z ENDP			; Luma_C<32,32,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0CA@$0BA@E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0CA@$0BA@E@@YAIPBEH@Z PROC			; Luma_C<32,16,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+16]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+16]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0CA@$0BA@E@@YAIPBEH@Z ENDP			; Luma_C<32,16,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0CA@$07E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0CA@$07E@@YAIPBEH@Z PROC			; Luma_C<32,8,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+8]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+16]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0CA@$07E@@YAIPBEH@Z ENDP			; Luma_C<32,8,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$0CA@E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$0CA@E@@YAIPBEH@Z PROC			; Luma_C<16,32,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+32]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+8]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$0CA@E@@YAIPBEH@Z ENDP			; Luma_C<16,32,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$0BA@E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$0BA@E@@YAIPBEH@Z PROC			; Luma_C<16,16,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+16]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+8]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$0BA@E@@YAIPBEH@Z ENDP			; Luma_C<16,16,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$07E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$07E@@YAIPBEH@Z PROC			; Luma_C<16,8,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+8]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+8]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$07E@@YAIPBEH@Z ENDP			; Luma_C<16,8,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$03E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$03E@@YAIPBEH@Z PROC			; Luma_C<16,4,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+4]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+8]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$03E@@YAIPBEH@Z ENDP			; Luma_C<16,4,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$01E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$01E@@YAIPBEH@Z PROC			; Luma_C<16,2,unsigned char>, COMDAT

; 105  : {

	push	ebx

; 106  :     const unsigned char *s = pSrc;

	mov	ebx, DWORD PTR _pSrc$[esp]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	ebp
	push	esi
	push	edi
	inc	ebx
	lea	ebp, DWORD PTR [edx+2]
	npad	2
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	esi, esi
	mov	ecx, ebx
	lea	edi, DWORD PTR [esi+8]
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	esi, eax
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	ebx, DWORD PTR _nSrcPitch$[esp+12]
	add	edx, esi
	sub	ebp, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$01E@@YAIPBEH@Z ENDP			; Luma_C<16,2,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$00E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$00E@@YAIPBEH@Z PROC			; Luma_C<16,1,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	xor	eax, eax
	push	esi
	push	edi
	xor	esi, esi
	inc	ecx
	lea	edi, DWORD PTR [eax+8]
	npad	2
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	edx, BYTE PTR [ecx-1]
	lea	ecx, DWORD PTR [ecx+2]
	add	eax, edx
	movzx	edx, BYTE PTR [ecx-2]
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	pop	edi
	add	eax, esi
	pop	esi
	ret	0
??$Luma_C@$0BA@$00E@@YAIPBEH@Z ENDP			; Luma_C<16,1,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$0BA@E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$0BA@E@@YAIPBEH@Z PROC			; Luma_C<8,16,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 6
	push	edi
	lea	edi, DWORD PTR [esi+16]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-5]
	movzx	edx, BYTE PTR [ecx-6]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-4]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-3]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$0BA@E@@YAIPBEH@Z ENDP			; Luma_C<8,16,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$07E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$07E@@YAIPBEH@Z PROC			; Luma_C<8,8,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 6
	push	edi
	lea	edi, DWORD PTR [esi+8]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-5]
	movzx	edx, BYTE PTR [ecx-6]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-4]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-3]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$07E@@YAIPBEH@Z ENDP			; Luma_C<8,8,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$03E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$03E@@YAIPBEH@Z PROC			; Luma_C<8,4,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 6
	push	edi
	lea	edi, DWORD PTR [esi+4]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-5]
	movzx	edx, BYTE PTR [ecx-6]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-4]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-3]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$03E@@YAIPBEH@Z ENDP			; Luma_C<8,4,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$01E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$01E@@YAIPBEH@Z PROC			; Luma_C<8,2,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 6
	push	edi
	lea	edi, DWORD PTR [esi+2]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-5]
	movzx	edx, BYTE PTR [ecx-6]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-4]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-3]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx-1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$01E@@YAIPBEH@Z ENDP			; Luma_C<8,2,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$00E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$00E@@YAIPBEH@Z PROC			; Luma_C<8,1,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	edx, DWORD PTR _pSrc$[esp-4]
	push	esi
	movzx	eax, BYTE PTR [edx+6]
	movzx	esi, BYTE PTR [edx+7]
	movzx	ecx, BYTE PTR [edx+3]
	add	esi, eax
	movzx	eax, BYTE PTR [edx+5]
	add	esi, eax
	movzx	eax, BYTE PTR [edx+4]
	add	eax, esi
	add	eax, ecx
	movzx	ecx, BYTE PTR [edx+2]
	add	eax, ecx
	movzx	ecx, BYTE PTR [edx+1]
	add	eax, ecx
	movzx	ecx, BYTE PTR [edx]
	add	eax, ecx
	pop	esi

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$07$00E@@YAIPBEH@Z ENDP			; Luma_C<8,1,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$07E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$07E@@YAIPBEH@Z PROC			; Luma_C<4,8,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 2
	push	edi
	lea	edi, DWORD PTR [esi+8]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	movzx	edx, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$03$07E@@YAIPBEH@Z ENDP			; Luma_C<4,8,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$03E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$03E@@YAIPBEH@Z PROC			; Luma_C<4,4,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 2
	push	edi
	lea	edi, DWORD PTR [esi+4]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	movzx	edx, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$03$03E@@YAIPBEH@Z ENDP			; Luma_C<4,4,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$01E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$01E@@YAIPBEH@Z PROC			; Luma_C<4,2,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 2
	push	edi
	lea	edi, DWORD PTR [esi+2]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, BYTE PTR [ecx-1]
	movzx	edx, BYTE PTR [ecx-2]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx+1]
	add	edx, eax
	movzx	eax, BYTE PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$03$01E@@YAIPBEH@Z ENDP			; Luma_C<4,2,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$00E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$00E@@YAIPBEH@Z PROC			; Luma_C<4,1,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	edx, DWORD PTR _pSrc$[esp-4]
	movzx	ecx, BYTE PTR [edx+2]
	movzx	eax, BYTE PTR [edx+3]
	add	eax, ecx
	movzx	ecx, BYTE PTR [edx+1]
	add	eax, ecx
	movzx	ecx, BYTE PTR [edx]
	add	eax, ecx

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$03$00E@@YAIPBEH@Z ENDP			; Luma_C<4,1,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$01$03E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$01$03E@@YAIPBEH@Z PROC			; Luma_C<2,4,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx

; 112  :         s += nSrcPitch;

	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi
	movzx	eax, BYTE PTR [ecx]
	lea	edx, DWORD PTR [ecx+ebx]
	movzx	esi, BYTE PTR [ecx+1]
	movzx	ecx, BYTE PTR [edx+1]
	add	esi, eax
	movzx	eax, BYTE PTR [edx]
	push	edi
	lea	edi, DWORD PTR [edx+ebx]
	add	esi, eax
	movzx	edx, BYTE PTR [edi]
	add	esi, ecx
	movzx	ecx, BYTE PTR [edi+1]
	add	edx, esi
	movzx	eax, BYTE PTR [edi+ebx]
	add	edx, ecx
	movzx	ecx, BYTE PTR [edi+ebx+1]
	add	eax, edx
	pop	edi
	pop	esi
	add	eax, ecx
	pop	ebx

; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$01$03E@@YAIPBEH@Z ENDP			; Luma_C<2,4,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$01$01E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$01$01E@@YAIPBEH@Z PROC			; Luma_C<2,2,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	edx, DWORD PTR _pSrc$[esp-4]
	push	esi
	movzx	eax, BYTE PTR [edx]
	movzx	esi, BYTE PTR [edx+1]
	add	esi, eax

; 112  :         s += nSrcPitch;

	mov	eax, DWORD PTR _nSrcPitch$[esp]
	movzx	ecx, BYTE PTR [edx+eax+1]
	movzx	eax, BYTE PTR [edx+eax]
	add	eax, esi
	add	eax, ecx
	pop	esi

; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$01$01E@@YAIPBEH@Z ENDP			; Luma_C<2,2,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$01$00E@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$01$00E@@YAIPBEH@Z PROC			; Luma_C<2,1,unsigned char>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	movzx	eax, BYTE PTR [ecx+1]
	movzx	ecx, BYTE PTR [ecx]
	add	eax, ecx

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$01$00E@@YAIPBEH@Z ENDP			; Luma_C<2,1,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0CA@$0CA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0CA@$0CA@G@@YAIPBEH@Z PROC			; Luma_C<32,32,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+32]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0CA@$0CA@G@@YAIPBEH@Z ENDP			; Luma_C<32,32,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0CA@$0BA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0CA@$0BA@G@@YAIPBEH@Z PROC			; Luma_C<32,16,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+16]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0CA@$0BA@G@@YAIPBEH@Z ENDP			; Luma_C<32,16,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0CA@$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0CA@$07G@@YAIPBEH@Z PROC			; Luma_C<32,8,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+8]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0CA@$07G@@YAIPBEH@Z ENDP			; Luma_C<32,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$0CA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$0CA@G@@YAIPBEH@Z PROC			; Luma_C<16,32,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+32]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$0CA@G@@YAIPBEH@Z ENDP			; Luma_C<16,32,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$0BA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$0BA@G@@YAIPBEH@Z PROC			; Luma_C<16,16,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+16]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$0BA@G@@YAIPBEH@Z ENDP			; Luma_C<16,16,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$07G@@YAIPBEH@Z PROC			; Luma_C<16,8,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+8]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$07G@@YAIPBEH@Z ENDP			; Luma_C<16,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$03G@@YAIPBEH@Z PROC			; Luma_C<16,4,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+4]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$03G@@YAIPBEH@Z ENDP			; Luma_C<16,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$01G@@YAIPBEH@Z PROC			; Luma_C<16,2,unsigned short>, COMDAT

; 105  : {

	push	ebx
	push	ebp

; 106  :     const unsigned char *s = pSrc;

	mov	ebp, DWORD PTR _nSrcPitch$[esp+4]

; 107  :     int sumLuma = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _pSrc$[esp+8]
	push	edi
	lea	ebx, DWORD PTR [edx+2]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	xor	ecx, ecx
	xor	edi, edi
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [esi+ecx*2]
	add	edx, eax
	movzx	eax, WORD PTR [esi+ecx*2+2]
	add	ecx, 2
	add	edi, eax
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;

	add	edx, edi
	add	esi, ebp
	sub	ebx, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, edx
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$0BA@$01G@@YAIPBEH@Z ENDP			; Luma_C<16,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$0BA@$00G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$0BA@$00G@@YAIPBEH@Z PROC			; Luma_C<16,1,unsigned short>, COMDAT

; 105  : {

	push	esi
	push	edi

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )

	mov	edi, DWORD PTR _pSrc$[esp+4]
	xor	eax, eax
	xor	ecx, ecx
	xor	esi, esi
	npad	4
$LL7@Luma_C:

; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	edx, WORD PTR [edi+ecx*2]
	add	eax, edx
	movzx	edx, WORD PTR [edi+ecx*2+2]
	add	ecx, 2
	add	esi, edx
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL7@Luma_C

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	pop	edi
	add	eax, esi
	pop	esi
	ret	0
??$Luma_C@$0BA@$00G@@YAIPBEH@Z ENDP			; Luma_C<16,1,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$0BA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$0BA@G@@YAIPBEH@Z PROC			; Luma_C<8,16,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 12					; 0000000cH
	push	edi
	lea	edi, DWORD PTR [esi+16]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-10]
	movzx	edx, WORD PTR [ecx-12]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-8]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-6]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$0BA@G@@YAIPBEH@Z ENDP			; Luma_C<8,16,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$07G@@YAIPBEH@Z PROC			; Luma_C<8,8,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 12					; 0000000cH
	push	edi
	lea	edi, DWORD PTR [esi+8]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-10]
	movzx	edx, WORD PTR [ecx-12]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-8]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-6]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$07G@@YAIPBEH@Z ENDP			; Luma_C<8,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$03G@@YAIPBEH@Z PROC			; Luma_C<8,4,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 12					; 0000000cH
	push	edi
	lea	edi, DWORD PTR [esi+4]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-10]
	movzx	edx, WORD PTR [ecx-12]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-8]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-6]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$03G@@YAIPBEH@Z ENDP			; Luma_C<8,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$01G@@YAIPBEH@Z PROC			; Luma_C<8,2,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 12					; 0000000cH
	push	edi
	lea	edi, DWORD PTR [esi+2]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-10]
	movzx	edx, WORD PTR [ecx-12]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-8]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-6]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx-2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$07$01G@@YAIPBEH@Z ENDP			; Luma_C<8,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$07$00G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$07$00G@@YAIPBEH@Z PROC			; Luma_C<8,1,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	edx, DWORD PTR _pSrc$[esp-4]
	push	esi
	movzx	eax, WORD PTR [edx+12]
	movzx	esi, WORD PTR [edx+14]
	movzx	ecx, WORD PTR [edx+6]
	add	esi, eax
	movzx	eax, WORD PTR [edx+10]
	add	esi, eax
	movzx	eax, WORD PTR [edx+8]
	add	eax, esi
	add	eax, ecx
	movzx	ecx, WORD PTR [edx+4]
	add	eax, ecx
	movzx	ecx, WORD PTR [edx+2]
	add	eax, ecx
	movzx	ecx, WORD PTR [edx]
	add	eax, ecx
	pop	esi

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$07$00G@@YAIPBEH@Z ENDP			; Luma_C<8,1,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$07G@@YAIPBEH@Z PROC			; Luma_C<4,8,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 4
	push	edi
	lea	edi, DWORD PTR [esi+8]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-2]
	movzx	edx, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$03$07G@@YAIPBEH@Z ENDP			; Luma_C<4,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$03G@@YAIPBEH@Z PROC			; Luma_C<4,4,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 4
	push	edi
	lea	edi, DWORD PTR [esi+4]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-2]
	movzx	edx, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$03$03G@@YAIPBEH@Z ENDP			; Luma_C<4,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$01G@@YAIPBEH@Z PROC			; Luma_C<4,2,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi

; 107  :     int sumLuma = 0;

	xor	esi, esi
	add	ecx, 4
	push	edi
	lea	edi, DWORD PTR [esi+2]
$LL4@Luma_C:

; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	movzx	eax, WORD PTR [ecx-2]
	movzx	edx, WORD PTR [ecx-4]
	add	edx, eax
	movzx	eax, WORD PTR [ecx+2]
	add	edx, eax
	movzx	eax, WORD PTR [ecx]
	add	esi, eax

; 112  :         s += nSrcPitch;

	add	ecx, ebx
	add	esi, edx
	sub	edi, 1
	jne	SHORT $LL4@Luma_C

; 113  :     }
; 114  :     return sumLuma;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 115  : }

	ret	0
??$Luma_C@$03$01G@@YAIPBEH@Z ENDP			; Luma_C<4,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$03$00G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$03$00G@@YAIPBEH@Z PROC			; Luma_C<4,1,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	edx, DWORD PTR _pSrc$[esp-4]
	movzx	ecx, WORD PTR [edx+4]
	movzx	eax, WORD PTR [edx+6]
	add	eax, ecx
	movzx	ecx, WORD PTR [edx+2]
	add	eax, ecx
	movzx	ecx, WORD PTR [edx]
	add	eax, ecx

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$03$00G@@YAIPBEH@Z ENDP			; Luma_C<4,1,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$01$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$01$03G@@YAIPBEH@Z PROC			; Luma_C<2,4,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	push	ebx

; 112  :         s += nSrcPitch;

	mov	ebx, DWORD PTR _nSrcPitch$[esp]
	push	esi
	movzx	eax, WORD PTR [ecx]
	lea	edx, DWORD PTR [ecx+ebx]
	movzx	esi, WORD PTR [ecx+2]
	movzx	ecx, WORD PTR [edx+2]
	add	esi, eax
	movzx	eax, WORD PTR [edx]
	push	edi
	lea	edi, DWORD PTR [edx+ebx]
	add	esi, eax
	movzx	edx, WORD PTR [edi]
	add	esi, ecx
	movzx	ecx, WORD PTR [edi+2]
	add	edx, esi
	movzx	eax, WORD PTR [edi+ebx]
	add	edx, ecx
	movzx	ecx, WORD PTR [edi+ebx+2]
	add	eax, edx
	pop	edi
	pop	esi
	add	eax, ecx
	pop	ebx

; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$01$03G@@YAIPBEH@Z ENDP			; Luma_C<2,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$01$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$01$01G@@YAIPBEH@Z PROC			; Luma_C<2,2,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	edx, DWORD PTR _pSrc$[esp-4]
	push	esi
	movzx	eax, WORD PTR [edx]
	movzx	esi, WORD PTR [edx+2]
	add	esi, eax

; 112  :         s += nSrcPitch;

	mov	eax, DWORD PTR _nSrcPitch$[esp]
	movzx	ecx, WORD PTR [edx+eax+2]
	movzx	eax, WORD PTR [edx+eax]
	add	eax, esi
	add	eax, ecx
	pop	esi

; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$01$01G@@YAIPBEH@Z ENDP			; Luma_C<2,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma_C@$01$00G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma_C@$01$00G@@YAIPBEH@Z PROC			; Luma_C<2,1,unsigned short>, COMDAT

; 106  :     const unsigned char *s = pSrc;
; 107  :     int sumLuma = 0;
; 108  :     for ( int j = 0; j < nBlkHeight; j++ )
; 109  :     {
; 110  :         for ( int i = 0; i < nBlkWidth; i++ )
; 111  :             sumLuma += reinterpret_cast<const pixel_t *>(s)[i];

	mov	ecx, DWORD PTR _pSrc$[esp-4]
	movzx	eax, WORD PTR [ecx+2]
	movzx	ecx, WORD PTR [ecx]
	add	eax, ecx

; 112  :         s += nSrcPitch;
; 113  :     }
; 114  :     return sumLuma;
; 115  : }

	ret	0
??$Luma_C@$01$00G@@YAIPBEH@Z ENDP			; Luma_C<2,1,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0CA@$0CA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0CA@$0CA@G@@YAIPBEH@Z PROC		; Luma16_sse2<32,32,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	ecx, DWORD PTR _pSrc$[ebp]
	xorps	xmm2, xmm2
	push	esi
	mov	esi, DWORD PTR _nSrcPitch$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	edx, 32					; 00000020H
	npad	7
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )

	xor	eax, eax
$LL7@Luma16_sse:

; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax+ecx]
	add	eax, 16					; 00000010H

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));

	movaps	xmm0, xmm1

; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));

	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	cmp	eax, 32					; 00000020H
	jl	SHORT $LL7@Luma16_sse

; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	ecx, esi
	sub	edx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0CA@$0CA@G@@YAIPBEH@Z ENDP		; Luma16_sse2<32,32,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0CA@$0BA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0CA@$0BA@G@@YAIPBEH@Z PROC		; Luma16_sse2<32,16,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	ecx, DWORD PTR _pSrc$[ebp]
	xorps	xmm2, xmm2
	push	esi
	mov	esi, DWORD PTR _nSrcPitch$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	edx, 16					; 00000010H
	npad	7
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )

	xor	eax, eax
$LL7@Luma16_sse:

; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax+ecx]
	add	eax, 16					; 00000010H

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));

	movaps	xmm0, xmm1

; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));

	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	cmp	eax, 32					; 00000020H
	jl	SHORT $LL7@Luma16_sse

; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	ecx, esi
	sub	edx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0CA@$0BA@G@@YAIPBEH@Z ENDP		; Luma16_sse2<32,16,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0CA@$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0CA@$07G@@YAIPBEH@Z PROC		; Luma16_sse2<32,8,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	ecx, DWORD PTR _pSrc$[ebp]
	xorps	xmm2, xmm2
	push	esi
	mov	esi, DWORD PTR _nSrcPitch$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	edx, 8
	npad	7
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )

	xor	eax, eax
$LL7@Luma16_sse:

; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax+ecx]
	add	eax, 16					; 00000010H

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));

	movaps	xmm0, xmm1

; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));

	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	cmp	eax, 32					; 00000020H
	jl	SHORT $LL7@Luma16_sse

; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	ecx, esi
	sub	edx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0CA@$07G@@YAIPBEH@Z ENDP		; Luma16_sse2<32,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0BA@$0CA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0BA@$0CA@G@@YAIPBEH@Z PROC		; Luma16_sse2<16,32,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 32					; 00000020H
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0BA@$0CA@G@@YAIPBEH@Z ENDP		; Luma16_sse2<16,32,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0BA@$0BA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0BA@$0BA@G@@YAIPBEH@Z PROC		; Luma16_sse2<16,16,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 16					; 00000010H
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0BA@$0BA@G@@YAIPBEH@Z ENDP		; Luma16_sse2<16,16,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0BA@$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0BA@$07G@@YAIPBEH@Z PROC		; Luma16_sse2<16,8,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 8
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0BA@$07G@@YAIPBEH@Z ENDP		; Luma16_sse2<16,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0BA@$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0BA@$03G@@YAIPBEH@Z PROC		; Luma16_sse2<16,4,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 4
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0BA@$03G@@YAIPBEH@Z ENDP		; Luma16_sse2<16,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0BA@$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0BA@$01G@@YAIPBEH@Z PROC		; Luma16_sse2<16,2,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 2
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0BA@$01G@@YAIPBEH@Z ENDP		; Luma16_sse2<16,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$0BA@$00G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$0BA@$00G@@YAIPBEH@Z PROC		; Luma16_sse2<16,1,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();
; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32
; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	mov	eax, DWORD PTR _pSrc$[ebp]
	xorps	xmm3, xmm3
	movups	xmm0, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));

	movaps	xmm2, xmm0

; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));

	punpckhwd xmm0, xmm3
	punpcklwd xmm2, xmm3
	paddd	xmm2, xmm0

; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;
; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm2
	punpckldq xmm2, xmm3
	punpckhdq xmm1, xmm3

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm2

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm3

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$0BA@$00G@@YAIPBEH@Z ENDP		; Luma16_sse2<16,1,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$07$0BA@G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$07$0BA@G@@YAIPBEH@Z PROC		; Luma16_sse2<8,16,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 16					; 00000010H
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$07$0BA@G@@YAIPBEH@Z ENDP		; Luma16_sse2<8,16,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$07$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$07$07G@@YAIPBEH@Z PROC			; Luma16_sse2<8,8,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 8
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$07$07G@@YAIPBEH@Z ENDP			; Luma16_sse2<8,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$07$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$07$03G@@YAIPBEH@Z PROC			; Luma16_sse2<8,4,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 4
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$07$03G@@YAIPBEH@Z ENDP			; Luma16_sse2<8,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$07$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$07$01G@@YAIPBEH@Z PROC			; Luma16_sse2<8,2,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	mov	ecx, 2
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	movups	xmm1, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;

	add	eax, edx
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$07$01G@@YAIPBEH@Z ENDP			; Luma16_sse2<8,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$07$00G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$07$00G@@YAIPBEH@Z PROC			; Luma16_sse2<8,1,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();
; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32
; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));
; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));

	mov	eax, DWORD PTR _pSrc$[ebp]
	xorps	xmm3, xmm3
	movups	xmm0, XMMWORD PTR [eax]

; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));

	movaps	xmm2, xmm0

; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));

	punpckhwd xmm0, xmm3
	punpcklwd xmm2, xmm3
	paddd	xmm2, xmm0

; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;
; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm2
	punpckldq xmm2, xmm3
	punpckhdq xmm1, xmm3

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm2

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm3

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$07$00G@@YAIPBEH@Z ENDP			; Luma16_sse2<8,1,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$03$07G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$03$07G@@YAIPBEH@Z PROC			; Luma16_sse2<4,8,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	push	esi
	mov	ecx, 4
	lea	esi, DWORD PTR [edx+edx]
	npad	4
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));

	movq	xmm1, QWORD PTR [eax+edx]
	movq	xmm0, QWORD PTR [eax]

; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));
; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;

	add	eax, esi
	pslldq	xmm1, 8
	por	xmm1, xmm0
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 73   :     } else {
; 74   :       pSrc += nSrcPitch;
; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$03$07G@@YAIPBEH@Z ENDP			; Luma16_sse2<4,8,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$03$03G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$03$03G@@YAIPBEH@Z PROC			; Luma16_sse2<4,4,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	mov	edx, DWORD PTR _nSrcPitch$[ebp]
	xorps	xmm2, xmm2

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();

	mov	eax, DWORD PTR _pSrc$[ebp]

; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32

	movaps	xmm3, xmm2
	push	esi
	mov	ecx, 2
	lea	esi, DWORD PTR [edx+edx]
	npad	4
$LL4@Luma16_sse:

; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));

	movq	xmm1, QWORD PTR [eax+edx]
	movq	xmm0, QWORD PTR [eax]

; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));
; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));
; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));
; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;

	add	eax, esi
	pslldq	xmm1, 8
	por	xmm1, xmm0
	movaps	xmm0, xmm1
	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm3, xmm0
	paddd	xmm3, xmm1
	sub	ecx, 1
	jne	SHORT $LL4@Luma16_sse

; 73   :     } else {
; 74   :       pSrc += nSrcPitch;
; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm3
	punpckldq xmm3, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm3

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$03$03G@@YAIPBEH@Z ENDP			; Luma16_sse2<4,4,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\variance.cpp
;	COMDAT ??$Luma16_sse2@$03$01G@@YAIPBEH@Z
_TEXT	SEGMENT
_pSrc$ = 8						; size = 4
_nSrcPitch$ = 12					; size = 4
??$Luma16_sse2@$03$01G@@YAIPBEH@Z PROC			; Luma16_sse2<4,2,unsigned short>, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H

; 32   :   /*
; 33   :   const unsigned char *s = pSrc;
; 34   :   int sumLuma = 0;
; 35   :   for ( int j = 0; j < nBlkHeight; j++ )
; 36   :   {
; 37   :     for ( int i = 0; i < nBlkWidth; i++ )
; 38   :       sumLuma += reinterpret_cast<const pixel_t *>(s)[i];
; 39   :     s += nSrcPitch;
; 40   :   }
; 41   :   return sumLuma;
; 42   :   */
; 43   :   // down to  8x2 uint8_t
; 44   :   //      or  4x2 uint16_t
; 45   :   __m128i zero = _mm_setzero_si128();
; 46   :   __m128i sum = _mm_setzero_si128(); // 2x or 4x int is probably enough for 32x32
; 47   :   const bool two_rows = (sizeof(pixel_t) == 2 && nBlkWidth <= 4) || (sizeof(pixel_t) == 1 && nBlkWidth <= 8);
; 48   : 
; 49   :   for ( int y = 0; y < nBlkHeight; y+= (two_rows ? 2 : 1))
; 50   :   {
; 51   :     for ( int x = 0; x < nBlkWidth; x+=16 )
; 52   :     {
; 53   :       __m128i src1;
; 54   :       if (two_rows) {
; 55   :         // (8 bytes or 4 words) * 2 rows
; 56   :         src1 = _mm_or_si128(_mm_loadl_epi64((__m128i *) (pSrc + x)),_mm_slli_si128(_mm_loadl_epi64((__m128i *) (pSrc + x + nSrcPitch)),8));

	mov	ecx, DWORD PTR _pSrc$[ebp]
	xorps	xmm2, xmm2
	mov	eax, DWORD PTR _nSrcPitch$[ebp]
	movq	xmm0, QWORD PTR [ecx]
	movq	xmm1, QWORD PTR [ecx+eax]
	pslldq	xmm1, 8
	por	xmm1, xmm0

; 57   :       } else {
; 58   :         src1 = _mm_loadu_si128((__m128i *) (pSrc + x));
; 59   :       }
; 60   :       if(sizeof(pixel_t) == 1) {
; 61   :         sum = _mm_add_epi32(sum, _mm_sad_epu8(src1, zero)); 
; 62   :         // sum1_32, 0, sum2_32, 0
; 63   :         // result in two 32 bit areas at the upper and lower 64 bytes
; 64   :       }
; 65   :       else {
; 66   :         sum = _mm_add_epi32(sum, _mm_unpacklo_epi16(src1, zero));

	movaps	xmm0, xmm1

; 67   :         sum = _mm_add_epi32(sum, _mm_unpackhi_epi16(src1, zero));

	punpckhwd xmm1, xmm2
	punpcklwd xmm0, xmm2
	paddd	xmm0, xmm1

; 68   :         // result in four 32 bit sum1_32, sum2_32, sum3_32, sum4_32
; 69   :       }
; 70   :     }
; 71   :     if (two_rows) {
; 72   :       pSrc += nSrcPitch*2;
; 73   :     } else {
; 74   :       pSrc += nSrcPitch;
; 75   :     }
; 76   :   }
; 77   :   /*
; 78   :   [Low64, Hi64]
; 79   :   _mm_unpacklo_epi64(_mm_setzero_si128(), x)  [0, x0]
; 80   :   _mm_unpackhi_epi64(_mm_setzero_si128(), x)  [0, x1]
; 81   :   _mm_move_epi64(x)                           [x0, 0]
; 82   :   _mm_unpackhi_epi64(x, _mm_setzero_si128())  [x1, 0]
; 83   :   */
; 84   :   if(sizeof(pixel_t) == 2) {
; 85   :     // at 16 bits: we have 4 integers for sum: a0 a1 a2 a3
; 86   :     __m128i a0_a1 = _mm_unpacklo_epi32(sum, zero); // a0 0 a1 0
; 87   :     __m128i a2_a3 = _mm_unpackhi_epi32(sum, zero); // a2 0 a3 0

	movaps	xmm1, xmm0
	punpckldq xmm0, xmm2
	punpckhdq xmm1, xmm2

; 88   :     sum = _mm_add_epi32( a0_a1, a2_a3 ); // a0+a2, 0, a1+a3, 0

	paddd	xmm1, xmm0

; 89   : 
; 90   :     /* SSSE3:
; 91   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2, B1+B2, 0+0, 0+0
; 92   :     sum = _mm_hadd_epi32(sum, zero);  // A1+A2+B1+B2, 0+0+0+0, 0+0+0+0, 0+0+0+0
; 93   :     */
; 94   :   }
; 95   :   // sum here: two 32 bit partial result: sum1 0 sum2 0
; 96   :   __m128i sum_hi = _mm_unpackhi_epi64(sum, zero); // a1 + a3. 2 dwords right 

	movaps	xmm0, xmm1
	punpckhqdq xmm0, xmm2

; 97   :   sum = _mm_add_epi32(sum, sum_hi);  // a0 + a2 + a1 + a3

	paddd	xmm0, xmm1

; 98   :   unsigned int result = _mm_cvtsi128_si32(sum);

	movd	eax, xmm0

; 99   : 
; 100  :   return result;
; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$Luma16_sse2@$03$01G@@YAIPBEH@Z ENDP			; Luma16_sse2<4,2,unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$try_emplace@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$try_emplace@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z PROC ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::try_emplace<>, COMDAT
; _this$ = ecx

; 244  : 		return (_Try_emplace(_STD move(_Keyval),

	push	DWORD PTR __Keyval$[esp-4]
	push	DWORD PTR ___$ReturnUdt$[esp]
	call	??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 245  : 			_STD forward<_Mappedty>(_Mapval)...));
; 246  : 		}

	ret	8
??$try_emplace@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ENDP ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::try_emplace<>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z PROC ; std::addressof<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >, COMDAT
; __Val$ = ecx

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, ecx

; 726  : 	}

	ret	0
??$addressof@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z ENDP ; std::addressof<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; __Val$ = ecx

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, ecx

; 726  : 	}

	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; _this$dead$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

	ret	4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1><std::less<std::tuple<int,int,int,enum arch_t> > const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		_Mysize(0)

	mov	DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	12					; 0000000cH
??$?0ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$tuple@HHHW4arch_t@@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1><std::less<std::tuple<int,int,int,enum arch_t> > const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >, COMDAT
; _this$dead$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

	ret	4
??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>, COMDAT
; _this$dead$ = ecx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

	ret	8
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 4
$T2 = 12						; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z PROC ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >, COMDAT
; _this$ = ecx

; 208  : 		{	// fail if _Keyval present, else emplace

	push	ebx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	mov	edi, DWORD PTR __Keyval$[esp+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 208  : 		{	// fail if _Keyval present, else emplace

	mov	ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	push	edi
	call	??$_Lbound@V?$tuple@HHHW4arch_t@@@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABV?$tuple@HHHW4arch_t@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lbound<std::tuple<int,int,int,enum arch_t> >

; 43   : 		: _Ptr(_Pnode)

	mov	esi, eax

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 211  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

	je	SHORT $LN4@Try_emplac
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [esi+28]
	cmp	eax, ecx
	jl	SHORT $LN4@Try_emplac
	cmp	ecx, eax
	jl	SHORT $LN177@Try_emplac
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [esi+24]
	cmp	eax, ecx
	jl	SHORT $LN4@Try_emplac
	cmp	ecx, eax
	jl	SHORT $LN177@Try_emplac
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [esi+20]
	cmp	eax, ecx
	jl	SHORT $LN4@Try_emplac
	cmp	ecx, eax
	jl	SHORT $LN177@Try_emplac
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [esi+16]
	jl	SHORT $LN4@Try_emplac
$LN177@Try_emplac:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	BYTE PTR [eax+4], 0
	pop	ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 223  : 		}

	ret	8
$LN4@Try_emplac:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	push	ecx
	lea	eax, DWORD PTR $T2[esp+12]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 163  : 		: _Val(_STD forward<_Other>(_Arg))

	mov	DWORD PTR $T2[esp+12], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	push	eax
	push	ecx
	mov	ecx, ebx
	call	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >

; 1085 : 		return (_Insert_hint(_Where,

	push	eax

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1085 : 		return (_Insert_hint(_Where,

	mov	ecx, ebx
	push	eax
	push	esi
	lea	eax, DWORD PTR $T1[esp+20]
	push	eax
	call	??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_hint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	ecx, DWORD PTR $T1[esp+8]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	BYTE PTR [eax+4], 1
	pop	ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 223  : 		}

	ret	8
??$_Try_emplace@V?$tuple@HHHW4arch_t@@@std@@$$V@?$map@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@$$QAV?$tuple@HHHW4arch_t@@@1@@Z ENDP ; std::map<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Try_emplace<std::tuple<int,int,int,enum arch_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

	ret	0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		_Mysize(0)

	mov	DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

	ret	0
??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>, COMDAT
; __Arg$ = ecx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, ecx

; 1277 : 	}

	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edx, edx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

	ret	0
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >, COMDAT
; _this$ = ecx

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0

; 570  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 900  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 901  : 		}

	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Key, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2179 : 		}

	ret	4
?_Key@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@ABV?$tuple@HHHW4arch_t@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@ABV?$tuple@HHHW4arch_t@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	push	DWORD PTR __Keyval$[esp-4]
	call	??$_Lbound@V?$tuple@HHHW4arch_t@@@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABV?$tuple@HHHW4arch_t@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lbound<std::tuple<int,int,int,enum arch_t> >

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [ecx], eax

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	mov	eax, ecx

; 1539 : 		}

	ret	8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@2@ABV?$tuple@HHHW4arch_t@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Kfn, COMDAT
; _this$dead$ = ecx

; 2173 : 		return (_Traits::_Kfn(_Val));

	mov	eax, DWORD PTR __Val$[esp-4]

; 2174 : 		}

	ret	4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEABV?$tuple@HHHW4arch_t@@@2@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$dead$ = 16					; size = 4
_<_Val_1>$ = 20						; size = 4
_<_Val_2>$dead$ = 24					; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1083 : 		{	// insert value_type(_Val...) at _Where

	push	edi

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	push	ecx
	push	DWORD PTR _<_Val_1>$[esp+4]
	mov	edi, ecx
	push	ecx
	call	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >

; 1085 : 		return (_Insert_hint(_Where,

	push	eax

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1085 : 		return (_Insert_hint(_Where,

	mov	ecx, edi
	push	eax
	push	DWORD PTR __Where$[esp+8]
	push	DWORD PTR ___$ReturnUdt$[esp+12]
	call	??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_hint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	pop	edi

; 1086 : 			this->_Myval(_Newnode), _Newnode));
; 1087 : 		}

	ret	20					; 00000014H
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool,void,0>, COMDAT
; _this$ = ecx

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al

; 173  : 		}

	mov	eax, ecx
	ret	8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > &,bool,void,0>, COMDAT
; _this$ = ecx

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	eax, DWORD PTR __Val2$[esp-4]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al

; 173  : 		}

	mov	eax, ecx
	ret	8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > &,bool,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; _this$dead$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

	ret	4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::destroy<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >, COMDAT
; _this$dead$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

	ret	4
??$destroy@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::destroy<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>, COMDAT
; _this$dead$ = ecx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[esp-4]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

	ret	8
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::construct<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@V?$tuple@HHHW4arch_t@@@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABV?$tuple@HHHW4arch_t@@@1@@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@V?$tuple@HHHW4arch_t@@@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABV?$tuple@HHHW4arch_t@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lbound<std::tuple<int,int,int,enum arch_t> >, COMDAT
; _this$ = ecx

; 2059 : 		{	// find leftmost node not less than _Keyval

	push	edi

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edi, DWORD PTR [ecx]

; 2060 : 		_Nodeptr _Pnode = _Root();

	mov	eax, DWORD PTR [edi+4]

; 2061 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2062 : 
; 2063 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN110@Lbound
	push	ebx
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	esi, DWORD PTR __Keyval$[esp+8]
	mov	ebx, DWORD PTR [esi+12]
$LL2@Lbound:
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, ebx
	jl	SHORT $LN66@Lbound
	cmp	ebx, ecx
	jl	SHORT $LN4@Lbound
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [esi+8]
	cmp	ecx, edx
	jl	SHORT $LN66@Lbound
	cmp	edx, ecx
	jl	SHORT $LN4@Lbound
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [esi+4]
	cmp	ecx, edx
	jl	SHORT $LN66@Lbound
	cmp	edx, ecx
	jl	SHORT $LN4@Lbound
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR [esi]
	jl	SHORT $LN66@Lbound
$LN4@Lbound:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2068 : 				_Wherenode = _Pnode;

	mov	edi, eax

; 2069 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN5@Lbound
$LN66@Lbound:

; 2064 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2065 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

	mov	eax, DWORD PTR [eax+8]
$LN5@Lbound:

; 2061 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2062 : 
; 2063 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Lbound
	pop	esi
	pop	ebx
$LN110@Lbound:

; 2070 : 				}
; 2071 : 
; 2072 : 		return (_Wherenode);	// return best remembered candidate

	mov	eax, edi
	pop	edi

; 2073 : 		}

	ret	4
??$_Lbound@V?$tuple@HHHW4arch_t@@@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABV?$tuple@HHHW4arch_t@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lbound<std::tuple<int,int,int,enum arch_t> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@SAABV?$tuple@HHHW4arch_t@@@1@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z
_TEXT	SEGMENT
??$_Kfn@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@SAABV?$tuple@HHHW4arch_t@@@1@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z PROC ; std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0>::_Kfn<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>, COMDAT
; __Val$ = ecx

; 62   : 		return (_Val.first);

	mov	eax, ecx

; 63   : 		}

	ret	0
??$_Kfn@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@SAABV?$tuple@HHHW4arch_t@@@1@ABU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ENDP ; std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0>::_Kfn<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBE_NABV?$tuple@HHHW4arch_t@@@2@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBE_NABV?$tuple@HHHW4arch_t@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Compare, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	push	esi
	mov	edx, DWORD PTR [eax+12]
	mov	esi, DWORD PTR [ecx+12]
	cmp	edx, esi
	jl	SHORT $LN16@Compare
	cmp	esi, edx
	jl	SHORT $LN15@Compare
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [ecx+8]
	cmp	edx, esi
	jl	SHORT $LN16@Compare
	cmp	esi, edx
	jl	SHORT $LN15@Compare
	mov	edx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [ecx+4]
	cmp	edx, esi
	jl	SHORT $LN16@Compare
	cmp	esi, edx
	jl	SHORT $LN15@Compare
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR [ecx]
	jl	SHORT $LN16@Compare
$LN15@Compare:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2047 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

	xor	al, al
	pop	esi

; 2048 : 		}

	ret	8
$LN16@Compare:

; 2047 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

	mov	al, 1
	pop	esi

; 2048 : 		}

	ret	8
?_Compare@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IBE_NABV?$tuple@HHHW4arch_t@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 905  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 906  : 		}

	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::tuple<int,int,int,enum arch_t> >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\github\mvtools\sources\copycode.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_<_Val_0>$dead$ = 8					; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$dead$ = 16					; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >, COMDAT
; _this$ = ecx

; 880  : 		{	// allocate a node with defaults and set links and value

	push	esi

; 881  : 		_Nodeptr _Pnode = _Buynode0();

	call	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode0
	mov	edx, eax

; 603  : 		return ((reference)_Pnode->_Myval);

	lea	esi, DWORD PTR [edx+16]

; 882  : 
; 883  : 		this->_Color(_Pnode) = _Red;

	mov	WORD PTR [edx+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	esi, esi
	je	SHORT $LN65@Buynode
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 908  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

	mov	ecx, DWORD PTR _<_Val_1>$[esp]
	mov	ecx, DWORD PTR [ecx]
; File c:\github\mvtools\sources\copycode.cpp

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 895  : 		return (_Pnode);

	mov	eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 1179 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

	mov	DWORD PTR [esi+16], 0
$LN65@Buynode:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 896  : 		}

	pop	esi
	ret	12					; 0000000cH
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
$T2 = -24						; size = 8
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_hint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; _this$ = ecx

; 1655 : 		{	// try to insert node using _Where as a hint

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, ecx

; 1656 : 		const_iterator _Next;
; 1657 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1658 : 
; 1659 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1660 : 
; 1661 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1662 : 		if (_Where._Getcont() != &this->_Get_data())
; 1663 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1664 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1665 : 
; 1666 : 		if (size() == 0)

	cmp	DWORD PTR [ebx+4], 0
	mov	DWORD PTR _this$1$[ebp], ebx
	jne	SHORT $LN3@Insert_hin

; 1667 : 			return (_Insert_at(true, this->_Myhead(),

	push	DWORD PTR __Newnode$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	push	DWORD PTR [ebx]
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN3@Insert_hin:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	edi, DWORD PTR [ebx]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	esi, DWORD PTR __Where$[ebp]
	cmp	esi, DWORD PTR [edi]

; 1668 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1669 : 		else if (this->_Multi)
; 1670 : 			{	// insert even if duplicate
; 1671 : 			if (_Where == begin())
; 1672 : 				{	// insert at beginning if before first element
; 1673 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1674 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1675 : 					return (_Insert_at(true, _Where._Mynode(),
; 1676 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1677 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1678 : 				}
; 1679 : 			else if (_Where == end())
; 1680 : 				{	// insert at end if after last element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1683 : 					return (_Insert_at(false, _Rmost(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				}
; 1686 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1687 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1688 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1689 : 					this->_Kfn(_Val),
; 1690 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1691 : 				{	// insert before _Where
; 1692 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1693 : 					return (_Insert_at(false, _Next._Mynode(),
; 1694 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1695 : 				else
; 1696 : 					return (_Insert_at(true, _Where._Mynode(),
; 1697 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1698 : 				}
; 1699 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1700 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1701 : 				&& (++(_Next = _Where) == end()
; 1702 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1703 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1704 : 				{	// insert after _Where
; 1705 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1706 : 					return (_Insert_at(false, _Where._Mynode(),
; 1707 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1708 : 				else
; 1709 : 					return (_Insert_at(true, _Next._Mynode(),
; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 				}
; 1712 : 			else
; 1713 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1714 : 			}
; 1715 : 		else
; 1716 : 			{	// insert only if unique
; 1717 : 			if (_Where == begin())

	jne	SHORT $LN22@Insert_hin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1719 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	push	DWORD PTR __Val$[ebp]
	call	??R?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@QBE_NABV?$tuple@HHHW4arch_t@@@1@0@Z ; std::less<std::tuple<int,int,int,enum arch_t> >::operator()
	test	al, al
	je	$LN35@Insert_hin

; 1720 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1721 : 					return (_Insert_at(true, _Where._Mynode(),

	push	DWORD PTR __Newnode$[ebp]
	push	ecx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, ebx
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN22@Insert_hin:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, edi

; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				}
; 1724 : 			else if (_Where == end())

	jne	SHORT $LN25@Insert_hin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	mov	esi, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1726 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	push	DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1726 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	call	??R?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@QBE_NABV?$tuple@HHHW4arch_t@@@1@0@Z ; std::less<std::tuple<int,int,int,enum arch_t> >::operator()
	test	al, al
	je	$LN35@Insert_hin

; 1727 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1728 : 					return (_Insert_at(false, _Rmost(),

	push	DWORD PTR __Newnode$[ebp]
	push	ecx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, ebx
	push	0
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN25@Insert_hin:

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	mov	ebx, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	push	ebx
	call	??R?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@QBE_NABV?$tuple@HHHW4arch_t@@@1@0@Z ; std::less<std::tuple<int,int,int,enum arch_t> >::operator()
	test	al, al
	je	SHORT $LN28@Insert_hin

; 310  : 		--static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Next$[ebp]

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	mov	DWORD PTR __Next$[ebp], esi

; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	push	ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	mov	ebx, DWORD PTR __Next$[ebp]
	lea	eax, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	call	??R?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@QBE_NABV?$tuple@HHHW4arch_t@@@1@0@Z ; std::less<std::tuple<int,int,int,enum arch_t> >::operator()
	test	al, al
	je	SHORT $LN761@Insert_hin

; 1734 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1735 : 					this->_Kfn(_Val)))
; 1736 : 				{	// insert before _Where
; 1737 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

	mov	eax, DWORD PTR [ebx+8]

; 1738 : 					return (_Insert_at(false, _Next._Mynode(),

	push	DWORD PTR __Newnode$[ebp]
	push	ecx
	cmp	BYTE PTR [eax+13], 0
	mov	ecx, DWORD PTR _this$1$[ebp]
	je	SHORT $LN30@Insert_hin
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ebx
	push	0
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@Insert_hin:

; 1739 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1740 : 				else
; 1741 : 					return (_Insert_at(true, _Where._Mynode(),

	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN761@Insert_hin:
	mov	ebx, DWORD PTR __Val$[ebp]
$LN28@Insert_hin:

; 1746 : 				&& (++(_Next = _Where) == end()

	push	ebx
	lea	eax, DWORD PTR [esi+16]
	push	eax
	call	??R?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@QBE_NABV?$tuple@HHHW4arch_t@@@1@0@Z ; std::less<std::tuple<int,int,int,enum arch_t> >::operator()
	test	al, al
	je	$LN35@Insert_hin

; 273  : 		++static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Next$[ebp]

; 1746 : 				&& (++(_Next = _Where) == end()

	mov	DWORD PTR __Next$[ebp], esi

; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator++

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	ebx, DWORD PTR __Next$[ebp]
	cmp	ebx, edi

; 1746 : 				&& (++(_Next = _Where) == end()

	je	SHORT $LN33@Insert_hin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1746 : 				&& (++(_Next = _Where) == end()

	push	eax
	push	DWORD PTR __Val$[ebp]
	call	??R?$less@V?$tuple@HHHW4arch_t@@@std@@@std@@QBE_NABV?$tuple@HHHW4arch_t@@@1@0@Z ; std::less<std::tuple<int,int,int,enum arch_t> >::operator()
	test	al, al
	je	SHORT $LN35@Insert_hin
$LN33@Insert_hin:

; 1747 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1749 : 				{	// insert after _Where
; 1750 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

	mov	eax, DWORD PTR [esi+8]

; 1751 : 					return (_Insert_at(false, _Where._Mynode(),

	push	DWORD PTR __Newnode$[ebp]
	push	ecx
	cmp	BYTE PTR [eax+13], 0
	mov	ecx, DWORD PTR _this$1$[ebp]
	je	SHORT $LN34@Insert_hin
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	0
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN34@Insert_hin:

; 1752 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1753 : 				else
; 1754 : 					return (_Insert_at(true, _Next._Mynode(),

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ebx
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
__catch$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1760 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN764@Insert_hin:
$LN35@Insert_hin:

; 1761 : 		_CATCH_END
; 1762 : 
; 1763 : 		return (_Insert_nohint(_Leftish,

	push	DWORD PTR __Newnode$[ebp]
	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	push	DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$1$[ebp]
	push	eax
	call	??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_nohint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN763@Insert_hin:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_hint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > >, COMDAT
; __Arg$ = ecx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, ecx

; 1277 : 	}

	ret	0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > &>, COMDAT
; __Arg$ = ecx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, ecx

; 1277 : 	}

	ret	0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator--, COMDAT
; _this$ = ecx

; 285  : 		{	// predecrement

	push	esi
	mov	esi, ecx

; 286  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 287  : 		if (this->_Getcont() == 0
; 288  : 			|| this->_Ptr == nullptr_t{})
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 295  : 		--static_cast<_Mybase&>(*this);
; 296  : 		if (_Ptrsav == this->_Ptr)
; 297  : 			{	// report error
; 298  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 299  : 			_SCL_SECURE_OUT_OF_RANGE;
; 300  : 			}
; 301  : 
; 302  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 303  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr_t{});
; 304  : 
; 305  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 306  : 		--static_cast<_Mybase&>(*this);
; 307  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 308  : 
; 309  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--

; 311  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 312  : 
; 313  : 		return (*this);

	mov	eax, esi
	pop	esi

; 314  : 		}

	ret	0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0

; 210  : 		}

	mov	eax, ecx
	ret	0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Freenode0, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 876  : 		}

	ret	4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 849  : 		{	// allocate a non-value node

	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 83   : 		_Ptr = ::operator new(_User_size);

	push	36					; 00000024H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 849  : 		{	// allocate a non-value node

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 83   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	esi, esi
	je	SHORT $LN73@Buynode0
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi], edx
$LN73@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN120@Buynode0
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ecx], eax
$LN120@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	lea	ecx, DWORD PTR [esi+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN187@Buynode0
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ecx], eax
$LN187@Buynode0:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 864  : 		return (_Pnode);

	mov	eax, esi
	pop	esi

; 865  : 		}

	ret	0
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Newnode$[esp-4]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	pop	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1645 : 		}

	ret	4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::size, COMDAT
; _this$ = ecx

; 1171 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [ecx+4]

; 1172 : 		}

	ret	0
?size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

	mov	edx, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, edx

; 102  : 		}

	ret	0
$LN4@operator:

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN40@operator

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN23@operator
$LL22@operator:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, edx

; 102  : 		}

	ret	0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

	mov	ecx, DWORD PTR [eax+4]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN3@operator
	npad	4
$LL2@operator:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [ecx+4]
	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

	mov	eax, DWORD PTR [edx]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, edx

; 102  : 		}

	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0

; 40   : 		}

	mov	eax, ecx
	ret	0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 945  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+4]

; 946  : 		}

	ret	0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\github\mvtools\sources\copycode.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$dead$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$dead$ = 20					; size = 4
??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >, COMDAT
; _this$dead$ = ecx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[esp-4]
	test	edx, edx
	je	SHORT $LN25@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 908  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

	mov	eax, DWORD PTR _<_Args_1>$[esp-4]
	mov	ecx, DWORD PTR [eax]
; File c:\github\mvtools\sources\copycode.cpp

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 1179 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

	mov	DWORD PTR [edx+16], 0
$LN25@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	ret	16					; 00000010H
??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z PROC ; std::forward<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &>, COMDAT
; __Arg$ = ecx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, ecx

; 1277 : 	}

	ret	0
??$forward@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@YAAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@0@AAU10@@Z ENDP ; std::forward<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$dead$ = 20					; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; _this$ = ecx

; 1827 : 		{	// add node with value next to _Wherenode, to left if _Addleft

	push	edi
	mov	edi, ecx

; 1828 : 		if (max_size() - 1 <= this->_Mysize())

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, 119304646				; 071c71c6H
	jb	SHORT $LN5@Insert_at
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Node$[esp]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1831 : 			_Xlength_error("map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN716@Insert_at:
$LN5@Insert_at:
	push	ebx

; 1832 : 			}
; 1833 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1834 : 			_STD forward<_Valty>(_Val));
; 1835 : 
; 1836 : 		++this->_Mysize();
; 1837 : 		_Newnode->_Parent = _Wherenode;

	mov	ebx, DWORD PTR __Node$[esp+4]
	inc	eax
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR __Wherenode$[esp+4]
	push	esi
	mov	DWORD PTR [ebx+4], eax

; 1838 : 
; 1839 : 		if (_Wherenode == this->_Myhead())

	mov	ecx, DWORD PTR [edi]
	cmp	eax, ecx
	jne	SHORT $LN6@Insert_at

; 1840 : 			{	// first node in tree, just set head values
; 1841 : 			_Root() = _Newnode;

	mov	DWORD PTR [ecx+4], ebx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edi]

; 1842 : 			_Lmost() = _Newnode;

	mov	DWORD PTR [eax], ebx

; 1843 : 			_Rmost() = _Newnode;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+8], ebx
	jmp	SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1844 : 			}
; 1845 : 		else if (_Addleft)

	cmp	BYTE PTR __Addleft$[esp+8], 0
	je	SHORT $LN8@Insert_at

; 1846 : 			{	// add to left of _Wherenode
; 1847 : 			this->_Left(_Wherenode) = _Newnode;

	mov	DWORD PTR [eax], ebx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	ecx, DWORD PTR [edi]

; 1848 : 			if (_Wherenode == _Lmost())

	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN11@Insert_at

; 1849 : 				_Lmost() = _Newnode;

	mov	DWORD PTR [ecx], ebx

; 1850 : 			}
; 1851 : 		else

	jmp	SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1852 : 			{	// add to right of _Wherenode
; 1853 : 			this->_Right(_Wherenode) = _Newnode;

	mov	DWORD PTR [eax+8], ebx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	ecx, DWORD PTR [edi]

; 1854 : 			if (_Wherenode == _Rmost())

	cmp	eax, DWORD PTR [ecx+8]
	jne	SHORT $LN11@Insert_at

; 1855 : 				_Rmost() = _Newnode;

	mov	DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1856 : 			}
; 1857 : 
; 1858 : 		for (_Nodeptr _Pnode = _Newnode;
; 1859 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, ebx
	cmp	BYTE PTR [eax+12], 0
	jne	$LN3@Insert_at
	npad	1
$LL2@Insert_at:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [esi+4]

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	edx, DWORD PTR [eax+4]

; 1860 : 			if (this->_Parent(_Pnode)
; 1861 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

	mov	ecx, DWORD PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN12@Insert_at

; 1862 : 				{	// fixup red-red in left subtree
; 1863 : 				_Wherenode =

	mov	ecx, DWORD PTR [edx+8]

; 1864 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1865 : 				if (this->_Color(_Wherenode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	je	SHORT $LN714@Insert_at

; 1866 : 					{	// parent has two red children, blacken both
; 1867 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1868 : 					this->_Color(_Wherenode) = this->_Black;
; 1869 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1870 : 						= this->_Red;
; 1871 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1872 : 					}
; 1873 : 				else
; 1874 : 					{	// parent has red and black children
; 1875 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN16@Insert_at

; 1876 : 						{	// rotate right child to left
; 1877 : 						_Pnode = this->_Parent(_Pnode);

	mov	esi, eax

; 1878 : 						_Lrotate(_Pnode);

	mov	ecx, edi
	push	esi
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Lrotate
$LN16@Insert_at:

; 1879 : 						}
; 1880 : 					this->_Color(this->_Parent(_Pnode)) =

	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+12], 1

; 1881 : 						this->_Black;	// propagate red up
; 1882 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 1883 : 						this->_Red;
; 1884 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+4]

; 2112 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

	mov	edx, DWORD PTR [ecx]

; 2113 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx+8]

; 2115 : 		if (!this->_Isnil(this->_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN361@Insert_at

; 2116 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN361@Insert_at:

; 2117 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]

; 2119 : 		if (_Wherenode == _Root())

	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN362@Insert_at

; 2120 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], edx

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

	jmp	$LN713@Insert_at
$LN362@Insert_at:

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [ecx+4]

; 2121 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN364@Insert_at

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], edx

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

	jmp	$LN713@Insert_at
$LN364@Insert_at:

; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], edx

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

	jmp	SHORT $LN713@Insert_at
$LN12@Insert_at:

; 1888 : 				{	// fixup red-red in right subtree
; 1889 : 				_Wherenode =
; 1890 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1891 : 				if (this->_Color(_Wherenode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN17@Insert_at
$LN714@Insert_at:

; 1892 : 					{	// parent has two red children, blacken both
; 1893 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

	mov	BYTE PTR [eax+12], 1

; 1894 : 					this->_Color(_Wherenode) = this->_Black;

	mov	BYTE PTR [ecx+12], 1

; 1895 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 1896 : 						this->_Red;
; 1897 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

	mov	eax, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [eax+4]

; 1898 : 					}
; 1899 : 				else

	jmp	SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1900 : 					{	// parent has red and black children
; 1901 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN19@Insert_at

; 1902 : 						{	// rotate left child to right
; 1903 : 						_Pnode = this->_Parent(_Pnode);

	mov	esi, eax

; 1904 : 						_Rrotate(_Pnode);

	mov	ecx, edi
	push	esi
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Rrotate
$LN19@Insert_at:

; 1905 : 						}
; 1906 : 					this->_Color(this->_Parent(_Pnode)) =

	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+12], 1

; 1907 : 						this->_Black;	// propagate red up
; 1908 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 1909 : 						this->_Red;
; 1910 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+4]

; 2082 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

	mov	edx, DWORD PTR [ecx+8]

; 2083 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 2085 : 		if (!this->_Isnil(this->_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN560@Insert_at

; 2086 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN560@Insert_at:

; 2087 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]

; 2089 : 		if (_Wherenode == _Root())

	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN561@Insert_at

; 2090 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], edx

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	jmp	SHORT $LN564@Insert_at
$LN561@Insert_at:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ecx+4]

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN563@Insert_at

; 2092 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], edx

; 2093 : 		else

	jmp	SHORT $LN564@Insert_at
$LN563@Insert_at:

; 2094 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], edx
$LN564@Insert_at:

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx], ecx
$LN713@Insert_at:

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1856 : 			}
; 1857 : 
; 1858 : 		for (_Nodeptr _Pnode = _Newnode;
; 1859 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+12], 0
	je	$LL2@Insert_at
$LN3@Insert_at:

; 1911 : 					}
; 1912 : 				}
; 1913 : 
; 1914 : 		this->_Color(_Root()) = this->_Black;	// root is always black

	mov	eax, DWORD PTR [edi]
	pop	esi
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	DWORD PTR [eax], ebx
	pop	ebx
	pop	edi

; 1915 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1916 : 		}

	ret	20					; 00000014H
$LN715@Insert_at:
??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
tv1241 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$dead$ = 12					; size = 1
$T3 = 16						; size = 4
__Where$4 = 16						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_nohint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>, COMDAT
; _this$ = ecx

; 1771 : 		{	// try to insert node, on left if _Leftish

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	eax, ecx

; 1772 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	push	ebx
	push	esi
	push	edi

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	ecx, DWORD PTR [eax]

; 1773 : 		_Nodeptr _Trynode = _Root();
; 1774 : 		_Nodeptr _Wherenode = this->_Myhead();

	mov	ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	edi, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1771 : 		{	// try to insert node, on left if _Leftish

	mov	DWORD PTR _this$1$[ebp], eax

; 1775 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	al, 1
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edx, DWORD PTR [ecx+4]

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	DWORD PTR tv1241[ebp], ecx

; 1775 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$2[ebp], al

; 1777 : 		while (!this->_Isnil(_Trynode))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN3@Insert_noh
	mov	esi, DWORD PTR [edi+12]
$LL2@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	eax, DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1779 : 			_Wherenode = _Trynode;

	mov	ebx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	cmp	esi, eax
	jl	SHORT $LN142@Insert_noh
	cmp	eax, esi
	jl	SHORT $LN141@Insert_noh
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [edx+24]
	cmp	eax, ecx
	jl	SHORT $LN142@Insert_noh
	cmp	ecx, eax
	jl	SHORT $LN141@Insert_noh
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edx+20]
	cmp	eax, ecx
	jl	SHORT $LN142@Insert_noh
	cmp	ecx, eax
	jl	SHORT $LN141@Insert_noh
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [edx+16]
	jl	SHORT $LN142@Insert_noh
$LN141@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1788 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

	mov	edx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	xor	al, al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1788 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

	jmp	SHORT $LN420@Insert_noh
$LN142@Insert_noh:
	mov	edx, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	al, 1
$LN420@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1777 : 		while (!this->_Isnil(_Trynode))

	cmp	BYTE PTR [edx+13], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	BYTE PTR __Addleft$2[ebp], al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1777 : 		while (!this->_Isnil(_Trynode))

	je	SHORT $LL2@Insert_noh
	mov	ecx, DWORD PTR tv1241[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

	mov	esi, ebx
	mov	DWORD PTR __Where$4[ebp], esi

; 1789 : 				: this->_Right(_Trynode);
; 1790 : 			}
; 1791 : 
; 1792 : 		if (this->_Multi)
; 1793 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1794 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1795 : 		else
; 1796 : 			{	// insert only if unique
; 1797 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1798 : 			if (!_Addleft)

	test	al, al
	je	SHORT $LN12@Insert_noh

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	ebx, DWORD PTR [ecx]

; 1799 : 				;	// need to test if insert after is okay
; 1800 : 			else if (_Where == begin())

	jne	SHORT $LN11@Insert_noh

; 1801 : 				return (_Pairib(_Insert_at(true, _Wherenode,

	push	DWORD PTR __Newnode$[ebp]
	push	ecx
	push	ebx
	push	1
$LN421@Insert_noh:
	mov	ecx, DWORD PTR _this$1$[ebp]
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$_Insert_at@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@1@Z ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_at<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1821 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@Insert_noh:

; 310  : 		--static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Where$4[ebp]
	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--
	mov	esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 586  : 		return (_Myfirst._Val < _Right._Myfirst._Val

	mov	eax, DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [edi+12]
	cmp	eax, ecx
	jl	SHORT $LN296@Insert_noh
	cmp	ecx, eax
	jl	SHORT $LN13@Insert_noh
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [edi+8]
	cmp	eax, ecx
	jl	SHORT $LN296@Insert_noh
	cmp	ecx, eax
	jl	SHORT $LN13@Insert_noh
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [edi+4]
	cmp	eax, ecx
	jl	SHORT $LN296@Insert_noh
	cmp	ecx, eax
	jl	SHORT $LN13@Insert_noh
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, DWORD PTR [edi]
	jl	SHORT $LN296@Insert_noh
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1821 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1821 : 		}

	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1821 : 		}

	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN296@Insert_noh:

; 1802 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1803 : 			else
; 1804 : 				--_Where;	// need to test if insert before is okay
; 1805 : 
; 1806 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1807 : 				this->_Key(_Where._Mynode()),
; 1808 : 				this->_Kfn(_Val)))
; 1809 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	push	DWORD PTR __Newnode$[ebp]
	push	ecx
	push	ebx
	push	DWORD PTR __Addleft$2[ebp]
	jmp	$LN421@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	edx, 1
	push	36					; 00000024H
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1819 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN422@Insert_noh:
$LN419@Insert_noh:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@PAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Insert_nohint<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &,std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator--, COMDAT
; _this$ = ecx

; 424  : 		{	// predecrement

	push	esi
	mov	esi, ecx

; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,std::_Iterator_base0>::operator--

; 425  : 		--static_cast<_Mybase&>(*this);
; 426  : 		return (*this);

	mov	eax, esi
	pop	esi

; 427  : 		}

	ret	0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::max_size, COMDAT
; _this$dead$ = ecx

; 1176 : 		return (this->_Getal().max_size());

	mov	eax, 119304647				; 071c71c7H

; 1177 : 		}

	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::max_size, COMDAT
; _this$dead$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	mov	eax, 119304647				; 071c71c7H

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 915  : 		return (_Mypair._Get_second()._Get_first());

	mov	eax, ecx

; 916  : 		}

	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::max_size, COMDAT
; __Al$dead$ = ecx

; 869  : 		return (_Al.max_size());

	mov	eax, 119304647				; 071c71c7H

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::max_size, COMDAT
; _this$dead$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 119304647				; 071c71c7H

; 750  : 		}

	ret	0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\github\mvtools\sources\copycode.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_<_Args_0>$dead$ = 8					; size = 4
_<_Args_1>$ = 12					; size = 4
_<_Args_2>$dead$ = 16					; size = 4
??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edx, edx
	je	SHORT $LN14@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 908  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

	mov	eax, DWORD PTR _<_Args_1>$[esp-4]
	mov	ecx, DWORD PTR [eax]
; File c:\github\mvtools\sources\copycode.cpp

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 1179 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

	mov	DWORD PTR [edx+16], 0
$LN14@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	ret	0
??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@1@PAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> > >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode_if_nil<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &>, COMDAT
; _this$dead$ = ecx

; 1630 : 		return (_Node);

	mov	eax, DWORD PTR __Node$[esp-4]

; 1631 : 		}

	ret	8
??$_Buynode_if_nil@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@?$_Tree@V?$_Tmap_traits@V?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@ZU?$less@V?$tuple@HHHW4arch_t@@@std@@@2@V?$allocator@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::tuple<int,int,int,enum arch_t>,unsigned int (__cdecl*)(unsigned char const *,int),std::less<std::tuple<int,int,int,enum arch_t> >,std::allocator<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> >,0> >::_Buynode_if_nil<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\github\mvtools\sources\copycode.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$dead$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$dead$ = 20					; size = 4
??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >, COMDAT
; _this$dead$ = ecx

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[esp-4]
	test	edx, edx
	je	SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 908  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

	mov	eax, DWORD PTR _<_Args_1>$[esp-4]
	mov	ecx, DWORD PTR [eax]
; File c:\github\mvtools\sources\copycode.cpp

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 1179 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

	mov	DWORD PTR [edx+16], 0
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	ret	16					; 00000010H
??$construct@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@ABUpiecewise_construct_t@2@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@2@V?$tuple@$$V@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,void *> >::construct<std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>,std::piecewise_construct_t const &,std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\github\mvtools\sources\copycode.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0$$QAV?$tuple@HHHW4arch_t@@@std@@$$Z$$V@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@Upiecewise_construct_t@1@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0$$QAV?$tuple@HHHW4arch_t@@@std@@$$Z$$V@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@Upiecewise_construct_t@1@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)><std::tuple<int,int,int,enum arch_t> &&>, COMDAT
; _this$ = ecx
; File c:\github\mvtools\sources\copycode.cpp

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 1197 : 		}

	mov	eax, ecx

; 1179 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

	mov	DWORD PTR [ecx+16], 0

; 1197 : 		}

	ret	12					; 0000000cH
??$?0$$QAV?$tuple@HHHW4arch_t@@@std@@$$Z$$V@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@Upiecewise_construct_t@1@V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)><std::tuple<int,int,int,enum arch_t> &&>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
; File c:\github\mvtools\sources\copycode.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple
;	COMDAT ??$?0V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@AAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@AAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)><std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 908  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

	mov	eax, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [eax]
; File c:\github\mvtools\sources\copycode.cpp

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\tuple

; 1183 : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+16], 0
	ret	16					; 00000010H
??$?0V?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$tuple@HHHW4arch_t@@@std@@P6AIPBEH@Z@std@@QAE@AAV?$tuple@$$QAV?$tuple@HHHW4arch_t@@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)>::pair<std::tuple<int,int,int,enum arch_t> const ,unsigned int (__cdecl*)(unsigned char const *,int)><std::tuple<std::tuple<int,int,int,enum arch_t> &&>,std::tuple<>,0>
_TEXT	ENDS
END
