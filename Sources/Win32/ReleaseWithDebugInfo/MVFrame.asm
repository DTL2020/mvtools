; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\mvframe.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?ReduceTo@MVFrame@@QAEXPAV1@W4MVPlaneSet@@@Z	; MVFrame::ReduceTo
PUBLIC	?Pad@MVFrame@@QAEXW4MVPlaneSet@@@Z		; MVFrame::Pad
PUBLIC	?Refine@MVFrame@@QAEXW4MVPlaneSet@@@Z		; MVFrame::Refine
PUBLIC	?set_interp@MVFrame@@QAEXW4MVPlaneSet@@HH@Z	; MVFrame::set_interp
PUBLIC	?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z	; MVFrame::ChangePlane
PUBLIC	??_GMVPlane@@QAEPAXI@Z				; MVPlane::`scalar deleting destructor'
PUBLIC	??1MVFrame@@QAE@XZ				; MVFrame::~MVFrame
PUBLIC	?Update@MVFrame@@QAEXHPAEH0H0H@Z		; MVFrame::Update
PUBLIC	??0MVFrame@@QAE@HHHHHH_NHHHH0@Z			; MVFrame::MVFrame
PUBLIC	?ResetState@MVPlane@@QAEXXZ			; MVPlane::ResetState
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z$2
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvplane.h
;	COMDAT ?ResetState@MVPlane@@QAEXXZ
_TEXT	SEGMENT
?ResetState@MVPlane@@QAEXXZ PROC			; MVPlane::ResetState, COMDAT
; _this$ = ecx

; 119  :    inline void ResetState() { isRefined = isFilled = isPadded = false; }

	mov	WORD PTR [ecx+70], 0
	mov	BYTE PTR [ecx+72], 0
	ret	0
?ResetState@MVPlane@@QAEXXZ ENDP			; MVPlane::ResetState
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ??0MVFrame@@QAE@HHHHHH_NHHHH0@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_nPel$ = 16						; size = 4
_nHPad$ = 20						; size = 4
_nVPad$ = 24						; size = 4
__nMode$ = 28						; size = 4
$T2 = 32						; size = 4
$T3 = 32						; size = 4
$T4 = 32						; size = 4
__isse$ = 32						; size = 1
__xRatioUV$ = 36					; size = 4
__yRatioUV$ = 40					; size = 4
__pixelsize$ = 44					; size = 4
__bits_per_pixel$ = 48					; size = 4
_mt_flag$ = 52						; size = 1
??0MVFrame@@QAE@HHHHHH_NHHHH0@Z PROC			; MVFrame::MVFrame, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx

; 36   :    nMode = _nMode;
; 37   :    isse = _isse;

	mov	al, BYTE PTR __isse$[ebp]
	mov	edx, DWORD PTR __nMode$[ebp]
	push	ebx
	mov	ebx, ecx
	mov	DWORD PTR _this$1$[ebp], ebx
	push	esi
	push	edi
	mov	BYTE PTR [ebx+16], al

; 38   :    xRatioUV = _xRatioUV;

	mov	eax, DWORD PTR __xRatioUV$[ebp]
	mov	DWORD PTR [ebx+20], eax

; 39   :    yRatioUV = _yRatioUV;

	mov	eax, DWORD PTR __yRatioUV$[ebp]
	mov	DWORD PTR [ebx+24], eax

; 40   :    pixelsize = _pixelsize;

	mov	eax, DWORD PTR __pixelsize$[ebp]
	mov	DWORD PTR [ebx+28], eax

; 41   :    bits_per_pixel = _bits_per_pixel;

	mov	eax, DWORD PTR __bits_per_pixel$[ebp]
	mov	DWORD PTR [ebx+12], edx
	mov	DWORD PTR [ebx+32], eax

; 42   : 
; 43   :    if ( nMode & YPLANE )

	test	dl, 1
	je	SHORT $LN2@MVFrame

; 44   :       pYPlane = new MVPlane(nWidth, nHeight, nPel, nHPad, nVPad, pixelsize, bits_per_pixel, isse, mt_flag);

	push	2088					; 00000828H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T4[ebp], ecx
	push	DWORD PTR _mt_flag$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	movzx	eax, BYTE PTR [ebx+16]
	push	eax
	push	DWORD PTR [ebx+32]
	push	DWORD PTR [ebx+28]
	push	DWORD PTR _nVPad$[ebp]
	push	DWORD PTR _nHPad$[ebp]
	push	DWORD PTR _nPel$[ebp]
	push	DWORD PTR _nHeight$[ebp]
	push	DWORD PTR _nWidth$[ebp]
	call	??0MVPlane@@QAE@HHHHHHH_N0@Z		; MVPlane::MVPlane
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [ebx], eax

; 45   :    else

	jmp	SHORT $LN3@MVFrame
$LN2@MVFrame:

; 46   :       pYPlane = 0;

	mov	DWORD PTR [ebx], 0
$LN3@MVFrame:

; 47   : 
; 48   :    if ( nMode & UPLANE )

	test	BYTE PTR [ebx+12], 2
	je	SHORT $LN4@MVFrame

; 49   :       pUPlane = new MVPlane(nWidth / xRatioUV, nHeight / yRatioUV, nPel, nHPad / xRatioUV, nVPad / yRatioUV, pixelsize, bits_per_pixel, isse, mt_flag);

	push	2088					; 00000828H
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T3[ebp], edi
	push	DWORD PTR _mt_flag$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, edi
	movzx	eax, BYTE PTR [ebx+16]
	push	eax
	mov	eax, DWORD PTR _nVPad$[ebp]
	cdq
	idiv	DWORD PTR [ebx+24]
	push	DWORD PTR [ebx+32]
	push	DWORD PTR [ebx+28]
	push	eax
	mov	eax, DWORD PTR _nHPad$[ebp]
	cdq
	idiv	DWORD PTR [ebx+20]
	push	eax
	mov	eax, DWORD PTR _nHeight$[ebp]
	cdq
	idiv	DWORD PTR [ebx+24]
	push	DWORD PTR _nPel$[ebp]
	push	eax
	mov	eax, DWORD PTR _nWidth$[ebp]
	cdq
	idiv	DWORD PTR [ebx+20]
	push	eax
	call	??0MVPlane@@QAE@HHHHHHH_N0@Z		; MVPlane::MVPlane
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [ebx+4], eax

; 50   :    else

	jmp	SHORT $LN5@MVFrame
$LN4@MVFrame:

; 51   :       pUPlane = 0;

	mov	DWORD PTR [ebx+4], 0
$LN5@MVFrame:

; 52   : 
; 53   :    if ( nMode & VPLANE )

	test	BYTE PTR [ebx+12], 4
	je	SHORT $LN6@MVFrame

; 54   :       pVPlane = new MVPlane(nWidth / xRatioUV, nHeight / yRatioUV, nPel, nHPad / xRatioUV, nVPad / yRatioUV, pixelsize, bits_per_pixel, isse, mt_flag);

	push	2088					; 00000828H
	call	??2@YAPAXI@Z				; operator new
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR $T2[ebp], ebx
	mov	eax, DWORD PTR _this$1$[ebp]
	push	DWORD PTR _mt_flag$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	movzx	ecx, BYTE PTR [eax+16]
	mov	esi, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [eax+20]
	push	ecx
	push	DWORD PTR [eax+32]
	mov	ecx, ebx
	push	DWORD PTR [eax+28]
	mov	eax, DWORD PTR _nVPad$[ebp]
	cdq
	idiv	esi
	push	eax
	mov	eax, DWORD PTR _nHPad$[ebp]
	cdq
	idiv	edi
	push	eax
	mov	eax, DWORD PTR _nHeight$[ebp]
	cdq
	idiv	esi
	push	DWORD PTR _nPel$[ebp]
	push	eax
	mov	eax, DWORD PTR _nWidth$[ebp]
	cdq
	idiv	edi
	push	eax
	call	??0MVPlane@@QAE@HHHHHHH_N0@Z		; MVPlane::MVPlane
	mov	ecx, DWORD PTR _this$1$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [ecx+8], eax

; 55   :    else
; 56   :       pVPlane = 0;
; 57   : }

	mov	eax, ecx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
$LN6@MVFrame:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, ebx
	pop	edi
	mov	DWORD PTR [ebx+8], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z$0:
	push	2088					; 00000828H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z$1:
	push	2088					; 00000828H
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z$2:
	push	2088					; 00000828H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z:
	mov	eax, OFFSET __ehfuncinfo$??0MVFrame@@QAE@HHHHHH_NHHHH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MVFrame@@QAE@HHHHHH_NHHHH0@Z ENDP			; MVFrame::MVFrame
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ?Update@MVFrame@@QAEXHPAEH0H0H@Z
_TEXT	SEGMENT
__nMode$ = 8						; size = 4
_pSrcY$ = 12						; size = 4
_pitchY$ = 16						; size = 4
_pSrcU$ = 20						; size = 4
_pitchU$ = 24						; size = 4
_pSrcV$ = 28						; size = 4
_pitchV$ = 32						; size = 4
?Update@MVFrame@@QAEXHPAEH0H0H@Z PROC			; MVFrame::Update, COMDAT
; _this$ = ecx

; 62   : {

	push	ebx

; 63   : //   nMode = _nMode;
; 64   : 
; 65   :    if ( _nMode & nMode & YPLANE  ) //v2.0.8

	mov	ebx, DWORD PTR __nMode$[esp]
	mov	eax, ebx
	push	esi
	mov	esi, ecx
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN2@Update

; 66   :       pYPlane->Update(pSrcY, pitchY);

	push	DWORD PTR _pitchY$[esp+4]
	mov	ecx, DWORD PTR [esi]
	push	DWORD PTR _pSrcY$[esp+8]
	call	?Update@MVPlane@@QAEXPAEH@Z		; MVPlane::Update
$LN2@Update:

; 67   : 
; 68   :    if ( _nMode & nMode & UPLANE  )

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN3@Update

; 69   :       pUPlane->Update(pSrcU, pitchU);

	push	DWORD PTR _pitchU$[esp+4]
	mov	ecx, DWORD PTR [esi+4]
	push	DWORD PTR _pSrcU$[esp+8]
	call	?Update@MVPlane@@QAEXPAEH@Z		; MVPlane::Update
$LN3@Update:

; 70   : 
; 71   :    if ( _nMode & nMode & VPLANE  )

	and	ebx, DWORD PTR [esi+12]
	test	bl, 4
	je	SHORT $LN4@Update

; 72   :       pVPlane->Update(pSrcV, pitchV);

	push	DWORD PTR _pitchV$[esp+4]
	mov	ecx, DWORD PTR [esi+8]
	push	DWORD PTR _pSrcV$[esp+8]
	call	?Update@MVPlane@@QAEXPAEH@Z		; MVPlane::Update
$LN4@Update:

; 73   : }

	pop	esi
	pop	ebx
	ret	28					; 0000001cH
?Update@MVFrame@@QAEXHPAEH0H0H@Z ENDP			; MVFrame::Update
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ??1MVFrame@@QAE@XZ
_TEXT	SEGMENT
??1MVFrame@@QAE@XZ PROC					; MVFrame::~MVFrame, COMDAT
; _this$ = ecx

; 78   : {

	push	esi
	mov	esi, ecx
	push	edi

; 79   :    if ( nMode & YPLANE )

	test	BYTE PTR [esi+12], 1
	je	SHORT $LN13@MVFrame

; 80   :       delete pYPlane;

	mov	edi, DWORD PTR [esi]
	test	edi, edi
	je	SHORT $LN13@MVFrame
	mov	ecx, edi
	call	??1MVPlane@@QAE@XZ			; MVPlane::~MVPlane
	push	2088					; 00000828H
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN13@MVFrame:

; 81   : 
; 82   :    if ( nMode & UPLANE )

	test	BYTE PTR [esi+12], 2
	je	SHORT $LN17@MVFrame

; 83   :       delete pUPlane;

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	je	SHORT $LN17@MVFrame
	mov	ecx, edi
	call	??1MVPlane@@QAE@XZ			; MVPlane::~MVPlane
	push	2088					; 00000828H
	push	edi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN17@MVFrame:

; 84   : 
; 85   :    if ( nMode & VPLANE )

	test	BYTE PTR [esi+12], 4
	je	SHORT $LN21@MVFrame

; 86   :       delete pVPlane;

	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	je	SHORT $LN21@MVFrame
	mov	ecx, esi
	call	??1MVPlane@@QAE@XZ			; MVPlane::~MVPlane
	push	2088					; 00000828H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN21@MVFrame:
	pop	edi
	pop	esi

; 87   : }

	ret	0
??1MVFrame@@QAE@XZ ENDP					; MVFrame::~MVFrame
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GMVPlane@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GMVPlane@@QAEPAXI@Z PROC				; MVPlane::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1MVPlane@@QAE@XZ			; MVPlane::~MVPlane
	push	2088					; 00000828H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	mov	eax, esi
	pop	esi
	ret	4
??_GMVPlane@@QAEPAXI@Z ENDP				; MVPlane::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\copycode.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\copycode.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\copycode.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z
_TEXT	SEGMENT
_pNewPlane$ = 8						; size = 4
_nNewPitch$ = 12					; size = 4
__nMode$ = 16						; size = 4
?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z PROC	; MVFrame::ChangePlane, COMDAT
; _this$ = ecx

; 93   :    if ( _nMode & nMode & YPLANE )

	mov	edx, DWORD PTR _pNewPlane$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR __nMode$[esp]
	mov	eax, ebx
	push	ebp
	mov	ebp, DWORD PTR _nNewPitch$[esp+4]
	push	esi
	mov	esi, ecx
	push	edi
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN7@ChangePlan

; 94   :       pYPlane->ChangePlane(pNewPlane, nNewPitch);

	mov	edi, DWORD PTR [esi]
; File c:\github\mvtools\sources\mvplane.cpp

; 206  :    if (! isFilled)

	cmp	BYTE PTR [edi+72], 0
	jne	SHORT $LN7@ChangePlan

; 209  : 		BitBlt(pPlane[0] + nOffsetPadding, nPitch, pNewPlane, nNewPitch, (nWidth << pixelsize_shift), nHeight, isse);

	mov	eax, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\copycode.cpp

; 76   :   if ( (!height)|| (!row_size)) return;

	test	eax, eax
	je	SHORT $LN14@ChangePlan
; File c:\github\mvtools\sources\mvplane.cpp

; 209  : 		BitBlt(pPlane[0] + nOffsetPadding, nPitch, pNewPlane, nNewPitch, (nWidth << pixelsize_shift), nHeight, isse);

	mov	ecx, DWORD PTR [edi+52]
	push	eax
	mov	eax, DWORD PTR [edi+4]
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+24]
	push	eax
	mov	eax, DWORD PTR [edi]
	push	ebp
	push	edx
	mov	edx, DWORD PTR [edi+12]
	add	ecx, DWORD PTR [eax]
	call	?BitBlt@@YAXPAEHPBEHHH_N@Z		; BitBlt
	mov	edx, DWORD PTR _pNewPlane$[esp+28]
	add	esp, 16					; 00000010H
$LN14@ChangePlan:

; 210  : 		isFilled = true;

	mov	BYTE PTR [edi+72], 1
$LN7@ChangePlan:
; File c:\github\mvtools\sources\mvframe.cpp

; 96   :    if ( _nMode & nMode & UPLANE )

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN22@ChangePlan

; 97   :       pUPlane->ChangePlane(pNewPlane, nNewPitch);

	mov	edi, DWORD PTR [esi+4]
; File c:\github\mvtools\sources\mvplane.cpp

; 206  :    if (! isFilled)

	cmp	BYTE PTR [edi+72], 0
	jne	SHORT $LN22@ChangePlan

; 209  : 		BitBlt(pPlane[0] + nOffsetPadding, nPitch, pNewPlane, nNewPitch, (nWidth << pixelsize_shift), nHeight, isse);

	mov	eax, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\copycode.cpp

; 76   :   if ( (!height)|| (!row_size)) return;

	test	eax, eax
	je	SHORT $LN29@ChangePlan
; File c:\github\mvtools\sources\mvplane.cpp

; 209  : 		BitBlt(pPlane[0] + nOffsetPadding, nPitch, pNewPlane, nNewPitch, (nWidth << pixelsize_shift), nHeight, isse);

	mov	ecx, DWORD PTR [edi+52]
	push	eax
	mov	eax, DWORD PTR [edi+4]
	shl	eax, cl
	mov	ecx, DWORD PTR [edi+24]
	push	eax
	mov	eax, DWORD PTR [edi]
	push	ebp
	push	edx
	mov	edx, DWORD PTR [edi+12]
	add	ecx, DWORD PTR [eax]
	call	?BitBlt@@YAXPAEHPBEHHH_N@Z		; BitBlt
	add	esp, 16					; 00000010H
$LN29@ChangePlan:

; 210  : 		isFilled = true;

	mov	BYTE PTR [edi+72], 1
$LN22@ChangePlan:
; File c:\github\mvtools\sources\mvframe.cpp

; 99   :    if ( _nMode & nMode & VPLANE )

	and	ebx, DWORD PTR [esi+12]
	test	bl, 4
	je	SHORT $LN37@ChangePlan

; 100  :       pVPlane->ChangePlane(pNewPlane, nNewPitch);

	mov	esi, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvplane.cpp

; 206  :    if (! isFilled)

	cmp	BYTE PTR [esi+72], 0
	jne	SHORT $LN37@ChangePlan

; 209  : 		BitBlt(pPlane[0] + nOffsetPadding, nPitch, pNewPlane, nNewPitch, (nWidth << pixelsize_shift), nHeight, isse);

	mov	eax, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\copycode.cpp

; 76   :   if ( (!height)|| (!row_size)) return;

	test	eax, eax
	je	SHORT $LN44@ChangePlan
; File c:\github\mvtools\sources\mvplane.cpp

; 209  : 		BitBlt(pPlane[0] + nOffsetPadding, nPitch, pNewPlane, nNewPitch, (nWidth << pixelsize_shift), nHeight, isse);

	mov	ecx, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [esi+12]
	push	eax
	mov	eax, DWORD PTR [esi+4]
	shl	eax, cl
	mov	ecx, DWORD PTR [esi+24]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	ebp
	push	DWORD PTR _pNewPlane$[esp+24]
	add	ecx, DWORD PTR [eax]
	call	?BitBlt@@YAXPAEHPBEHHH_N@Z		; BitBlt
	add	esp, 16					; 00000010H
$LN44@ChangePlan:

; 210  : 		isFilled = true;

	mov	BYTE PTR [esi+72], 1
$LN37@ChangePlan:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; File c:\github\mvtools\sources\mvframe.cpp

; 101  : }

	ret	12					; 0000000cH
?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z ENDP	; MVFrame::ChangePlane
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ?set_interp@MVFrame@@QAEXW4MVPlaneSet@@HH@Z
_TEXT	SEGMENT
__nMode$ = 8						; size = 4
_rfilter$ = 12						; size = 4
_sharp$ = 16						; size = 4
?set_interp@MVFrame@@QAEXW4MVPlaneSet@@HH@Z PROC	; MVFrame::set_interp, COMDAT
; _this$ = ecx

; 106  : {

	push	ebx

; 107  :    if (nMode & YPLANE & _nMode)

	mov	ebx, DWORD PTR __nMode$[esp]
	mov	eax, ebx
	push	ebp
	mov	ebp, DWORD PTR _rfilter$[esp+4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR _sharp$[esp+12]
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN2@set_interp

; 108  : 	{
; 109  :       pYPlane->set_interp (rfilter, sharp);

	mov	ecx, DWORD PTR [esi]
	push	edi
	push	ebp
	call	?set_interp@MVPlane@@QAEXHH@Z		; MVPlane::set_interp
$LN2@set_interp:

; 110  : 	}
; 111  :    if (nMode & UPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN3@set_interp

; 112  : 	{
; 113  :       pUPlane->set_interp (rfilter, sharp);

	mov	ecx, DWORD PTR [esi+4]
	push	edi
	push	ebp
	call	?set_interp@MVPlane@@QAEXHH@Z		; MVPlane::set_interp
$LN3@set_interp:

; 114  : 	}
; 115  :    if (nMode & VPLANE & _nMode)

	and	ebx, DWORD PTR [esi+12]
	test	bl, 4
	je	SHORT $LN4@set_interp

; 116  : 	{
; 117  :       pVPlane->set_interp (rfilter, sharp);

	mov	ecx, DWORD PTR [esi+8]
	push	edi
	push	ebp
	call	?set_interp@MVPlane@@QAEXHH@Z		; MVPlane::set_interp
$LN4@set_interp:

; 118  : 	}
; 119  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	12					; 0000000cH
?set_interp@MVFrame@@QAEXW4MVPlaneSet@@HH@Z ENDP	; MVFrame::set_interp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ?Refine@MVFrame@@QAEXW4MVPlaneSet@@@Z
_TEXT	SEGMENT
__nMode$ = 8						; size = 4
?Refine@MVFrame@@QAEXW4MVPlaneSet@@@Z PROC		; MVFrame::Refine, COMDAT
; _this$ = ecx

; 124  : {

	push	ebx

; 125  :    if (nMode & YPLANE & _nMode)

	mov	ebx, DWORD PTR __nMode$[esp]
	mov	eax, ebx
	push	esi
	mov	esi, ecx
	push	edi
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN13@Refine

; 126  : 	{
; 127  :       pYPlane->refine_start();

	mov	ecx, DWORD PTR [esi]
; File c:\github\mvtools\sources\mvplane.cpp

; 233  : 	if (! isRefined)

	cmp	BYTE PTR [ecx+71], 0
	jne	SHORT $LN13@Refine

; 234  : 	{
; 235  : 		if (nPel == 2)

	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, 2
	jne	SHORT $LN11@Refine

; 236  : 		{
; 237  : 			_sched_refine.start (_plan_refine, *this, &MVPlane::refine_pel2);

	push	OFFSET ?refine_pel2@MVPlane@@AAEXAAVTaskData@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@@Z ; MVPlane::refine_pel2
	jmp	SHORT $LN39@Refine
$LN11@Refine:

; 238  : 		}
; 239  : 		else if (nPel == 4)

	cmp	eax, 4
	jne	SHORT $LN13@Refine

; 240  : 		{
; 241  : 			_sched_refine.start (_plan_refine, *this, &MVPlane::refine_pel4);

	push	OFFSET ?refine_pel4@MVPlane@@AAEXAAVTaskData@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@@Z ; MVPlane::refine_pel4
$LN39@Refine:
	push	ecx
	lea	eax, DWORD PTR [ecx+392]
	add	ecx, 112				; 00000070H
	push	eax
	call	?start@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@QAEXABV?$MTFlowGraphSimple@$0BA@@@AAVMVPlane@@P83@AEXAAVTaskData@1@@Z@Z ; MTFlowGraphSched<MVPlane,MTFlowGraphSimple<16>,MVPlane,16>::start
$LN13@Refine:
; File c:\github\mvtools\sources\mvframe.cpp

; 129  :    if (nMode & UPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN19@Refine

; 130  : 	{
; 131  :       pUPlane->refine_start();

	mov	ecx, DWORD PTR [esi+4]
; File c:\github\mvtools\sources\mvplane.cpp

; 233  : 	if (! isRefined)

	cmp	BYTE PTR [ecx+71], 0
	jne	SHORT $LN19@Refine

; 234  : 	{
; 235  : 		if (nPel == 2)

	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, 2
	jne	SHORT $LN17@Refine

; 236  : 		{
; 237  : 			_sched_refine.start (_plan_refine, *this, &MVPlane::refine_pel2);

	push	OFFSET ?refine_pel2@MVPlane@@AAEXAAVTaskData@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@@Z ; MVPlane::refine_pel2
	jmp	SHORT $LN40@Refine
$LN17@Refine:

; 238  : 		}
; 239  : 		else if (nPel == 4)

	cmp	eax, 4
	jne	SHORT $LN19@Refine

; 240  : 		{
; 241  : 			_sched_refine.start (_plan_refine, *this, &MVPlane::refine_pel4);

	push	OFFSET ?refine_pel4@MVPlane@@AAEXAAVTaskData@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@@Z ; MVPlane::refine_pel4
$LN40@Refine:
	push	ecx
	lea	eax, DWORD PTR [ecx+392]
	add	ecx, 112				; 00000070H
	push	eax
	call	?start@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@QAEXABV?$MTFlowGraphSimple@$0BA@@@AAVMVPlane@@P83@AEXAAVTaskData@1@@Z@Z ; MTFlowGraphSched<MVPlane,MTFlowGraphSimple<16>,MVPlane,16>::start
$LN19@Refine:
; File c:\github\mvtools\sources\mvframe.cpp

; 133  :    if (nMode & VPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 4
	je	SHORT $LN25@Refine

; 134  : 	{
; 135  :       pVPlane->refine_start();

	mov	ecx, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvplane.cpp

; 233  : 	if (! isRefined)

	cmp	BYTE PTR [ecx+71], 0
	jne	SHORT $LN25@Refine

; 234  : 	{
; 235  : 		if (nPel == 2)

	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, 2
	jne	SHORT $LN23@Refine

; 236  : 		{
; 237  : 			_sched_refine.start (_plan_refine, *this, &MVPlane::refine_pel2);

	push	OFFSET ?refine_pel2@MVPlane@@AAEXAAVTaskData@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@@Z ; MVPlane::refine_pel2
	jmp	SHORT $LN41@Refine
$LN23@Refine:

; 238  : 		}
; 239  : 		else if (nPel == 4)

	cmp	eax, 4
	jne	SHORT $LN25@Refine

; 240  : 		{
; 241  : 			_sched_refine.start (_plan_refine, *this, &MVPlane::refine_pel4);

	push	OFFSET ?refine_pel4@MVPlane@@AAEXAAVTaskData@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@@Z ; MVPlane::refine_pel4
$LN41@Refine:
	push	ecx
	lea	eax, DWORD PTR [ecx+392]
	add	ecx, 112				; 00000070H
	push	eax
	call	?start@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@QAEXABV?$MTFlowGraphSimple@$0BA@@@AAVMVPlane@@P83@AEXAAVTaskData@1@@Z@Z ; MTFlowGraphSched<MVPlane,MTFlowGraphSimple<16>,MVPlane,16>::start
$LN25@Refine:
; File c:\github\mvtools\sources\mvframe.cpp

; 138  :    if (nMode & YPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN28@Refine

; 139  : 	{
; 140  :       pYPlane->refine_wait();

	mov	edi, DWORD PTR [esi]
; File c:\github\mvtools\sources\mvplane.cpp

; 250  : 	if (! isRefined)

	cmp	BYTE PTR [edi+71], 0
	jne	SHORT $LN28@Refine

; 251  : 	{
; 252  : 		if (nPel > 1)

	cmp	DWORD PTR [edi+56], 1
	jle	SHORT $LN29@Refine

; 253  : 		{
; 254  : 			_sched_refine.wait ();

	lea	ecx, DWORD PTR [edi+112]
	call	?wait@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@QAEXXZ ; MTFlowGraphSched<MVPlane,MTFlowGraphSimple<16>,MVPlane,16>::wait
$LN29@Refine:

; 255  : 		}
; 256  : 
; 257  : 		isRefined = true;

	mov	BYTE PTR [edi+71], 1
$LN28@Refine:
; File c:\github\mvtools\sources\mvframe.cpp

; 142  :    if (nMode & UPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN32@Refine

; 143  : 	{
; 144  :       pUPlane->refine_wait();

	mov	edi, DWORD PTR [esi+4]
; File c:\github\mvtools\sources\mvplane.cpp

; 250  : 	if (! isRefined)

	cmp	BYTE PTR [edi+71], 0
	jne	SHORT $LN32@Refine

; 251  : 	{
; 252  : 		if (nPel > 1)

	cmp	DWORD PTR [edi+56], 1
	jle	SHORT $LN33@Refine

; 253  : 		{
; 254  : 			_sched_refine.wait ();

	lea	ecx, DWORD PTR [edi+112]
	call	?wait@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@QAEXXZ ; MTFlowGraphSched<MVPlane,MTFlowGraphSimple<16>,MVPlane,16>::wait
$LN33@Refine:

; 255  : 		}
; 256  : 
; 257  : 		isRefined = true;

	mov	BYTE PTR [edi+71], 1
$LN32@Refine:
; File c:\github\mvtools\sources\mvframe.cpp

; 146  :    if (nMode & VPLANE & _nMode)

	and	ebx, DWORD PTR [esi+12]
	test	bl, 4
	je	SHORT $LN36@Refine

; 147  : 	{
; 148  :       pVPlane->refine_wait();

	mov	esi, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvplane.cpp

; 250  : 	if (! isRefined)

	cmp	BYTE PTR [esi+71], 0
	jne	SHORT $LN36@Refine

; 251  : 	{
; 252  : 		if (nPel > 1)

	cmp	DWORD PTR [esi+56], 1
	jle	SHORT $LN37@Refine

; 253  : 		{
; 254  : 			_sched_refine.wait ();

	lea	ecx, DWORD PTR [esi+112]
	call	?wait@?$MTFlowGraphSched@VMVPlane@@V?$MTFlowGraphSimple@$0BA@@@V1@$0BA@@@QAEXXZ ; MTFlowGraphSched<MVPlane,MTFlowGraphSimple<16>,MVPlane,16>::wait
$LN37@Refine:

; 255  : 		}
; 256  : 
; 257  : 		isRefined = true;

	mov	BYTE PTR [esi+71], 1
$LN36@Refine:
	pop	edi
	pop	esi
	pop	ebx
; File c:\github\mvtools\sources\mvframe.cpp

; 150  : }

	ret	4
?Refine@MVFrame@@QAEXW4MVPlaneSet@@@Z ENDP		; MVFrame::Refine
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ?Pad@MVFrame@@QAEXW4MVPlaneSet@@@Z
_TEXT	SEGMENT
__nMode$ = 8						; size = 4
?Pad@MVFrame@@QAEXW4MVPlaneSet@@@Z PROC			; MVFrame::Pad, COMDAT
; _this$ = ecx

; 155  : {

	push	ebx

; 156  :    if (nMode & YPLANE & _nMode)

	mov	ebx, DWORD PTR __nMode$[esp]
	mov	eax, ebx
	push	esi
	push	edi
	mov	edi, ecx
	and	eax, DWORD PTR [edi+12]
	test	al, 1
	je	SHORT $LN7@Pad

; 157  :       pYPlane->Pad();

	mov	esi, DWORD PTR [edi]
; File c:\github\mvtools\sources\mvplane.cpp

; 219  :     if (! isPadded)

	cmp	BYTE PTR [esi+70], 0
	jne	SHORT $LN7@Pad

; 220  : 	{
; 221  :        if(pixelsize==1)

	cmp	DWORD PTR [esi+44], 1

; 222  : 		   Padding::PadReferenceFrame<uint8_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	push	DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi]
	push	DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+12]
	push	DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [ecx]
	push	DWORD PTR [esi+16]
	jne	SHORT $LN8@Pad
	call	??$PadReferenceFrame@E@Padding@@SAXPAEHHHHH@Z ; Padding::PadReferenceFrame<unsigned char>

; 223  :        else

	jmp	SHORT $LN21@Pad
$LN8@Pad:

; 224  :            Padding::PadReferenceFrame<uint16_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	call	??$PadReferenceFrame@G@Padding@@SAXPAEHHHHH@Z ; Padding::PadReferenceFrame<unsigned short>
$LN21@Pad:
	add	esp, 16					; 00000010H

; 225  :        isPadded = true;

	mov	BYTE PTR [esi+70], 1
$LN7@Pad:
; File c:\github\mvtools\sources\mvframe.cpp

; 159  :    if (nMode & UPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [edi+12]
	test	al, 2
	je	SHORT $LN12@Pad

; 160  :       pUPlane->Pad();

	mov	esi, DWORD PTR [edi+4]
; File c:\github\mvtools\sources\mvplane.cpp

; 219  :     if (! isPadded)

	cmp	BYTE PTR [esi+70], 0
	jne	SHORT $LN12@Pad

; 220  : 	{
; 221  :        if(pixelsize==1)

	cmp	DWORD PTR [esi+44], 1

; 222  : 		   Padding::PadReferenceFrame<uint8_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	push	DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi]
	push	DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+12]
	push	DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [ecx]
	push	DWORD PTR [esi+16]
	jne	SHORT $LN13@Pad
	call	??$PadReferenceFrame@E@Padding@@SAXPAEHHHHH@Z ; Padding::PadReferenceFrame<unsigned char>

; 223  :        else

	jmp	SHORT $LN22@Pad
$LN13@Pad:

; 224  :            Padding::PadReferenceFrame<uint16_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	call	??$PadReferenceFrame@G@Padding@@SAXPAEHHHHH@Z ; Padding::PadReferenceFrame<unsigned short>
$LN22@Pad:
	add	esp, 16					; 00000010H

; 225  :        isPadded = true;

	mov	BYTE PTR [esi+70], 1
$LN12@Pad:
; File c:\github\mvtools\sources\mvframe.cpp

; 162  :    if (nMode & VPLANE & _nMode)

	and	ebx, DWORD PTR [edi+12]
	test	bl, 4
	je	SHORT $LN17@Pad

; 163  :       pVPlane->Pad();

	mov	esi, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\mvplane.cpp

; 219  :     if (! isPadded)

	cmp	BYTE PTR [esi+70], 0
	jne	SHORT $LN17@Pad

; 220  : 	{
; 221  :        if(pixelsize==1)

	cmp	DWORD PTR [esi+44], 1

; 222  : 		   Padding::PadReferenceFrame<uint8_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	push	DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi]
	push	DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+12]
	push	DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [ecx]
	push	DWORD PTR [esi+16]
	jne	SHORT $LN18@Pad
	call	??$PadReferenceFrame@E@Padding@@SAXPAEHHHHH@Z ; Padding::PadReferenceFrame<unsigned char>

; 224  :            Padding::PadReferenceFrame<uint16_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	add	esp, 16					; 00000010H

; 225  :        isPadded = true;

	mov	BYTE PTR [esi+70], 1
	pop	edi
	pop	esi
	pop	ebx
; File c:\github\mvtools\sources\mvframe.cpp

; 164  : }

	ret	4
$LN18@Pad:
; File c:\github\mvtools\sources\mvplane.cpp

; 224  :            Padding::PadReferenceFrame<uint16_t>(pPlane[0], nPitch, nHPadding, nVPadding, nWidth, nHeight);

	call	??$PadReferenceFrame@G@Padding@@SAXPAEHHHHH@Z ; Padding::PadReferenceFrame<unsigned short>
	add	esp, 16					; 00000010H

; 225  :        isPadded = true;

	mov	BYTE PTR [esi+70], 1
$LN17@Pad:
	pop	edi
	pop	esi
	pop	ebx
; File c:\github\mvtools\sources\mvframe.cpp

; 164  : }

	ret	4
?Pad@MVFrame@@QAEXW4MVPlaneSet@@@Z ENDP			; MVFrame::Pad
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvframe.h
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvframe.h
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvframe.h
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\mvplane.cpp
; File c:\github\mvtools\sources\mvframe.cpp
;	COMDAT ?ReduceTo@MVFrame@@QAEXPAV1@W4MVPlaneSet@@@Z
_TEXT	SEGMENT
_pFrame$ = 8						; size = 4
__nMode$ = 12						; size = 4
?ReduceTo@MVFrame@@QAEXPAV1@W4MVPlaneSet@@@Z PROC	; MVFrame::ReduceTo, COMDAT
; _this$ = ecx

; 197  : {

	push	ebx

; 198  : 	if (nMode & YPLANE & _nMode)

	mov	ebx, DWORD PTR __nMode$[esp]
	mov	eax, ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR _pFrame$[esp+8]
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN15@ReduceTo
; File c:\github\mvtools\sources\mvframe.h

; 67   :          return pYPlane;

	mov	eax, DWORD PTR [edi]
; File c:\github\mvtools\sources\mvframe.cpp

; 200  : 		pYPlane->reduce_start (pFrame->GetPlane(YPLANE));

	mov	ecx, DWORD PTR [esi]
; File c:\github\mvtools\sources\mvplane.cpp

; 385  : 	if (! pReducedPlane->isFilled)

	cmp	BYTE PTR [eax+72], 0
	jne	SHORT $LN15@ReduceTo

; 386  : 	{
; 387  : 		_redp_ptr = pReducedPlane;
; 388  : 		_slicer_reduce.start (pReducedPlane->nHeight, *this, &MVPlane::reduce_slice, 4);

	sub	esp, 8
	mov	DWORD PTR [ecx+2084], eax
	push	ecx
	push	DWORD PTR [eax+8]
	add	ecx, 1040				; 00000410H
	call	?start@?$MTSlicer@VMVPlane@@V1@$0EA@@@QAEXHAAVMVPlane@@P82@AEXAAVTaskData@1@@ZH@Z ; MTSlicer<MVPlane,MVPlane,64>::start
$LN15@ReduceTo:
; File c:\github\mvtools\sources\mvframe.cpp

; 202  : 	if (nMode & UPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN23@ReduceTo
; File c:\github\mvtools\sources\mvframe.h

; 70   :          return pUPlane;

	mov	eax, DWORD PTR [edi+4]
; File c:\github\mvtools\sources\mvframe.cpp

; 204  : 		pUPlane->reduce_start (pFrame->GetPlane(UPLANE));

	mov	ecx, DWORD PTR [esi+4]
; File c:\github\mvtools\sources\mvplane.cpp

; 385  : 	if (! pReducedPlane->isFilled)

	cmp	BYTE PTR [eax+72], 0
	jne	SHORT $LN23@ReduceTo

; 386  : 	{
; 387  : 		_redp_ptr = pReducedPlane;
; 388  : 		_slicer_reduce.start (pReducedPlane->nHeight, *this, &MVPlane::reduce_slice, 4);

	sub	esp, 8
	mov	DWORD PTR [ecx+2084], eax
	push	ecx
	push	DWORD PTR [eax+8]
	add	ecx, 1040				; 00000410H
	call	?start@?$MTSlicer@VMVPlane@@V1@$0EA@@@QAEXHAAVMVPlane@@P82@AEXAAVTaskData@1@@ZH@Z ; MTSlicer<MVPlane,MVPlane,64>::start
$LN23@ReduceTo:
; File c:\github\mvtools\sources\mvframe.cpp

; 206  : 	if (nMode & VPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 4
	je	SHORT $LN31@ReduceTo
; File c:\github\mvtools\sources\mvframe.h

; 73   :          return pVPlane;

	mov	eax, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\mvframe.cpp

; 208  : 		pVPlane->reduce_start (pFrame->GetPlane(VPLANE));

	mov	ecx, DWORD PTR [esi+8]
; File c:\github\mvtools\sources\mvplane.cpp

; 385  : 	if (! pReducedPlane->isFilled)

	cmp	BYTE PTR [eax+72], 0
	jne	SHORT $LN31@ReduceTo

; 386  : 	{
; 387  : 		_redp_ptr = pReducedPlane;
; 388  : 		_slicer_reduce.start (pReducedPlane->nHeight, *this, &MVPlane::reduce_slice, 4);

	sub	esp, 8
	mov	DWORD PTR [ecx+2084], eax
	push	ecx
	push	DWORD PTR [eax+8]
	add	ecx, 1040				; 00000410H
	call	?start@?$MTSlicer@VMVPlane@@V1@$0EA@@@QAEXHAAVMVPlane@@P82@AEXAAVTaskData@1@@ZH@Z ; MTSlicer<MVPlane,MVPlane,64>::start
$LN31@ReduceTo:
; File c:\github\mvtools\sources\mvframe.cpp

; 211  : 	if (nMode & YPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN5@ReduceTo

; 212  : 	{
; 213  : 		pYPlane->reduce_wait ();

	mov	ecx, DWORD PTR [esi]
	call	?reduce_wait@MVPlane@@QAEXXZ		; MVPlane::reduce_wait
$LN5@ReduceTo:

; 214  : 	}
; 215  : 	if (nMode & UPLANE & _nMode)

	mov	eax, ebx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN6@ReduceTo

; 216  : 	{
; 217  : 		pUPlane->reduce_wait ();

	mov	ecx, DWORD PTR [esi+4]
	call	?reduce_wait@MVPlane@@QAEXXZ		; MVPlane::reduce_wait
$LN6@ReduceTo:

; 218  : 	}
; 219  : 	if (nMode & VPLANE & _nMode)

	and	ebx, DWORD PTR [esi+12]
	test	bl, 4
	je	SHORT $LN7@ReduceTo

; 220  : 	{
; 221  : 		pVPlane->reduce_wait ();

	mov	ecx, DWORD PTR [esi+8]
	call	?reduce_wait@MVPlane@@QAEXXZ		; MVPlane::reduce_wait
$LN7@ReduceTo:

; 222  : 	}
; 223  : }

	pop	edi
	pop	esi
	pop	ebx
	ret	8
?ReduceTo@MVFrame@@QAEXPAV1@W4MVPlaneSet@@@Z ENDP	; MVFrame::ReduceTo
_TEXT	ENDS
END
