; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\mvsuper.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CB@IHFJFFCH@MSuper?3?5Clip?5must?5be?5YUV?5or?5YUY2@ ; `string'
PUBLIC	??_C@_0CC@IHKHDDNM@MSuper?3?5pel?5has?5to?5be?51?5or?52?5or?5@ ; `string'
PUBLIC	??_C@_0DC@MLILKLDG@MSuper?3?5pelclip?5frame?5size?5must?5@ ; `string'
PUBLIC	??_C@_0CB@DCBDLAIL@MSuper?3?5Get?5src?5frame?5?$CFd?5clip?5?$CFd@ ; `string'
PUBLIC	??_7MVSuper@@6B@				; MVSuper::`vftable'
PUBLIC	??_R3MVSuper@@8					; MVSuper::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@MVSuper@@8			; MVSuper::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2MVSuper@@8					; MVSuper::`RTTI Base Class Array'
PUBLIC	??_R0?AVMVSuper@@@8				; MVSuper `RTTI Type Descriptor'
PUBLIC	??_R4MVSuper@@6B@				; MVSuper::`RTTI Complete Object Locator'
;	COMDAT ??_R4MVSuper@@6B@
rdata$r	SEGMENT
??_R4MVSuper@@6B@ DD 00H				; MVSuper::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMVSuper@@@8
	DD	FLAT:??_R3MVSuper@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMVSuper@@@8
data$r	SEGMENT
??_R0?AVMVSuper@@@8 DD FLAT:??_7type_info@@6B@		; MVSuper `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMVSuper@@', 00H
data$r	ENDS
;	COMDAT ??_R2MVSuper@@8
rdata$r	SEGMENT
??_R2MVSuper@@8 DD FLAT:??_R1A@?0A@EA@MVSuper@@8	; MVSuper::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@GenericVideoFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IClip@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MVSuper@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MVSuper@@8 DD FLAT:??_R0?AVMVSuper@@@8	; MVSuper::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MVSuper@@8
rdata$r	ENDS
;	COMDAT ??_R3MVSuper@@8
rdata$r	SEGMENT
??_R3MVSuper@@8 DD 00H					; MVSuper::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2MVSuper@@8
rdata$r	ENDS
;	COMDAT ??_7MVSuper@@6B@
CONST	SEGMENT
??_7MVSuper@@6B@ DD FLAT:??_R4MVSuper@@6B@		; MVSuper::`vftable'
	DD	FLAT:?GetVersion@IClip@@UAGHXZ
	DD	FLAT:?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	FLAT:?GetParity@GenericVideoFilter@@UAG_NH@Z
	DD	FLAT:?GetAudio@GenericVideoFilter@@UAGXPAX_J1PAVIScriptEnvironment@@@Z
	DD	FLAT:?SetCacheHints@MVSuper@@UAGHHH@Z
	DD	FLAT:?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ
	DD	FLAT:??_EMVSuper@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0CB@DCBDLAIL@MSuper?3?5Get?5src?5frame?5?$CFd?5clip?5?$CFd@
CONST	SEGMENT
??_C@_0CB@DCBDLAIL@MSuper?3?5Get?5src?5frame?5?$CFd?5clip?5?$CFd@ DB 'MSu'
	DB	'per: Get src frame %d clip %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MLILKLDG@MSuper?3?5pelclip?5frame?5size?5must?5@
CONST	SEGMENT
??_C@_0DC@MLILKLDG@MSuper?3?5pelclip?5frame?5size?5must?5@ DB 'MSuper: pe'
	DB	'lclip frame size must be Pel of source!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IHKHDDNM@MSuper?3?5pel?5has?5to?5be?51?5or?52?5or?5@
CONST	SEGMENT
??_C@_0CC@IHKHDDNM@MSuper?3?5pel?5has?5to?5be?51?5or?52?5or?5@ DB 'MSuper'
	DB	': pel has to be 1 or 2 or 4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IHFJFFCH@MSuper?3?5Clip?5must?5be?5YUV?5or?5YUY2@
CONST	SEGMENT
??_C@_0CB@IHFJFFCH@MSuper?3?5Clip?5must?5be?5YUV?5or?5YUY2@ DB 'MSuper: C'
	DB	'lip must be YUV or YUY2', 00H		; `string'
PUBLIC	?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ; MVSuper::GetFrame
PUBLIC	??1MVSuper@@UAE@XZ				; MVSuper::~MVSuper
PUBLIC	??_GMVSuper@@UAEPAXI@Z				; MVSuper::`scalar deleting destructor'
PUBLIC	?SetCacheHints@MVSuper@@UAGHHH@Z		; MVSuper::SetCacheHints
PUBLIC	??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z ; MVSuper::MVSuper
EXTRN	??_EMVSuper@@UAEPAXI@Z:PROC			; MVSuper::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1MVSuper@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1MVSuper@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1MVSuper@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MVSuper@@UAE@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1MVSuper@@UAE@XZ$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$6
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvsuper.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvsuper.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvsuper.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvframe.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
;	COMDAT ??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
_params$ = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__child$ = 8						; size = 4
__hPad$ = 12						; size = 4
__vPad$ = 16						; size = 4
__pel$ = 20						; size = 4
__levels$ = 24						; size = 4
__chroma$ = 28						; size = 1
__sharp$ = 32						; size = 4
__rfilter$ = 36						; size = 4
__pelclip$ = 40						; size = 4
_rfilter$1$ = 44					; size = 4
tv1397 = 44						; size = 4
__isse$ = 44						; size = 1
_nMode$1$ = 48						; size = 4
_nLevelsMax$1$ = 48					; size = 4
tv1340 = 48						; size = 4
$T2 = 48						; size = 4
$T3 = 48						; size = 4
$T4 = 48						; size = 4
__planar$ = 48						; size = 1
_mt_flag$ = 52						; size = 1
_env$ = 56						; size = 4
??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z PROC ; MVSuper::MVSuper, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	ebx, ecx
	push	edi
	mov	DWORD PTR _this$[ebp], ebx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; File c:\github\mvtools\sources\include\avisynth.h

; 937  :   PClip(const PClip& x) AVS_BakedCode( AVS_LinkCall(PClip_CONSTRUCTOR1)(x) )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
; File c:\github\mvtools\sources\mvsuper.cpp

; 47   : :	GenericVideoFilter (_child)

	push	ecx
	mov	ecx, esp
; File c:\github\mvtools\sources\include\avisynth.h

; 937  :   PClip(const PClip& x) AVS_BakedCode( AVS_LinkCall(PClip_CONSTRUCTOR1)(x) )

	test	eax, eax
	je	SHORT $LN51@MVSuper
	cmp	DWORD PTR [eax], 232			; 000000e8H
	jbe	SHORT $LN51@MVSuper
	mov	eax, DWORD PTR [eax+232]
	lea	edx, DWORD PTR __child$[ebp]
	push	edx
	call	eax
$LN51@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 47   : :	GenericVideoFilter (_child)

	mov	ecx, ebx
	call	??0GenericVideoFilter@@QAE@VPClip@@@Z	; GenericVideoFilter::GenericVideoFilter
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; File c:\github\mvtools\sources\include\avisynth.h

; 937  :   PClip(const PClip& x) AVS_BakedCode( AVS_LinkCall(PClip_CONSTRUCTOR1)(x) )

	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
; File c:\github\mvtools\sources\mvsuper.cpp

; 50   : {

	mov	DWORD PTR [ebx], OFFSET ??_7MVSuper@@6B@
; File c:\github\mvtools\sources\include\avisynth.h

; 937  :   PClip(const PClip& x) AVS_BakedCode( AVS_LinkCall(PClip_CONSTRUCTOR1)(x) )

	test	edx, edx
	je	SHORT $LN55@MVSuper
	cmp	DWORD PTR [edx], 232			; 000000e8H
	jbe	SHORT $LN55@MVSuper
	lea	eax, DWORD PTR __pelclip$[ebp]
	push	eax
	mov	eax, DWORD PTR [edx+232]
	lea	ecx, DWORD PTR [ebx+88]
	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN55@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 49   : ,	_mt_flag (mt_flag)

	mov	eax, DWORD PTR _mt_flag$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR [ebx+157], al

; 51   : 	planar = _planar;

	mov	al, BYTE PTR __planar$[ebp]
	mov	BYTE PTR [ebx+93], al

; 52   : 
; 53   : 	nWidth = vi.width;

	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR [ebx+96], eax

; 54   : 
; 55   : 	nHeight = vi.height;

	mov	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR [ebx+100], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 623  :   bool IsYUV() const AVS_BakedCode(return AVS_LinkCall(IsYUV)())

	test	edx, edx
	je	SHORT $LN174@MVSuper
	cmp	DWORD PTR [edx], 24			; 00000018H
	jbe	SHORT $LN173@MVSuper
	mov	eax, DWORD PTR [edx+24]
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvsuper.cpp

; 57   :     if (!vi.IsYUV() && !vi.IsYUY2 ()) // YUY2 is also YUV but let's see what is supported

	test	al, al
	jne	SHORT $LN181@MVSuper
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN173@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 624  :   bool IsYUY2() const AVS_BakedCode(return AVS_LinkCall(IsYUY2)())

	test	edx, edx
	je	SHORT $LN174@MVSuper
	cmp	DWORD PTR [edx], 28			; 0000001cH
	jbe	SHORT $LN174@MVSuper
	mov	eax, DWORD PTR [edx+28]
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvsuper.cpp

; 57   :     if (!vi.IsYUV() && !vi.IsYUY2 ()) // YUY2 is also YUV but let's see what is supported

	test	al, al
	jne	SHORT $LN181@MVSuper
$LN174@MVSuper:

; 58   :                                       //if (! vi.IsYV12 () && ! vi.IsYUY2 ())
; 59   :     {
; 60   :         env->ThrowError ("MSuper: Clip must be YUV or YUY2");

	mov	esi, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0CB@IHFJFFCH@MSuper?3?5Clip?5must?5be?5YUV?5or?5YUY2@
	push	esi
	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+20]
	add	esp, 8
	jmp	SHORT $LN4@MVSuper
$LN181@MVSuper:
	mov	esi, DWORD PTR _env$[ebp]
$LN4@MVSuper:
	mov	eax, DWORD PTR __pel$[ebp]
	mov	DWORD PTR [ebx+72], eax

; 61   :     }
; 62   : 
; 63   : 	nPel = _pel;
; 64   : 	if (( nPel != 1 ) && ( nPel != 2 ) && ( nPel != 4 ))

	cmp	eax, 1
	je	SHORT $LN5@MVSuper
	cmp	eax, 2
	je	SHORT $LN5@MVSuper
	cmp	eax, 4
	je	SHORT $LN5@MVSuper

; 65   : 	{
; 66   : 		env->ThrowError("MSuper: pel has to be 1 or 2 or 4");

	mov	eax, DWORD PTR [esi]
	push	OFFSET ??_C@_0CC@IHKHDDNM@MSuper?3?5pel?5has?5to?5be?51?5or?52?5or?5@
	push	esi
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN5@MVSuper:

; 67   : 	}
; 68   : 
; 69   : 	nHPad = _hPad;

	mov	eax, DWORD PTR __hPad$[ebp]

; 70   : 	nVPad = _vPad;
; 71   : 	rfilter = _rfilter;
; 72   : 	sharp = _sharp; // pel2 interpolation type
; 73   : 	isse = _isse;
; 74   : 
; 75   : 	chroma = _chroma;
; 76   : 	nModeYUV = chroma ? YUVPLANES : YPLANE;

	mov	esi, 1
	mov	cl, BYTE PTR __chroma$[ebp]
	mov	edx, 7
	mov	DWORD PTR [ebx+64], eax
	test	cl, cl
	mov	eax, DWORD PTR __vPad$[ebp]
	mov	DWORD PTR [ebx+68], eax
	mov	eax, DWORD PTR __rfilter$[ebp]
	mov	DWORD PTR [ebx+84], eax
	mov	eax, DWORD PTR __sharp$[ebp]
	mov	DWORD PTR [ebx+80], eax
	mov	al, BYTE PTR __isse$[ebp]
	mov	BYTE PTR [ebx+92], al
	mov	eax, esi
	cmovne	eax, edx
	mov	BYTE PTR [ebx+120], cl
	mov	DWORD PTR [ebx+140], eax

; 77   : 
; 78   : 	pixelType = vi.pixel_type;

	mov	eax, DWORD PTR [ebx+36]
	mov	DWORD PTR [ebx+124], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 707  :   bool IsY()   const AVS_BakedCode( return AVS_LinkCallOpt(IsY, IsY8) )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN79@MVSuper
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 552				; 00000228H
	ja	SHORT $LN69@MVSuper
	cmp	ecx, 48					; 00000030H
	jbe	SHORT $LN175@MVSuper
	mov	eax, DWORD PTR [eax+48]
	jmp	SHORT $LN183@MVSuper
$LN69@MVSuper:
	mov	eax, DWORD PTR [eax+552]
$LN183@MVSuper:
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvsuper.cpp

; 79   :     if(!vi.IsY()) {

	test	al, al
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jne	SHORT $LN6@MVSuper
$LN175@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 624  :   bool IsYUY2() const AVS_BakedCode(return AVS_LinkCall(IsYUY2)())

	test	eax, eax
	je	SHORT $LN79@MVSuper
	cmp	DWORD PTR [eax], 28			; 0000001cH
	jbe	SHORT $LN19@MVSuper
	mov	eax, DWORD PTR [eax+28]
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvsuper.cpp

; 80   :         yRatioUV = vi.IsYUY2() ? 1 : (1 << vi.GetPlaneHeightSubsampling(PLANAR_U));

	test	al, al
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	je	SHORT $LN19@MVSuper
	mov	edx, esi
	jmp	SHORT $LN20@MVSuper
$LN19@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 662  :   int GetPlaneHeightSubsampling(int plane) const AVS_BakedCode(return AVS_LinkCall(GetPlaneHeightSubsampling)(plane))

	test	eax, eax
	je	SHORT $LN79@MVSuper
	cmp	DWORD PTR [eax], 148			; 00000094H
	jbe	SHORT $LN79@MVSuper
	mov	eax, DWORD PTR [eax+148]
	lea	ecx, DWORD PTR [ebx+16]
	push	2
	call	eax
	mov	ecx, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN80@MVSuper
$LN6@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 83   :         yRatioUV = 1; // n/a

	mov	DWORD PTR [ebx+104], esi

; 84   :         xRatioUV = 1; // n/a

	jmp	SHORT $LN22@MVSuper
$LN79@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 662  :   int GetPlaneHeightSubsampling(int plane) const AVS_BakedCode(return AVS_LinkCall(GetPlaneHeightSubsampling)(plane))

	xor	ecx, ecx
$LN80@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 80   :         yRatioUV = vi.IsYUY2() ? 1 : (1 << vi.GetPlaneHeightSubsampling(PLANAR_U));

	mov	edx, esi
	shl	edx, cl
$LN20@MVSuper:
	mov	DWORD PTR [ebx+104], edx
; File c:\github\mvtools\sources\include\avisynth.h

; 624  :   bool IsYUY2() const AVS_BakedCode(return AVS_LinkCall(IsYUY2)())

	test	eax, eax
	je	SHORT $LN87@MVSuper
	cmp	DWORD PTR [eax], 28			; 0000001cH
	jbe	SHORT $LN21@MVSuper
	mov	eax, DWORD PTR [eax+28]
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	movzx	eax, al
; File c:\github\mvtools\sources\mvsuper.cpp

; 81   :         xRatioUV = vi.IsYUY2() ? 2 : (1 << vi.GetPlaneWidthSubsampling(PLANAR_U)); // for YV12 and YUY2, really do not used and assumed to 2

	test	al, al
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	je	SHORT $LN21@MVSuper
	mov	esi, 2
	jmp	SHORT $LN22@MVSuper
$LN21@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 661  :   int GetPlaneWidthSubsampling(int plane) const AVS_BakedCode(return AVS_LinkCall(GetPlaneWidthSubsampling)(plane))

	test	eax, eax
	je	SHORT $LN87@MVSuper
	cmp	DWORD PTR [eax], 144			; 00000090H
	jbe	SHORT $LN87@MVSuper
	mov	eax, DWORD PTR [eax+144]
	lea	ecx, DWORD PTR [ebx+16]
	push	2
	call	eax
	mov	ecx, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN88@MVSuper
$LN87@MVSuper:
	xor	ecx, ecx
$LN88@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 81   :         xRatioUV = vi.IsYUY2() ? 2 : (1 << vi.GetPlaneWidthSubsampling(PLANAR_U)); // for YV12 and YUY2, really do not used and assumed to 2

	shl	esi, cl
$LN22@MVSuper:
	mov	DWORD PTR [ebx+108], esi
; File c:\github\mvtools\sources\include\avisynth.h

; 692  :   int ComponentSize() const AVS_BakedCode(return AVS_LinkCallOptDefault(ComponentSize, 1))

	test	eax, eax
	je	SHORT $LN91@MVSuper
	cmp	DWORD PTR [eax], 532			; 00000214H
	jbe	SHORT $LN91@MVSuper
	mov	eax, DWORD PTR [eax+532]
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	mov	ecx, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN92@MVSuper
$LN91@MVSuper:
	mov	ecx, 1
$LN92@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 86   :     pixelsize = vi.ComponentSize();

	mov	DWORD PTR [ebx+112], ecx
; File c:\github\mvtools\sources\include\avisynth.h

; 695  :   int BitsPerComponent() const AVS_BakedCode(return AVS_LinkCallOptDefault(BitsPerComponent, 8))

	test	eax, eax
	je	SHORT $LN95@MVSuper
	cmp	DWORD PTR [eax], 536			; 00000218H
	jbe	SHORT $LN95@MVSuper
	mov	eax, DWORD PTR [eax+536]
	lea	ecx, DWORD PTR [ebx+16]
	call	eax
	jmp	SHORT $LN96@MVSuper
$LN95@MVSuper:
	mov	eax, 8
$LN96@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 91   : 	while (PlaneHeightLuma(vi.height, nLevelsMax, yRatioUV, nVPad) >= yRatioUV*2 &&

	mov	edi, DWORD PTR [ebx+104]
	xor	edx, edx
	mov	DWORD PTR [ebx+116], eax
	mov	eax, DWORD PTR __levels$[ebp]
	mov	DWORD PTR [ebx+76], eax
$LN184@MVSuper:
; File c:\github\mvtools\sources\mvsuper.h

; 41   : 	int height = src_height;

	mov	eax, DWORD PTR [ebx+20]
; File c:\github\mvtools\sources\mvsuper.cpp

; 90   : 	int nLevelsMax = 0;

	mov	DWORD PTR _nLevelsMax$1$[ebp], edx
; File c:\github\mvtools\sources\mvsuper.h

; 43   : 	for (int i=1; i<=level; i++)

	cmp	edx, 1
	jl	SHORT $LN99@MVSuper

; 44   : 	{
; 45   : //		height = (height/2) - ((height/2) % yRatioUV) ;
; 46   : 		height = vpad >= yRatioUV ? ((height/yRatioUV + 1) / 2) * yRatioUV : ((height/yRatioUV) / 2) * yRatioUV;

	mov	esi, DWORD PTR [ebx+68]
	mov	ecx, edx
$LL159@MVSuper:
	cdq
	idiv	edi
	cmp	esi, edi
	jl	SHORT $LN160@MVSuper
	inc	eax
$LN160@MVSuper:
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	eax, edi

; 43   : 	for (int i=1; i<=level; i++)

	sub	ecx, 1
	jne	SHORT $LL159@MVSuper
	mov	edx, DWORD PTR _nLevelsMax$1$[ebp]
$LN99@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 91   : 	while (PlaneHeightLuma(vi.height, nLevelsMax, yRatioUV, nVPad) >= yRatioUV*2 &&

	lea	ecx, DWORD PTR [edi+edi]
	cmp	eax, ecx
	jl	SHORT $LN3@MVSuper
	mov	esi, DWORD PTR [ebx+108]
; File c:\github\mvtools\sources\mvsuper.h

; 54   : 	int width = src_width;

	mov	ecx, DWORD PTR [ebx+16]

; 55   : 
; 56   : 	for (int i=1; i<=level; i++)

	cmp	edx, 1
	jl	SHORT $LN106@MVSuper

; 57   : 	{
; 58   : //		width = (width/2) - ((width/2) % xRatioUV) ;
; 59   : 		width = hpad >= xRatioUV ? ((width/xRatioUV + 1) / 2) * xRatioUV : ((width/xRatioUV) / 2) * xRatioUV;

	mov	DWORD PTR tv1397[ebp], edx
$LL163@MVSuper:
	mov	eax, ecx
	cdq
	idiv	esi
	cmp	DWORD PTR [ebx+64], esi
	jl	SHORT $LN164@MVSuper
	inc	eax
$LN164@MVSuper:
	cdq
	mov	ecx, esi
	sub	eax, edx
	sar	eax, 1
	imul	ecx, eax

; 55   : 
; 56   : 	for (int i=1; i<=level; i++)

	sub	DWORD PTR tv1397[ebp], 1
	jne	SHORT $LL163@MVSuper
	mov	edx, DWORD PTR _nLevelsMax$1$[ebp]
$LN106@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 91   : 	while (PlaneHeightLuma(vi.height, nLevelsMax, yRatioUV, nVPad) >= yRatioUV*2 &&

	lea	eax, DWORD PTR [esi+esi]
	cmp	ecx, eax
	jl	SHORT $LN3@MVSuper

; 92   : 	       PlaneWidthLuma(vi.width, nLevelsMax, xRatioUV, nHPad) >= xRatioUV*2) // at last two pixels width and height of chroma
; 93   : 	{
; 94   : 		nLevelsMax++;

	inc	edx

; 95   : 	}

	jmp	SHORT $LN184@MVSuper
$LN3@MVSuper:

; 96   : 	if (nLevels<=0 || nLevels> nLevelsMax) nLevels = nLevelsMax;

	mov	eax, DWORD PTR __levels$[ebp]
	test	eax, eax
	jle	SHORT $LN9@MVSuper
	cmp	eax, edx
	jle	SHORT $LN8@MVSuper
$LN9@MVSuper:
	mov	DWORD PTR [ebx+76], edx
$LN8@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 945  :   operator void*() const { return p; }

	mov	ecx, DWORD PTR [ebx+88]
; File c:\github\mvtools\sources\mvsuper.cpp

; 98   : 	usePelClip = false;

	mov	BYTE PTR [ebx+128], 0

; 99   : 	if (pelclip && (nPel >= 2))

	test	ecx, ecx
	je	$LN14@MVSuper
	cmp	DWORD PTR [ebx+72], 2
	jl	$LN14@MVSuper
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN30@MVSuper
; File c:\github\mvtools\sources\include\avisynth.h

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN29@MVSuper
$LN30@MVSuper:
	push	ecx
; File c:\github\mvtools\sources\mvsuper.cpp

; 101  : 		if (pelclip->GetVideoInfo().width == vi.width*nPel &&

	call	eax
$LN29@MVSuper:
	mov	ecx, DWORD PTR [ebx+16]
	imul	ecx, DWORD PTR [ebx+72]
	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LN11@MVSuper
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	ecx, DWORD PTR [ebx+88]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN32@MVSuper

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN31@MVSuper
$LN32@MVSuper:
	push	ecx
; File c:\github\mvtools\sources\mvsuper.cpp

; 101  : 		if (pelclip->GetVideoInfo().width == vi.width*nPel &&

	call	eax
$LN31@MVSuper:
	mov	ecx, DWORD PTR [ebx+20]
	imul	ecx, DWORD PTR [ebx+72]
	cmp	DWORD PTR [eax+4], ecx
	jne	SHORT $LN11@MVSuper

; 102  : 		    pelclip->GetVideoInfo().height == vi.height*nPel)
; 103  : 		{
; 104  : 			usePelClip = true;

	mov	BYTE PTR [ebx+128], 1

; 105  : 			isPelClipPadded = false;

	mov	BYTE PTR [ebx+156], 0
	jmp	SHORT $LN14@MVSuper
$LN11@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	ecx, DWORD PTR [ebx+88]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN34@MVSuper

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN33@MVSuper
$LN34@MVSuper:
	push	ecx
; File c:\github\mvtools\sources\mvsuper.cpp

; 107  : 		else if (pelclip->GetVideoInfo().width == (vi.width + nHPad*2)*nPel &&

	call	eax
$LN33@MVSuper:
	mov	edx, DWORD PTR [ebx+64]
	mov	ecx, DWORD PTR [ebx+16]
	lea	ecx, DWORD PTR [ecx+edx*2]
	imul	ecx, DWORD PTR [ebx+72]
	cmp	DWORD PTR [eax], ecx
	jne	SHORT $LN13@MVSuper
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	ecx, DWORD PTR [ebx+88]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN36@MVSuper

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN35@MVSuper
$LN36@MVSuper:
	push	ecx
; File c:\github\mvtools\sources\mvsuper.cpp

; 107  : 		else if (pelclip->GetVideoInfo().width == (vi.width + nHPad*2)*nPel &&

	call	eax
$LN35@MVSuper:
	mov	edx, DWORD PTR [ebx+68]
	mov	ecx, DWORD PTR [ebx+20]
	lea	ecx, DWORD PTR [ecx+edx*2]
	imul	ecx, DWORD PTR [ebx+72]
	cmp	DWORD PTR [eax+4], ecx
	jne	SHORT $LN13@MVSuper

; 108  : 		         pelclip->GetVideoInfo().height == (vi.height+ nVPad*2)*nPel)
; 109  : 		{
; 110  : 			usePelClip = true;

	mov	BYTE PTR [ebx+128], 1

; 111  : 			isPelClipPadded = true;

	mov	BYTE PTR [ebx+156], 1

; 112  : 		}
; 113  : 		else

	jmp	SHORT $LN14@MVSuper
$LN13@MVSuper:

; 114  : 		{
; 115  : 			env->ThrowError("MSuper: pelclip frame size must be Pel of source!");

	mov	ecx, DWORD PTR _env$[ebp]
	push	OFFSET ??_C@_0DC@MLILKLDG@MSuper?3?5pelclip?5frame?5size?5must?5@
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+20]
	add	esp, 8
$LN14@MVSuper:

; 116  : 		}
; 117  : 	}
; 118  : 
; 119  : 	nSuperWidth = nWidth + 2*nHPad;

	mov	ecx, DWORD PTR [ebx+64]
	mov	eax, DWORD PTR [ebx+96]

; 120  : 	nSuperHeight = PlaneSuperOffset(false, nHeight, nLevels, nPel, nVPad, nSuperWidth*pixelsize, yRatioUV)/(nSuperWidth*pixelsize);

	mov	esi, DWORD PTR [ebx+112]
	mov	edi, DWORD PTR [ebx+104]
	mov	edx, DWORD PTR [ebx+100]
	lea	eax, DWORD PTR [eax+ecx*2]
	xor	cl, cl
	imul	esi, eax
	push	edi
	mov	DWORD PTR tv1340[ebp], eax
	mov	DWORD PTR [ebx+132], eax
	push	esi
	push	DWORD PTR [ebx+68]
	push	DWORD PTR [ebx+72]
	push	DWORD PTR [ebx+76]
	call	?PlaneSuperOffset@@YAI_NHHHHHH@Z	; PlaneSuperOffset
	xor	edx, edx
	add	esp, 20					; 00000014H
	div	esi
	mov	DWORD PTR [ebx+136], eax

; 121  : 	if (yRatioUV==2 && nSuperHeight&1) nSuperHeight++; // even

	cmp	edi, 2
	jne	SHORT $LN15@MVSuper
	test	al, 1
	je	SHORT $LN15@MVSuper
	inc	eax
	mov	DWORD PTR [ebx+136], eax
$LN15@MVSuper:

; 122  : 	vi.width = nSuperWidth;

	mov	eax, DWORD PTR tv1340[ebp]
	mov	DWORD PTR [ebx+16], eax

; 123  : 	vi.height = nSuperHeight;

	mov	eax, DWORD PTR [ebx+136]
	mov	DWORD PTR [ebx+20], eax

; 124  : 
; 125  : 	if ( (pixelType & VideoInfo::CS_YUY2) == VideoInfo::CS_YUY2 && !planar)

	mov	eax, DWORD PTR [ebx+124]
	and	eax, 1610612740				; 60000004H
	cmp	eax, 1610612740				; 60000004H
	jne	$LN17@MVSuper
	cmp	BYTE PTR [ebx+93], 0
	jne	$LN17@MVSuper

; 126  : 	{
; 127  : 		SrcPlanes =  new YUY2Planes(nWidth, nHeight);

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, eax
	push	DWORD PTR [ebx+100]
	push	DWORD PTR [ebx+96]
	call	??0YUY2Planes@@QAE@HH@Z			; YUY2Planes::YUY2Planes

; 128  : //		DstPlanes =  new YUY2Planes(nSuperWidth, nSuperHeight); // other size!
; 129  : 		if (usePelClip)

	cmp	BYTE PTR [ebx+128], 0
	mov	DWORD PTR [ebx+144], eax
	je	SHORT $LN17@MVSuper

; 131  : 			SrcPelPlanes =  new YUY2Planes(pelclip->GetVideoInfo().width, pelclip->GetVideoInfo().height);

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	esi, DWORD PTR [ebx+88]
	mov	ecx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+20]
	cmp	ecx, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN38@MVSuper

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	edi, DWORD PTR [esi+16]
	jmp	SHORT $LN37@MVSuper
$LN38@MVSuper:
	push	esi
; File c:\github\mvtools\sources\mvsuper.cpp

; 131  : 			SrcPelPlanes =  new YUY2Planes(pelclip->GetVideoInfo().width, pelclip->GetVideoInfo().height);

	call	ecx
	mov	edi, eax
$LN37@MVSuper:
	mov	ecx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+20]
	cmp	ecx, OFFSET ?GetVideoInfo@GenericVideoFilter@@UAGABUVideoInfo@@XZ ; GenericVideoFilter::GetVideoInfo
	jne	SHORT $LN40@MVSuper
; File c:\github\mvtools\sources\include\avisynth.h

; 1108 :   const VideoInfo& __stdcall GetVideoInfo() { return vi; }

	lea	eax, DWORD PTR [esi+16]
	jmp	SHORT $LN39@MVSuper
$LN40@MVSuper:
	push	esi
; File c:\github\mvtools\sources\mvsuper.cpp

; 131  : 			SrcPelPlanes =  new YUY2Planes(pelclip->GetVideoInfo().width, pelclip->GetVideoInfo().height);

	call	ecx
$LN39@MVSuper:
	push	DWORD PTR [edi+4]
	mov	ecx, DWORD PTR $T3[ebp]
	push	DWORD PTR [eax]
	call	??0YUY2Planes@@QAE@HH@Z			; YUY2Planes::YUY2Planes
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	DWORD PTR [ebx+148], eax
$LN17@MVSuper:

; 132  : 		}
; 133  : 	}
; 134  : 
; 135  : 	SuperParams64Bits params;
; 136  : 
; 137  : 	params.nHeight = nHeight;

	mov	ax, WORD PTR [ebx+100]
	mov	WORD PTR _params$[ebp], ax

; 138  : 	params.nHPad = nHPad;

	mov	al, BYTE PTR [ebx+64]
	mov	BYTE PTR _params$[ebp+2], al

; 139  : 	params.nVPad = nVPad;

	mov	al, BYTE PTR [ebx+68]
	mov	BYTE PTR _params$[ebp+3], al

; 140  : 	params.nPel = nPel;

	mov	al, BYTE PTR [ebx+72]
	mov	BYTE PTR _params$[ebp+4], al

; 141  : 	params.nModeYUV = nModeYUV;

	mov	al, BYTE PTR [ebx+140]
	mov	BYTE PTR _params$[ebp+5], al

; 142  : 	params.nLevels = nLevels;

	mov	al, BYTE PTR [ebx+76]
	mov	BYTE PTR _params$[ebp+6], al

; 143  : 
; 144  : 
; 145  : 	// pack parameters to fake audio properties
; 146  : 	memcpy(&vi.num_audio_samples, &params, 8); //nHeight + (nHPad<<16) + (nVPad<<24) + ((_int64)(nPel)<<32) + ((_int64)nModeYUV<<40) + ((_int64)nLevels<<48);

	mov	eax, DWORD PTR _params$[ebp]
	mov	DWORD PTR [ebx+48], eax
	mov	eax, DWORD PTR _params$[ebp+4]

; 147  : 	vi.audio_samples_per_second = 0; // kill audio
; 148  : 
; 149  : 	// LDS: why not nModeYUV?
; 150  : //	pSrcGOF = new MVGroupOfFrames(nLevels, nWidth, nHeight, nPel, nHPad, nVPad, nModeYUV, isse, yRatioUV, mt_flag);
; 151  : 	pSrcGOF = new MVGroupOfFrames(nLevels, nWidth, nHeight, nPel, nHPad, nVPad, YUVPLANES, isse, xRatioUV, yRatioUV, pixelsize, bits_per_pixel, mt_flag);

	push	44					; 0000002cH
	mov	DWORD PTR [ebx+52], eax
	mov	DWORD PTR [ebx+40], 0
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR $T2[ebp], ecx
	push	DWORD PTR _mt_flag$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	push	DWORD PTR [ebx+116]
	movzx	eax, BYTE PTR [ebx+92]
	push	DWORD PTR [ebx+112]
	push	DWORD PTR [ebx+104]
	push	DWORD PTR [ebx+108]
	push	eax
	push	7
	push	DWORD PTR [ebx+68]
	push	DWORD PTR [ebx+64]
	push	DWORD PTR [ebx+72]
	push	DWORD PTR [ebx+100]
	push	DWORD PTR [ebx+96]
	push	DWORD PTR [ebx+76]
	call	??0MVGroupOfFrames@@QAE@HHHHHHH_NHHHH0@Z ; MVGroupOfFrames::MVGroupOfFrames

; 153  : 	pSrcGOF->set_interp (nModeYUV, rfilter, sharp);

	mov	ecx, DWORD PTR [ebx+140]
	mov	edx, DWORD PTR [ebx+84]
	mov	edi, DWORD PTR [ebx+80]
	mov	DWORD PTR [ebx+152], eax
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 95   :    pFrames[0]->set_interp (nMode, rfilter, sharp);

	mov	eax, DWORD PTR [eax+4]
; File c:\github\mvtools\sources\mvsuper.cpp

; 153  : 	pSrcGOF->set_interp (nModeYUV, rfilter, sharp);

	mov	DWORD PTR _rfilter$1$[ebp], edx
	mov	DWORD PTR _nMode$1$[ebp], ecx
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 95   :    pFrames[0]->set_interp (nMode, rfilter, sharp);

	mov	esi, DWORD PTR [eax]
; File c:\github\mvtools\sources\mvframe.cpp

; 107  :    if (nMode & YPLANE & _nMode)

	mov	eax, ecx
	and	eax, DWORD PTR [esi+12]
	test	al, 1
	je	SHORT $LN140@MVSuper

; 108  : 	{
; 109  :       pYPlane->set_interp (rfilter, sharp);

	mov	ecx, DWORD PTR [esi]
	push	edi
	push	edx
	call	?set_interp@MVPlane@@QAEXHH@Z		; MVPlane::set_interp
	mov	ecx, DWORD PTR _nMode$1$[ebp]
	mov	edx, DWORD PTR _rfilter$1$[ebp]
$LN140@MVSuper:

; 110  : 	}
; 111  :    if (nMode & UPLANE & _nMode)

	mov	eax, ecx
	and	eax, DWORD PTR [esi+12]
	test	al, 2
	je	SHORT $LN141@MVSuper

; 112  : 	{
; 113  :       pUPlane->set_interp (rfilter, sharp);

	mov	ecx, DWORD PTR [esi+4]
	push	edi
	push	edx
	call	?set_interp@MVPlane@@QAEXHH@Z		; MVPlane::set_interp
	mov	ecx, DWORD PTR _nMode$1$[ebp]
$LN141@MVSuper:

; 114  : 	}
; 115  :    if (nMode & VPLANE & _nMode)

	and	ecx, DWORD PTR [esi+12]
	test	cl, 4
	je	SHORT $LN142@MVSuper

; 116  : 	{
; 117  :       pVPlane->set_interp (rfilter, sharp);

	mov	ecx, DWORD PTR [esi+8]
	push	edi
	push	DWORD PTR _rfilter$1$[ebp]
	call	?set_interp@MVPlane@@QAEXHH@Z		; MVPlane::set_interp
$LN142@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 948  :   ~PClip() AVS_BakedCode( AVS_LinkCall(PClip_DESTRUCTOR)() )

	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN146@MVSuper
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN146@MVSuper
	mov	eax, DWORD PTR [eax+248]
	lea	ecx, DWORD PTR __child$[ebp]
	call	eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN146@MVSuper:
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	test	eax, eax
	je	SHORT $LN176@MVSuper
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN176@MVSuper
	mov	eax, DWORD PTR [eax+248]
	lea	ecx, DWORD PTR __pelclip$[ebp]
	call	eax
$LN176@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 156  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, ebx
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$0:
	lea	ecx, DWORD PTR __pelclip$[ebp]
	jmp	??1PClip@@QAE@XZ			; PClip::~PClip
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$1:
	lea	ecx, DWORD PTR __child$[ebp]
	jmp	??1PClip@@QAE@XZ			; PClip::~PClip
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1GenericVideoFilter@@UAE@XZ
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	??1PClip@@QAE@XZ			; PClip::~PClip
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$6:
	push	28					; 0000001cH
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$7:
	push	44					; 0000002cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$8:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z$9:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MVSuper@@QAE@VPClip@@HHHH_NHH0111PAVIScriptEnvironment@@@Z ENDP ; MVSuper::MVSuper
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\debugprintf.h
;	COMDAT ?DebugPrintf@@YAXPADZZ
_TEXT	SEGMENT
_fmt$ = 8						; size = 4
?DebugPrintf@@YAXPADZZ PROC				; DebugPrintf, COMDAT

; 52   :   __noop(fmt); 	// Nothing
; 53   : }

	ret	0
?DebugPrintf@@YAXPADZZ ENDP				; DebugPrintf
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvsuper.h
;	COMDAT ?SetCacheHints@MVSuper@@UAGHHH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_cachehints$ = 12					; size = 4
_frame_range$ = 16					; size = 4
?SetCacheHints@MVSuper@@UAGHHH@Z PROC			; MVSuper::SetCacheHints, COMDAT

; 146  :      return cachehints == CACHE_GET_MTMODE ? MT_MULTI_INSTANCE : 0;

	xor	eax, eax
	mov	ecx, 2
	cmp	DWORD PTR _cachehints$[esp-4], 509	; 000001fdH
	cmove	eax, ecx

; 147  :    }

	ret	12					; 0000000cH
?SetCacheHints@MVSuper@@UAGHHH@Z ENDP			; MVSuper::SetCacheHints
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GMVSuper@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMVSuper@@UAEPAXI@Z PROC				; MVSuper::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1MVSuper@@UAE@XZ			; MVSuper::~MVSuper
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	push	160					; 000000a0H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GMVSuper@@UAEPAXI@Z ENDP				; MVSuper::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\yuy2planes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
;	COMDAT ??1MVSuper@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1MVSuper@@UAE@XZ PROC					; MVSuper::~MVSuper, COMDAT
; _this$ = ecx

; 159  : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1MVSuper@@UAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 160  : 	if ( (pixelType & VideoInfo::CS_YUY2) == VideoInfo::CS_YUY2  && !planar)

	mov	eax, DWORD PTR [edi+124]
	and	eax, 1610612740				; 60000004H
	mov	DWORD PTR [edi], OFFSET ??_7MVSuper@@6B@
	cmp	eax, 1610612740				; 60000004H
	jne	SHORT $LN7@MVSuper
	cmp	BYTE PTR [edi+93], 0
	jne	SHORT $LN7@MVSuper

; 161  : 	{
; 162  : 		delete SrcPlanes;

	mov	ebx, DWORD PTR [edi+144]
	test	ebx, ebx
	je	SHORT $LN12@MVSuper
; File c:\github\mvtools\sources\yuy2planes.cpp

; 37   :   _aligned_free(pSrc);

	push	DWORD PTR [ebx]
	mov	esi, DWORD PTR __imp___aligned_free
	call	esi

; 38   :   _aligned_free(pSrcU);

	push	DWORD PTR [ebx+4]
	call	esi

; 39   :   _aligned_free(pSrcV);

	push	DWORD PTR [ebx+8]
	call	esi
	push	28					; 0000001cH
	push	ebx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 20					; 00000014H
$LN12@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 164  : 		if (usePelClip)

	cmp	BYTE PTR [edi+128], 0
	je	SHORT $LN7@MVSuper

; 165  : 		{
; 166  : 			delete SrcPelPlanes;

	mov	ecx, DWORD PTR [edi+148]
	test	ecx, ecx
	je	SHORT $LN7@MVSuper
	push	ecx
	call	??_GYUY2Planes@@QAEPAXI@Z
$LN7@MVSuper:

; 167  : 		}
; 168  : 	}
; 169  : 	delete pSrcGOF;

	mov	esi, DWORD PTR [edi+152]
	test	esi, esi
	je	SHORT $LN19@MVSuper
	mov	ecx, esi
	call	??1MVGroupOfFrames@@QAE@XZ		; MVGroupOfFrames::~MVGroupOfFrames
	push	44					; 0000002cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN19@MVSuper:
; File c:\github\mvtools\sources\include\avisynth.h

; 948  :   ~PClip() AVS_BakedCode( AVS_LinkCall(PClip_DESTRUCTOR)() )

	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN24@MVSuper
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN24@MVSuper
	mov	eax, DWORD PTR [eax+248]
; File c:\github\mvtools\sources\mvsuper.cpp

; 172  : }

	lea	ecx, DWORD PTR [edi+88]
; File c:\github\mvtools\sources\include\avisynth.h

; 948  :   ~PClip() AVS_BakedCode( AVS_LinkCall(PClip_DESTRUCTOR)() )

	call	eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN24@MVSuper:
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	test	eax, eax
	je	SHORT $LN38@MVSuper
	cmp	DWORD PTR [eax], 248			; 000000f8H
	jbe	SHORT $LN38@MVSuper
	mov	eax, DWORD PTR [eax+248]
	lea	ecx, DWORD PTR [edi+8]
	call	eax
$LN38@MVSuper:
; File c:\github\mvtools\sources\mvsuper.cpp

; 172  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
; File c:\github\mvtools\sources\include\avisynth.h

; 919  :   virtual AVSC_CC ~IClip() {}

	mov	DWORD PTR [edi], OFFSET ??_7IClip@@6B@
; File c:\github\mvtools\sources\mvsuper.cpp

; 172  : }

	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MVSuper@@UAE@XZ$3:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$??1MVSuper@@UAE@XZ$5:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$??1MVSuper@@UAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1MVSuper@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MVSuper@@UAE@XZ ENDP					; MVSuper::~MVSuper
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\yuy2planes.h
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\yuy2planes.h
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvframe.h
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvframe.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvframe.h
; File c:\github\mvtools\sources\mvsuper.cpp
; File c:\github\mvtools\sources\mvgroupofframes.cpp
; File c:\github\mvtools\sources\include\avisynth.h
; File c:\github\mvtools\sources\mvsuper.cpp
;	COMDAT ?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
_TEXT	SEGMENT
$T2 = -64						; size = 4
tv1084 = -60						; size = 4
_nDstPitchY$1$ = -60					; size = 4
tv1087 = -56						; size = 4
_pDstU$1$ = -56						; size = 4
tv1086 = -52						; size = 4
_pDstV$1$ = -52						; size = 4
_pSrcU$1$ = -48						; size = 4
tv1085 = -44						; size = 4
_pDstY$1$ = -44						; size = 4
_srcFrames$1$ = -40					; size = 4
_pSrcV$1$ = -40						; size = 4
_nSrcPelPitchY$1$ = -36					; size = 4
_nSrcPitchUV$1$ = -32					; size = 4
_nSrcPitchY$1$ = -28					; size = 4
_pSrcY$1$ = -24						; size = 4
_pSrcPelV$1$ = -20					; size = 4
_nSrcPelPitchUV$1$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_srcPel$ = 8						; size = 4
_this$ = 8						; size = 4
_nSrcPelPitchUV$ = 12					; size = 4
_nSrcPelPitchY$ = 12					; size = 4
_pSrcPelV$ = 12						; size = 4
_pSrcPelU$ = 12						; size = 4
_pSrcPelY$ = 12						; size = 4
___$ReturnUdt$ = 12					; size = 4
tv1089 = 16						; size = 4
_pSrcPelY$1$ = 16					; size = 4
$T3 = 16						; size = 4
_n$ = 16						; size = 4
_src$ = 20						; size = 4
_env$ = 20						; size = 4
?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z PROC ; MVSuper::GetFrame, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 187  : 	PVideoFrame src = child->GetFrame(n, env);

	lea	edx, DWORD PTR _src$[ebp]
	push	edi
	mov	DWORD PTR $T2[ebp], 0
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	edi, DWORD PTR _this$[ebp]
; File c:\github\mvtools\sources\mvsuper.cpp

; 187  : 	PVideoFrame src = child->GetFrame(n, env);

	mov	esi, DWORD PTR _env$[ebp]
	mov	ebx, DWORD PTR _n$[ebp]
	push	esi
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	eax, DWORD PTR [edi+8]
; File c:\github\mvtools\sources\mvsuper.cpp

; 187  : 	PVideoFrame src = child->GetFrame(n, env);

	push	ebx
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+4]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; File c:\github\mvtools\sources\include\avisynth.h

; 970  :   PVideoFrame() AVS_BakedCode( AVS_LinkCall(PVideoFrame_CONSTRUCTOR0)() )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN31@GetFrame
	cmp	DWORD PTR [eax], 252			; 000000fcH
	jbe	SHORT $LN31@GetFrame
	mov	eax, DWORD PTR [eax+252]
	lea	ecx, DWORD PTR _srcPel$[ebp]
	call	eax
$LN31@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 188  : 	PVideoFrame srcPel;

	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 189  : 	if (usePelClip)

	cmp	BYTE PTR [edi+128], 0
	je	SHORT $LN40@GetFrame
; File c:\github\mvtools\sources\include\avisynth.h

; 942  :   IClip* operator->() const { return p; }

	mov	eax, DWORD PTR [edi+88]
; File c:\github\mvtools\sources\mvsuper.cpp

; 190  : 	srcPel = pelclip->GetFrame(n, env);

	lea	edx, DWORD PTR $T3[ebp]
	push	esi
	push	ebx
	push	edx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+4]
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; File c:\github\mvtools\sources\include\avisynth.h

; 974  :   void operator=(const PVideoFrame& x) AVS_BakedCode( AVS_LinkCall(PVideoFrame_OPERATOR_ASSIGN1)(x) )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN37@GetFrame
	cmp	DWORD PTR [eax], 268			; 0000010cH
	jbe	SHORT $LN37@GetFrame
	mov	eax, DWORD PTR [eax+268]
	push	ecx
	lea	ecx, DWORD PTR _srcPel$[ebp]
	call	eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN37@GetFrame:

; 982  :   ~PVideoFrame() AVS_BakedCode( AVS_LinkCall(PVideoFrame_DESTRUCTOR)() )

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	test	eax, eax
	je	SHORT $LN41@GetFrame
	cmp	DWORD PTR [eax], 272			; 00000110H
	jbe	SHORT $LN41@GetFrame
	mov	eax, DWORD PTR [eax+272]
	lea	ecx, DWORD PTR $T3[ebp]
	call	eax
$LN41@GetFrame:
	mov	BYTE PTR __$EHRec$[ebp+8], 2
$LN40@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 192  : 	PVideoFrame	dst = env->NewVideoFrame(vi);

	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edi+16]
	push	32					; 00000020H
	push	eax
	push	DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	call	DWORD PTR [ecx+56]

; 327  : 	return dst;

	mov	eax, DWORD PTR [edi+124]
	and	eax, 1610612740				; 60000004H
	mov	DWORD PTR $T2[ebp], 1
	cmp	eax, 1610612740				; 60000004H
	jne	$LN3@GetFrame

; 197  : 		if (!planar)

	cmp	BYTE PTR [edi+93], 0
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
; File c:\github\mvtools\sources\mvsuper.cpp

; 197  : 		if (!planar)

	jne	$LN5@GetFrame
; File c:\github\mvtools\sources\yuy2planes.h

; 41   :    inline unsigned char *GetPtr() const { return pSrc; }

	mov	eax, DWORD PTR [edi+144]
	mov	ecx, DWORD PTR [eax]

; 42   :    inline unsigned char *GetPtrU() const { return pSrcU; }

	mov	ebx, DWORD PTR [eax+4]

; 41   :    inline unsigned char *GetPtr() const { return pSrc; }

	mov	DWORD PTR _pSrcY$1$[ebp], ecx

; 43   :    inline unsigned char *GetPtrV() const { return pSrcV; }

	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pSrcV$1$[ebp], ecx

; 39   :    inline int GetPitch() const { return srcPitch; }

	mov	ecx, DWORD PTR [eax+20]

; 40   :    inline int GetPitchUV() const { return srcPitchUV; }

	mov	eax, DWORD PTR [eax+24]

; 42   :    inline unsigned char *GetPtrU() const { return pSrcU; }

	mov	DWORD PTR _pSrcU$1$[ebp], ebx

; 39   :    inline int GetPitch() const { return srcPitch; }

	mov	DWORD PTR _nSrcPitchY$1$[ebp], ecx

; 40   :    inline int GetPitchUV() const { return srcPitchUV; }

	mov	DWORD PTR _nSrcPitchUV$1$[ebp], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	esi, esi
	je	SHORT $LN58@GetFrame
	cmp	DWORD PTR [esi], 192			; 000000c0H
	jbe	SHORT $LN58@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [esi+192]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR tv1089[ebp], eax
	jmp	SHORT $LN59@GetFrame
$LN58@GetFrame:
	mov	DWORD PTR tv1089[ebp], 0
$LN59@GetFrame:

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	esi, esi
	je	SHORT $LN64@GetFrame
	cmp	DWORD PTR [esi], 212			; 000000d4H
	jbe	SHORT $LN64@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [esi+212]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	ecx, eax
	jmp	SHORT $LN65@GetFrame
$LN64@GetFrame:
	xor	ecx, ecx
$LN65@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 204  : 			YUY2ToPlanes(src->GetReadPtr(), src->GetPitch(), nWidth, nHeight,

	movzx	eax, BYTE PTR [edi+92]
	mov	edx, DWORD PTR tv1089[ebp]
	push	eax
	push	DWORD PTR _nSrcPitchUV$1$[ebp]
	push	DWORD PTR _pSrcV$1$[ebp]
	push	ebx
	push	DWORD PTR _nSrcPitchY$1$[ebp]
	push	DWORD PTR _pSrcY$1$[ebp]
	push	DWORD PTR [edi+100]
	push	DWORD PTR [edi+96]
	call	?YUY2ToPlanes@@YAXPBEHHH0H00H_N@Z	; YUY2ToPlanes
	add	esp, 32					; 00000020H

; 205  : 			pSrcY, nSrcPitchY, pSrcU, pSrcV, nSrcPitchUV, isse);
; 206  : 			if (usePelClip)

	cmp	BYTE PTR [edi+128], 0
	je	$LN291@GetFrame
; File c:\github\mvtools\sources\yuy2planes.h

; 41   :    inline unsigned char *GetPtr() const { return pSrc; }

	mov	eax, DWORD PTR [edi+148]
	mov	ecx, DWORD PTR [eax]

; 42   :    inline unsigned char *GetPtrU() const { return pSrcU; }

	mov	ebx, DWORD PTR [eax+4]

; 41   :    inline unsigned char *GetPtr() const { return pSrc; }

	mov	DWORD PTR _pSrcPelY$1$[ebp], ecx

; 43   :    inline unsigned char *GetPtrV() const { return pSrcV; }

	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pSrcPelV$1$[ebp], ecx

; 39   :    inline int GetPitch() const { return srcPitch; }

	mov	ecx, DWORD PTR [eax+20]

; 40   :    inline int GetPitchUV() const { return srcPitchUV; }

	mov	eax, DWORD PTR [eax+24]

; 39   :    inline int GetPitch() const { return srcPitch; }

	mov	DWORD PTR _nSrcPelPitchY$1$[ebp], ecx

; 40   :    inline int GetPitchUV() const { return srcPitchUV; }

	mov	DWORD PTR _nSrcPelPitchUV$1$[ebp], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 799  :   int GetHeight(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetHeight)(plane) )

	test	esi, esi
	je	SHORT $LN80@GetFrame
	cmp	DWORD PTR [esi], 200			; 000000c8H
	jbe	SHORT $LN80@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+200]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR tv1087[ebp], eax
	jmp	SHORT $LN81@GetFrame
$LN80@GetFrame:
	mov	DWORD PTR tv1087[ebp], 0
$LN81@GetFrame:

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN86@GetFrame
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN86@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR tv1086[ebp], eax
	jmp	SHORT $LN87@GetFrame
$LN86@GetFrame:
	mov	DWORD PTR tv1086[ebp], 0
$LN87@GetFrame:

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	esi, esi
	je	SHORT $LN92@GetFrame
	cmp	DWORD PTR [esi], 192			; 000000c0H
	jbe	SHORT $LN92@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+192]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR tv1085[ebp], eax
	jmp	SHORT $LN93@GetFrame
$LN92@GetFrame:
	mov	DWORD PTR tv1085[ebp], 0
$LN93@GetFrame:

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	esi, esi
	je	SHORT $LN98@GetFrame
	cmp	DWORD PTR [esi], 212			; 000000d4H
	jbe	SHORT $LN98@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+212]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR tv1084[ebp], eax
	jmp	SHORT $LN99@GetFrame
$LN98@GetFrame:
	mov	DWORD PTR tv1084[ebp], 0
$LN99@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 213  : 				YUY2ToPlanes(srcPel->GetReadPtr(), srcPel->GetPitch(), srcPel->GetRowSize()/2, srcPel->GetHeight(),

	movzx	eax, BYTE PTR [edi+92]
	mov	ecx, DWORD PTR _nSrcPelPitchUV$1$[ebp]
	push	eax
	mov	eax, DWORD PTR tv1086[ebp]
	push	ecx
	push	DWORD PTR _pSrcPelV$1$[ebp]
	mov	ecx, DWORD PTR tv1084[ebp]
	push	ebx
	push	DWORD PTR _nSrcPelPitchY$1$[ebp]
	cdq
	push	DWORD PTR _pSrcPelY$1$[ebp]
	sub	eax, edx
	mov	edx, DWORD PTR tv1085[ebp]
	push	DWORD PTR tv1087[ebp]
	sar	eax, 1
	push	eax
	call	?YUY2ToPlanes@@YAXPBEHHH0H00H_N@Z	; YUY2ToPlanes
	add	esp, 32					; 00000020H

; 214  : 				pSrcPelY, nSrcPelPitchY, pSrcPelU, pSrcPelV, nSrcPelPitchUV, isse);
; 215  : 			}
; 216  : 		}
; 217  : 		else

	jmp	$LN8@GetFrame
$LN5@GetFrame:
; File c:\github\mvtools\sources\include\avisynth.h

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	esi, esi
	je	SHORT $LN104@GetFrame
	cmp	DWORD PTR [esi], 212			; 000000d4H
	jbe	SHORT $LN104@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [esi+212]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR _pSrcY$1$[ebp], eax
	jmp	SHORT $LN105@GetFrame
$LN104@GetFrame:
	mov	DWORD PTR _pSrcY$1$[ebp], 0
$LN105@GetFrame:

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN110@GetFrame
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN110@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN111@GetFrame
$LN110@GetFrame:
	xor	eax, eax
$LN111@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 220  : 			pSrcU = pSrcY + src->GetRowSize()/2;

	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	add	ebx, DWORD PTR _pSrcY$1$[ebp]
	mov	DWORD PTR _pSrcU$1$[ebp], ebx
; File c:\github\mvtools\sources\include\avisynth.h

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN116@GetFrame
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN116@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN117@GetFrame
$LN116@GetFrame:
	xor	eax, eax
$LN117@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 221  : 			pSrcV = pSrcU + src->GetRowSize()/4;

	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, ebx
	mov	DWORD PTR _pSrcV$1$[ebp], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	esi, esi
	je	SHORT $LN122@GetFrame
	cmp	DWORD PTR [esi], 192			; 000000c0H
	jbe	SHORT $LN122@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [esi+192]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN295@GetFrame
$LN122@GetFrame:
	xor	eax, eax
$LN295@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 224  : 			if (usePelClip)

	cmp	BYTE PTR [edi+128], 0
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	mov	DWORD PTR _nSrcPitchY$1$[ebp], eax
; File c:\github\mvtools\sources\mvsuper.cpp

; 223  : 			nSrcPitchUV  = nSrcPitchY;

	mov	DWORD PTR _nSrcPitchUV$1$[ebp], eax

; 224  : 			if (usePelClip)

	je	$LN291@GetFrame
; File c:\github\mvtools\sources\include\avisynth.h

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	esi, esi
	je	SHORT $LN128@GetFrame
	cmp	DWORD PTR [esi], 212			; 000000d4H
	jbe	SHORT $LN128@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+212]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR _pSrcPelY$1$[ebp], eax
	jmp	SHORT $LN129@GetFrame
$LN128@GetFrame:
	mov	DWORD PTR _pSrcPelY$1$[ebp], 0
$LN129@GetFrame:

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN134@GetFrame
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN134@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN135@GetFrame
$LN134@GetFrame:
	xor	eax, eax
$LN135@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 227  : 				pSrcPelU = pSrcPelY + srcPel->GetRowSize()/2;

	cdq
	sub	eax, edx
	mov	ebx, eax
	sar	ebx, 1
	add	ebx, DWORD PTR _pSrcPelY$1$[ebp]
; File c:\github\mvtools\sources\include\avisynth.h

; 798  :   int GetRowSize(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetRowSize)(plane) )

	test	esi, esi
	je	SHORT $LN140@GetFrame
	cmp	DWORD PTR [esi], 196			; 000000c4H
	jbe	SHORT $LN140@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+196]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN141@GetFrame
$LN140@GetFrame:
	xor	eax, eax
$LN141@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 228  : 				pSrcPelV = pSrcPelU + srcPel->GetRowSize()/4;

	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, ebx
	mov	DWORD PTR _pSrcPelV$1$[ebp], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	esi, esi
	je	SHORT $LN146@GetFrame
	cmp	DWORD PTR [esi], 192			; 000000c0H
	jbe	SHORT $LN146@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [esi+192]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	DWORD PTR _nSrcPelPitchY$1$[ebp], eax
; File c:\github\mvtools\sources\mvsuper.cpp

; 230  : 				nSrcPelPitchUV  = nSrcPelPitchY;

	jmp	SHORT $LN297@GetFrame
$LN146@GetFrame:
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	xor	eax, eax
	mov	DWORD PTR _nSrcPelPitchY$1$[ebp], eax
; File c:\github\mvtools\sources\mvsuper.cpp

; 230  : 				nSrcPelPitchUV  = nSrcPelPitchY;

	jmp	SHORT $LN297@GetFrame
$LN291@GetFrame:
	mov	eax, DWORD PTR _pSrcPelY$[ebp]
	mov	ebx, DWORD PTR _pSrcPelU$[ebp]
	mov	DWORD PTR _pSrcPelY$1$[ebp], eax
	mov	eax, DWORD PTR _pSrcPelV$[ebp]
	mov	DWORD PTR _pSrcPelV$1$[ebp], eax
	mov	eax, DWORD PTR _nSrcPelPitchY$[ebp]
	mov	DWORD PTR _nSrcPelPitchY$1$[ebp], eax
	mov	eax, DWORD PTR _nSrcPelPitchUV$[ebp]
$LN297@GetFrame:
	mov	DWORD PTR _nSrcPelPitchUV$1$[ebp], eax
$LN8@GetFrame:
; File c:\github\mvtools\sources\include\avisynth.h

; 976  :   VideoFrame* operator->() const { return p; }

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 813  :   BYTE* GetWritePtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetWritePtr)(plane) )

	test	esi, esi
	je	SHORT $LN152@GetFrame
	cmp	DWORD PTR [esi], 220			; 000000dcH
	jbe	SHORT $LN152@GetFrame
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+220]
	push	0
	call	eax
	mov	esi, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	mov	ecx, eax
	mov	DWORD PTR _pDstY$1$[ebp], eax
	jmp	SHORT $LN153@GetFrame
$LN152@GetFrame:
	xor	ecx, ecx
	mov	DWORD PTR _pDstY$1$[ebp], ecx
$LN153@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 240  : 		pDstU = pDstY + nSuperWidth;

	mov	eax, DWORD PTR [edi+132]
	add	ecx, eax

; 241  : 		pDstV = pDstU + nSuperWidth/2; // YUY2

	cdq
	sub	eax, edx
	mov	DWORD PTR _pDstU$1$[ebp], ecx
	sar	eax, 1
	add	eax, ecx
	mov	DWORD PTR _pDstV$1$[ebp], eax
; File c:\github\mvtools\sources\include\avisynth.h

; 976  :   VideoFrame* operator->() const { return p; }

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	esi, esi
	je	SHORT $LN158@GetFrame
	cmp	DWORD PTR [esi], 192			; 000000c0H
	jbe	SHORT $LN158@GetFrame
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+192]
	push	0
	call	eax
; File c:\github\mvtools\sources\mvsuper.cpp

; 245  : 	else

	mov	esi, DWORD PTR _nSrcPelPitchY$1$[ebp]
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	mov	edx, eax
; File c:\github\mvtools\sources\mvsuper.cpp

; 245  : 	else

	jmp	$LN249@GetFrame
$LN158@GetFrame:
	mov	esi, DWORD PTR _nSrcPelPitchY$1$[ebp]
; File c:\github\mvtools\sources\include\avisynth.h

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	xor	edx, edx
; File c:\github\mvtools\sources\mvsuper.cpp

; 243  : 		nDstPitchUV = nDstPitchY;

	mov	eax, edx

; 245  : 	else

	jmp	$LN249@GetFrame
$LN3@GetFrame:
; File c:\github\mvtools\sources\include\avisynth.h

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	test	eax, eax
	je	SHORT $LN164@GetFrame
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN164@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [eax+212]
	push	1
	call	eax
	mov	DWORD PTR _pSrcY$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN165@GetFrame
$LN164@GetFrame:
	mov	DWORD PTR _pSrcY$1$[ebp], 0
$LN165@GetFrame:
	test	eax, eax
	je	SHORT $LN170@GetFrame
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN170@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [eax+212]
	push	2
	call	eax
	mov	DWORD PTR _pSrcU$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN171@GetFrame
$LN170@GetFrame:
	mov	DWORD PTR _pSrcU$1$[ebp], 0
$LN171@GetFrame:
	test	eax, eax
	je	SHORT $LN176@GetFrame
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN176@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [eax+212]
	push	4
	call	eax
	mov	DWORD PTR _pSrcV$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN177@GetFrame
$LN176@GetFrame:
	mov	DWORD PTR _pSrcV$1$[ebp], 0
$LN177@GetFrame:

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	eax, eax
	je	SHORT $LN182@GetFrame
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN182@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [eax+192]
	push	1
	call	eax
	mov	DWORD PTR _nSrcPitchY$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN183@GetFrame
$LN182@GetFrame:
	mov	DWORD PTR _nSrcPitchY$1$[ebp], 0
$LN183@GetFrame:
	test	eax, eax
	je	SHORT $LN188@GetFrame
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN188@GetFrame
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR [eax+192]
	push	2
	call	eax
	mov	DWORD PTR _nSrcPitchUV$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN189@GetFrame
$LN188@GetFrame:
	mov	DWORD PTR _nSrcPitchUV$1$[ebp], 0
$LN189@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 252  : 		if (usePelClip)

	cmp	BYTE PTR [edi+128], 0
	je	$LN292@GetFrame
; File c:\github\mvtools\sources\include\avisynth.h

; 811  :   const BYTE* GetReadPtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetReadPtr)(plane) )

	test	eax, eax
	je	SHORT $LN194@GetFrame
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN194@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [eax+212]
	push	1
	call	eax
	mov	DWORD PTR _pSrcPelY$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN195@GetFrame
$LN194@GetFrame:
	mov	DWORD PTR _pSrcPelY$1$[ebp], 0
$LN195@GetFrame:
	test	eax, eax
	je	SHORT $LN200@GetFrame
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN200@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [eax+212]
	push	2
	call	eax
	mov	ebx, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN201@GetFrame
$LN200@GetFrame:
	xor	ebx, ebx
$LN201@GetFrame:
	test	eax, eax
	je	SHORT $LN206@GetFrame
	cmp	DWORD PTR [eax], 212			; 000000d4H
	jbe	SHORT $LN206@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [eax+212]
	push	4
	call	eax
	mov	DWORD PTR _pSrcPelV$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN207@GetFrame
$LN206@GetFrame:
	mov	DWORD PTR _pSrcPelV$1$[ebp], 0
$LN207@GetFrame:

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	eax, eax
	je	SHORT $LN212@GetFrame
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN212@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [eax+192]
	push	1
	call	eax
	mov	esi, eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN213@GetFrame
$LN212@GetFrame:
	xor	esi, esi
$LN213@GetFrame:
	test	eax, eax
	je	SHORT $LN218@GetFrame
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN218@GetFrame
	mov	ecx, DWORD PTR _srcPel$[ebp]
	mov	eax, DWORD PTR [eax+192]
	push	2
	call	eax
	mov	DWORD PTR _nSrcPelPitchUV$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN219@GetFrame
$LN218@GetFrame:
	mov	DWORD PTR _nSrcPelPitchUV$1$[ebp], 0
	jmp	SHORT $LN219@GetFrame
$LN292@GetFrame:
	mov	ecx, DWORD PTR _pSrcPelY$[ebp]
	mov	ebx, DWORD PTR _pSrcPelU$[ebp]
	mov	esi, DWORD PTR _nSrcPelPitchY$[ebp]
	mov	DWORD PTR _pSrcPelY$1$[ebp], ecx
	mov	ecx, DWORD PTR _pSrcPelV$[ebp]
	mov	DWORD PTR _pSrcPelV$1$[ebp], ecx
	mov	ecx, DWORD PTR _nSrcPelPitchUV$[ebp]
	mov	DWORD PTR _nSrcPelPitchUV$1$[ebp], ecx
$LN219@GetFrame:

; 976  :   VideoFrame* operator->() const { return p; }

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [ecx]

; 813  :   BYTE* GetWritePtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetWritePtr)(plane) )

	test	eax, eax
	je	SHORT $LN224@GetFrame
	cmp	DWORD PTR [eax], 220			; 000000dcH
	jbe	SHORT $LN224@GetFrame
	mov	eax, DWORD PTR [eax+220]
	mov	ecx, edx
	push	1
	call	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR _pDstY$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN225@GetFrame
$LN224@GetFrame:
	mov	DWORD PTR _pDstY$1$[ebp], 0
$LN225@GetFrame:

; 976  :   VideoFrame* operator->() const { return p; }

	mov	edx, DWORD PTR [ecx]

; 813  :   BYTE* GetWritePtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetWritePtr)(plane) )

	test	eax, eax
	je	SHORT $LN230@GetFrame
	cmp	DWORD PTR [eax], 220			; 000000dcH
	jbe	SHORT $LN230@GetFrame
	mov	eax, DWORD PTR [eax+220]
	mov	ecx, edx
	push	2
	call	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR _pDstU$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN231@GetFrame
$LN230@GetFrame:
	mov	DWORD PTR _pDstU$1$[ebp], 0
$LN231@GetFrame:

; 976  :   VideoFrame* operator->() const { return p; }

	mov	edx, DWORD PTR [ecx]

; 813  :   BYTE* GetWritePtr(int plane=0) const AVS_BakedCode( return AVS_LinkCall(VFGetWritePtr)(plane) )

	test	eax, eax
	je	SHORT $LN236@GetFrame
	cmp	DWORD PTR [eax], 220			; 000000dcH
	jbe	SHORT $LN236@GetFrame
	mov	eax, DWORD PTR [eax+220]
	mov	ecx, edx
	push	4
	call	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR _pDstV$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN237@GetFrame
$LN236@GetFrame:
	mov	DWORD PTR _pDstV$1$[ebp], 0
$LN237@GetFrame:

; 976  :   VideoFrame* operator->() const { return p; }

	mov	edx, DWORD PTR [ecx]

; 797  :   int GetPitch(int plane=0) const AVS_BakedCode( return AVS_LinkCall(GetPitch)(plane) )

	test	eax, eax
	je	SHORT $LN242@GetFrame
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN242@GetFrame
	mov	eax, DWORD PTR [eax+192]
	mov	ecx, edx
	push	1
	call	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, eax
	mov	DWORD PTR _nDstPitchY$1$[ebp], eax
	mov	eax, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	jmp	SHORT $LN243@GetFrame
$LN242@GetFrame:
	xor	edx, edx
	mov	DWORD PTR _nDstPitchY$1$[ebp], edx
$LN243@GetFrame:
	test	eax, eax
	je	SHORT $LN248@GetFrame
	cmp	DWORD PTR [eax], 192			; 000000c0H
	jbe	SHORT $LN248@GetFrame
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+192]
	push	2
	call	eax
	mov	edx, DWORD PTR _nDstPitchY$1$[ebp]
	jmp	SHORT $LN249@GetFrame
$LN248@GetFrame:
	xor	eax, eax
$LN249@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 270  : 	pSrcGOF->Update(YUVPLANES, pDstY, nDstPitchY, pDstU, nDstPitchUV, pDstV, nDstPitchUV);

	mov	ecx, DWORD PTR [edi+152]
	push	eax
	push	DWORD PTR _pDstV$1$[ebp]
	push	eax
	push	DWORD PTR _pDstU$1$[ebp]
	push	edx
	push	DWORD PTR _pDstY$1$[ebp]
	push	7
	call	?Update@MVGroupOfFrames@@QAEXHPAEH0H0H@Z ; MVGroupOfFrames::Update

; 271  : 
; 272  : 	pSrcGOF->SetPlane(pSrcY, nSrcPitchY, YPLANE);

	mov	ecx, DWORD PTR [edi+152]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 88   :    pFrames[0]->ChangePlane(pNewSrc, nNewPitch, nMode);

	push	1
	push	DWORD PTR _nSrcPitchY$1$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	push	DWORD PTR _pSrcY$1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z ; MVFrame::ChangePlane
; File c:\github\mvtools\sources\mvsuper.cpp

; 273  : 	pSrcGOF->SetPlane(pSrcU, nSrcPitchUV, UPLANE);

	mov	ecx, DWORD PTR [edi+152]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 88   :    pFrames[0]->ChangePlane(pNewSrc, nNewPitch, nMode);

	push	2
	push	DWORD PTR _nSrcPitchUV$1$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	push	DWORD PTR _pSrcU$1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z ; MVFrame::ChangePlane
; File c:\github\mvtools\sources\mvsuper.cpp

; 274  : 	pSrcGOF->SetPlane(pSrcV, nSrcPitchUV, VPLANE);

	mov	ecx, DWORD PTR [edi+152]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 88   :    pFrames[0]->ChangePlane(pNewSrc, nNewPitch, nMode);

	push	4
	push	DWORD PTR _nSrcPitchUV$1$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	push	DWORD PTR _pSrcV$1$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ChangePlane@MVFrame@@QAEXPBEHW4MVPlaneSet@@@Z ; MVFrame::ChangePlane
; File c:\github\mvtools\sources\mvsuper.cpp

; 276  : 	pSrcGOF->Reduce(nModeYUV);

	push	DWORD PTR [edi+140]
	mov	ecx, DWORD PTR [edi+152]
	call	?Reduce@MVGroupOfFrames@@QAEXW4MVPlaneSet@@@Z ; MVGroupOfFrames::Reduce

; 277  : 	pSrcGOF->Pad(nModeYUV);

	mov	ecx, DWORD PTR [edi+152]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 109  :    pFrames[0]->Pad(nMode);

	push	DWORD PTR [edi+140]
	mov	ecx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	call	?Pad@MVFrame@@QAEXW4MVPlaneSet@@@Z	; MVFrame::Pad
; File c:\github\mvtools\sources\mvsuper.cpp

; 279  : 	if (usePelClip)

	cmp	BYTE PTR [edi+128], 0
	je	$LN10@GetFrame

; 280  : 	{
; 281  : 		MVFrame *srcFrames = pSrcGOF->GetFrame(0);

	mov	eax, DWORD PTR [edi+152]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 82   :    if (( nLevel < 0 ) || ( nLevel >= nLevelCount )) return 0;

	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN259@GetFrame
	xor	eax, eax
	jmp	SHORT $LN298@GetFrame
$LN259@GetFrame:

; 83   :    return pFrames[nLevel];

	mov	eax, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
$LN298@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 284  : 		if (nModeYUV & YPLANE) 

	test	BYTE PTR [edi+140], 1
; File c:\github\mvtools\sources\mvframe.h

; 67   :          return pYPlane;

	mov	ecx, DWORD PTR [eax]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 83   :    return pFrames[nLevel];

	mov	DWORD PTR _srcFrames$1$[ebp], eax
; File c:\github\mvtools\sources\mvsuper.cpp

; 284  : 		if (nModeYUV & YPLANE) 

	je	SHORT $LN14@GetFrame

; 285  :             if(pixelsize==1)

	cmp	DWORD PTR [edi+112], 1

; 286  :                 srcPlaneY->RefineExt<uint8_t>(pSrcPelY, nSrcPelPitchY, isPelClipPadded);

	movzx	eax, BYTE PTR [edi+156]
	push	eax
	push	esi
	push	DWORD PTR _pSrcPelY$1$[ebp]
	jne	SHORT $LN13@GetFrame
	call	??$RefineExt@E@MVPlane@@QAEXPBEH_N@Z	; MVPlane::RefineExt<unsigned char>

; 287  :             else

	jmp	SHORT $LN299@GetFrame
$LN13@GetFrame:

; 288  :                 srcPlaneY->RefineExt<uint16_t>(pSrcPelY, nSrcPelPitchY, isPelClipPadded);

	call	??$RefineExt@G@MVPlane@@QAEXPBEH_N@Z	; MVPlane::RefineExt<unsigned short>
$LN299@GetFrame:
	mov	eax, DWORD PTR _srcFrames$1$[ebp]
$LN14@GetFrame:

; 289  : 
; 290  :         MVPlane *srcPlaneU = srcFrames->GetPlane(UPLANE);
; 291  : 		if (nModeYUV & UPLANE) 

	test	BYTE PTR [edi+140], 2
; File c:\github\mvtools\sources\mvframe.h

; 70   :          return pUPlane;

	mov	ecx, DWORD PTR [eax+4]
; File c:\github\mvtools\sources\mvsuper.cpp

; 293  :                 srcPlaneU->RefineExt<uint8_t>(pSrcPelU, nSrcPelPitchUV, isPelClipPadded);

	mov	esi, DWORD PTR _nSrcPelPitchUV$1$[ebp]
	je	SHORT $LN17@GetFrame
	cmp	DWORD PTR [edi+112], 1
	movzx	eax, BYTE PTR [edi+156]
	push	eax
	push	esi
	push	ebx
	jne	SHORT $LN16@GetFrame
	call	??$RefineExt@E@MVPlane@@QAEXPBEH_N@Z	; MVPlane::RefineExt<unsigned char>

; 294  :             else

	jmp	SHORT $LN300@GetFrame
$LN16@GetFrame:

; 295  :                 srcPlaneU->RefineExt<uint16_t>(pSrcPelU, nSrcPelPitchUV, isPelClipPadded);

	call	??$RefineExt@G@MVPlane@@QAEXPBEH_N@Z	; MVPlane::RefineExt<unsigned short>
$LN300@GetFrame:
	mov	eax, DWORD PTR _srcFrames$1$[ebp]
$LN17@GetFrame:

; 298  : 		if (nModeYUV & VPLANE) 

	test	BYTE PTR [edi+140], 4
; File c:\github\mvtools\sources\mvframe.h

; 73   :          return pVPlane;

	mov	ecx, DWORD PTR [eax+8]
; File c:\github\mvtools\sources\mvsuper.cpp

; 298  : 		if (nModeYUV & VPLANE) 

	je	SHORT $LN11@GetFrame

; 299  :             if(pixelsize==1)

	cmp	DWORD PTR [edi+112], 1

; 300  :                 srcPlaneV->RefineExt<uint8_t>(pSrcPelV, nSrcPelPitchUV, isPelClipPadded);

	movzx	eax, BYTE PTR [edi+156]
	push	eax
	push	esi
	push	DWORD PTR _pSrcPelV$1$[ebp]
	jne	SHORT $LN19@GetFrame
	call	??$RefineExt@E@MVPlane@@QAEXPBEH_N@Z	; MVPlane::RefineExt<unsigned char>

; 301  :             else

	jmp	SHORT $LN11@GetFrame
$LN19@GetFrame:

; 302  :                 srcPlaneV->RefineExt<uint16_t>(pSrcPelV, nSrcPelPitchUV, isPelClipPadded);

	call	??$RefineExt@G@MVPlane@@QAEXPBEH_N@Z	; MVPlane::RefineExt<unsigned short>

; 303  :     }
; 304  : 	else

	jmp	SHORT $LN11@GetFrame
$LN10@GetFrame:

; 305  : 	{
; 306  : 		pSrcGOF->Refine(nModeYUV);

	mov	ecx, DWORD PTR [edi+152]
; File c:\github\mvtools\sources\mvgroupofframes.cpp

; 102  :    pFrames[0]->Refine(nMode);

	push	DWORD PTR [edi+140]
	mov	ecx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	call	?Refine@MVFrame@@QAEXW4MVPlaneSet@@@Z	; MVFrame::Refine
$LN11@GetFrame:
	pop	edi
; File c:\github\mvtools\sources\include\avisynth.h

; 982  :   ~PVideoFrame() AVS_BakedCode( AVS_LinkCall(PVideoFrame_DESTRUCTOR)() )

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
	pop	esi
	pop	ebx
	test	edx, edx
	je	SHORT $LN281@GetFrame
	cmp	DWORD PTR [edx], 272			; 00000110H
	jbe	SHORT $LN281@GetFrame
	mov	eax, DWORD PTR [edx+272]
	lea	ecx, DWORD PTR _srcPel$[ebp]
	call	eax
	mov	edx, DWORD PTR ?AVS_linkage@@3PBUAVS_Linkage@@B ; AVS_linkage
$LN281@GetFrame:
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	test	edx, edx
	je	SHORT $LN289@GetFrame
	cmp	DWORD PTR [edx], 272			; 00000110H
	jbe	SHORT $LN289@GetFrame
	mov	edx, DWORD PTR [edx+272]
	lea	ecx, DWORD PTR _src$[ebp]
	call	edx
$LN289@GetFrame:
; File c:\github\mvtools\sources\mvsuper.cpp

; 327  : 	return dst;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 328  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$0:
	lea	ecx, DWORD PTR _src$[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$1:
	lea	ecx, DWORD PTR _srcPel$[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$4:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$3:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN26@GetFrame
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1PVideoFrame@@QAE@XZ			; PVideoFrame::~PVideoFrame
$LN26@GetFrame:
	ret	0
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$5:
	call	DWORD PTR __imp____std_terminate
	ret	0
__unwindfunclet$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z$6:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFrame@MVSuper@@UAG?AVPVideoFrame@@HPAVIScriptEnvironment@@@Z ENDP ; MVSuper::GetFrame
END
