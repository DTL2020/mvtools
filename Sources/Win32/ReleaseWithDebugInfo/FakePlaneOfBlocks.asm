; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\fakeplaneofblocks.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
PUBLIC	??_EFakeBlockData@@QAEPAXI@Z			; FakeBlockData::`vector deleting destructor'
PUBLIC	?GetSAD@FakeBlockData@@QBEHXZ			; FakeBlockData::GetSAD
PUBLIC	?IsSceneChange@FakePlaneOfBlocks@@QBE_NHH@Z	; FakePlaneOfBlocks::IsSceneChange
PUBLIC	?Update@FakePlaneOfBlocks@@QAEXPBH@Z		; FakePlaneOfBlocks::Update
PUBLIC	??1FakePlaneOfBlocks@@QAE@XZ			; FakePlaneOfBlocks::~FakePlaneOfBlocks
PUBLIC	??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z		; FakePlaneOfBlocks::FakePlaneOfBlocks
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1FakePlaneOfBlocks@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1FakePlaneOfBlocks@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1FakePlaneOfBlocks@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FakePlaneOfBlocks@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EFakeBlockData@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\commonfunctions.h
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\commonfunctions.h
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\commonfunctions.h
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\commonfunctions.h
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\commonfunctions.h
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\fakeblockdata.cpp
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\fakeblockdata.cpp
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
;	COMDAT ??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_blkIdx$1$ = 8						; size = 4
$T2 = 8							; size = 4
_sizeX$ = 8						; size = 4
_sizeY$ = 12						; size = 4
_lv$ = 16						; size = 4
_pel$ = 20						; size = 4
__nOverlapX$ = 24					; size = 4
__nOverlapY$ = 28					; size = 4
_j$1$ = 32						; size = 4
$T3 = 32						; size = 4
__nBlkX$ = 32						; size = 4
__nBlkY$ = 36						; size = 4
??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z PROC		; FakePlaneOfBlocks::FakePlaneOfBlocks, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0

; 29   :    nBlkSizeX = sizeX;
; 30   :    nBlkSizeY = sizeY;
; 31   :    nOverlapX = _nOverlapX;
; 32   :    nOverlapY = _nOverlapY;

	mov	edx, DWORD PTR __nOverlapY$[ebp]
	push	-1
	push	__ehhandler$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z
	push	eax
	mov	DWORD PTR fs:0, esp

; 33   :    nBlkX = _nBlkX;

	mov	eax, DWORD PTR __nBlkX$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _sizeY$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __nOverlapX$[ebp]
	push	edi
	mov	edi, DWORD PTR _sizeX$[ebp]
	mov	DWORD PTR [esi+20], ebx

; 34   :    nBlkY = _nBlkY;
; 35   : 	nWidth_Bi = nOverlapX + nBlkX*(nBlkSizeX - nOverlapX);//w;
; 36   : 	nHeight_Bi = nOverlapY + nBlkY*(nBlkSizeY - nOverlapY);//h;

	sub	ebx, edx
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR __nBlkY$[ebp]
	imul	ebx, eax
	mov	DWORD PTR [esi+16], edi
	sub	edi, ecx
	imul	edi, DWORD PTR __nBlkX$[ebp]
	mov	DWORD PTR [esi+44], ecx
	mov	DWORD PTR [esi+12], eax
	add	ebx, edx
	mov	DWORD PTR [esi+48], edx
	mov	DWORD PTR [esi+4], ebx

; 37   : //   nBlkX = (nWidth_Bi - nOverlapX) / (nBlkSizeX - nOverlapX); // without remainder
; 38   : //   nBlkY = (nHeight_Bi - nOverlapY) / (nBlkSizeY - nOverlapY); //
; 39   :    nBlkCount = nBlkX * nBlkY;

	mov	ebx, DWORD PTR __nBlkX$[ebp]
	add	edi, ecx
	imul	ebx, eax
; File c:\github\mvtools\sources\commonfunctions.h

; 25   : 	int result = 0;

	xor	ecx, ecx
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 40   :    nPel = pel;

	mov	eax, DWORD PTR _pel$[ebp]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+24], ebx
; File c:\github\mvtools\sources\commonfunctions.h

; 26   : 	while ( i > 1 ) { i /= 2; result++; }

	cmp	eax, 1
	jle	SHORT $LN14@FakePlaneO
	npad	5
$LL13@FakePlaneO:
	cdq
	inc	ecx
	sub	eax, edx
	sar	eax, 1
	cmp	eax, 1
	jg	SHORT $LL13@FakePlaneO
$LN14@FakePlaneO:
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 43   : 	nLogScale = lv;

	mov	eax, DWORD PTR _lv$[ebp]

; 46   : 	blocks = new FakeBlockData [nBlkCount];

	mov	edx, 20					; 00000014H
	mov	DWORD PTR [esi+32], ecx
; File c:\github\mvtools\sources\commonfunctions.h

; 7    : 	return ~(a >> (sizeof(int)*8 - 1)) & a;

	mov	ecx, eax
	sar	ecx, 31					; 0000001fH
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 43   : 	nLogScale = lv;

	mov	DWORD PTR [esi+40], eax
; File c:\github\mvtools\sources\commonfunctions.h

; 7    : 	return ~(a >> (sizeof(int)*8 - 1)) & a;

	not	ecx
	and	ecx, eax
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 46   : 	blocks = new FakeBlockData [nBlkCount];

	mov	DWORD PTR $T3[ebp], ebx
; File c:\github\mvtools\sources\commonfunctions.h

; 33   : 	return 1 << satz(i);

	mov	eax, 1
	shl	eax, cl
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 46   : 	blocks = new FakeBlockData [nBlkCount];

	xor	ecx, ecx
	mov	DWORD PTR [esi+36], eax
	mov	eax, ebx
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN9@FakePlaneO
	push	OFFSET ??1FakeBlockData@@QAE@XZ		; FakeBlockData::~FakeBlockData
	push	OFFSET ??0FakeBlockData@@QAE@XZ		; FakeBlockData::FakeBlockData
	push	ebx
	lea	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebx
	push	20					; 00000014H
	push	edi
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	jmp	SHORT $LN10@FakePlaneO
$LN9@FakePlaneO:
	xor	edi, edi
$LN10@FakePlaneO:

; 47   : 	for ( int j = 0, blkIdx = 0; j < nBlkY; j++ )

	xor	eax, eax
	mov	DWORD PTR [esi+52], edi
	xor	ecx, ecx
	mov	DWORD PTR _blkIdx$1$[ebp], eax
	mov	DWORD PTR _j$1$[ebp], ecx
	cmp	DWORD PTR [esi+12], eax
	jle	SHORT $LN34@FakePlaneO
	npad	3
$LL4@FakePlaneO:

; 48   : 		for ( int i = 0; i < nBlkX; i++, blkIdx++ )

	xor	edi, edi
	cmp	DWORD PTR [esi+8], edi
	jle	SHORT $LN2@FakePlaneO
	lea	ebx, DWORD PTR [eax+eax*4]
	shl	ebx, 2
	npad	3
$LL7@FakePlaneO:

; 49   : 			blocks[blkIdx].Init(i * (nBlkSizeX - nOverlapX), j * (nBlkSizeY - nOverlapY));

	mov	edx, DWORD PTR [esi+20]
	lea	ebx, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR [esi+16]
	sub	eax, DWORD PTR [esi+44]
	sub	edx, DWORD PTR [esi+48]
	imul	eax, edi
	inc	edi
	imul	edx, ecx
	mov	ecx, DWORD PTR [esi+52]
; File c:\github\mvtools\sources\fakeblockdata.cpp

; 25   :     x=_x;

	mov	DWORD PTR [ecx+ebx-20], eax
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 48   : 		for ( int i = 0; i < nBlkX; i++, blkIdx++ )

	mov	eax, DWORD PTR _blkIdx$1$[ebp]
; File c:\github\mvtools\sources\fakeblockdata.cpp

; 26   :     y=_y;

	mov	DWORD PTR [ecx+ebx-16], edx
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 48   : 		for ( int i = 0; i < nBlkX; i++, blkIdx++ )

	inc	eax
	mov	ecx, DWORD PTR _j$1$[ebp]
	mov	DWORD PTR _blkIdx$1$[ebp], eax
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $LL7@FakePlaneO
$LN2@FakePlaneO:

; 47   : 	for ( int j = 0, blkIdx = 0; j < nBlkY; j++ )

	inc	ecx
	mov	DWORD PTR _j$1$[ebp], ecx
	cmp	ecx, DWORD PTR [esi+12]
	jl	SHORT $LL4@FakePlaneO
$LN34@FakePlaneO:

; 50   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z$0:
	xor	ebx, ebx
	mov	eax, DWORD PTR $T3[ebp]
	mov	ecx, 20					; 00000014H
	mul	ecx
	seto	bl
	neg	ebx
	or	ebx, eax
	xor	eax, eax
	add	ebx, 4
	setb	al
	neg	eax
	or	eax, ebx
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__ehhandler$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z:
	mov	eax, OFFSET __ehfuncinfo$??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FakePlaneOfBlocks@@QAE@HHHHHHHH@Z ENDP		; FakePlaneOfBlocks::FakePlaneOfBlocks
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
;	COMDAT ??1FakePlaneOfBlocks@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1FakePlaneOfBlocks@@QAE@XZ PROC			; FakePlaneOfBlocks::~FakePlaneOfBlocks, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1FakePlaneOfBlocks@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 56   : //	for ( int i = 0; i < nBlkCount; i++ )
; 57   : //		delete blocks[i];
; 58   : 
; 59   : 	delete[] blocks;

	mov	eax, DWORD PTR [ecx+52]
	push	esi
	test	eax, eax
	je	SHORT $LN8@FakePlaneO
	push	OFFSET ??1FakeBlockData@@QAE@XZ		; FakeBlockData::~FakeBlockData
	lea	esi, DWORD PTR [eax-4]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	DWORD PTR [esi]
	push	20					; 00000014H
	push	eax
	call	??_M@YGXPAXIIP6EX0@Z@Z
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [eax*4+4]
	push	eax
	push	esi
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN8@FakePlaneO:

; 60   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FakePlaneOfBlocks@@QAE@XZ$0:
	call	DWORD PTR __imp____std_terminate
	ret	0
__ehhandler$??1FakePlaneOfBlocks@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1FakePlaneOfBlocks@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1FakePlaneOfBlocks@@QAE@XZ ENDP			; FakePlaneOfBlocks::~FakePlaneOfBlocks
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\fakeblockdata.cpp
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
; File c:\github\mvtools\sources\fakeblockdata.cpp
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
;	COMDAT ?Update@FakePlaneOfBlocks@@QAEXPBH@Z
_TEXT	SEGMENT
_array$ = 8						; size = 4
?Update@FakePlaneOfBlocks@@QAEXPBH@Z PROC		; FakePlaneOfBlocks::Update, COMDAT
; _this$ = ecx

; 63   : {

	push	ebx
	mov	ebx, ecx
	push	esi

; 65   : 	for ( int i = 0; i < nBlkCount; i++ )

	xor	esi, esi
	cmp	DWORD PTR [ebx+24], esi
	jle	SHORT $LN3@Update
	mov	eax, DWORD PTR _array$[esp+4]
	push	edi
	add	eax, 8
	xor	edi, edi
$LL4@Update:

; 66   : 	{
; 67   : 		blocks[i].Update(array);

	mov	edx, DWORD PTR [ebx+52]

; 68   : 		array += N_PER_BLOCK;

	lea	eax, DWORD PTR [eax+12]
; File c:\github\mvtools\sources\fakeblockdata.cpp

; 48   : 	vector.x   = array [0];

	mov	ecx, DWORD PTR [eax-20]
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 65   : 	for ( int i = 0; i < nBlkCount; i++ )

	lea	edi, DWORD PTR [edi+20]
	inc	esi
; File c:\github\mvtools\sources\fakeblockdata.cpp

; 48   : 	vector.x   = array [0];

	mov	DWORD PTR [edx+edi-12], ecx

; 49   : 	vector.y   = array [1];

	mov	ecx, DWORD PTR [eax-16]
	mov	DWORD PTR [edx+edi-8], ecx

; 50   : 	vector.sad = *(sad_t *)(&array [2]);

	mov	ecx, DWORD PTR [eax-12]
	mov	DWORD PTR [edx+edi-4], ecx
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp

; 65   : 	for ( int i = 0; i < nBlkCount; i++ )

	cmp	esi, DWORD PTR [ebx+24]
	jl	SHORT $LL4@Update
	pop	edi
$LN3@Update:
	pop	esi
	pop	ebx

; 69   : 	}
; 70   : }

	ret	4
?Update@FakePlaneOfBlocks@@QAEXPBH@Z ENDP		; FakePlaneOfBlocks::Update
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\fakeplaneofblocks.cpp
;	COMDAT ?IsSceneChange@FakePlaneOfBlocks@@QBE_NHH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$1$ = -4						; size = 4
_nTh1$ = 8						; size = 4
_nTh2$ = 12						; size = 4
?IsSceneChange@FakePlaneOfBlocks@@QBE_NHH@Z PROC	; FakePlaneOfBlocks::IsSceneChange, COMDAT
; _this$ = ecx

; 73   : {

	sub	esp, 8
	mov	eax, DWORD PTR [ecx+24]

; 74   : 	int sum = 0;

	xor	edx, edx
	push	ebx

; 75   : 	for ( int i = 0; i < nBlkCount; i++ )

	mov	ebx, DWORD PTR _nTh1$[esp+8]
	push	ebp
	push	esi
	push	edi
	xor	esi, esi
	mov	DWORD PTR _this$1$[esp+24], ecx
	xor	edi, edi
	mov	DWORD PTR $T1[esp+24], eax
	xor	ebp, ebp
	cmp	eax, 2
	jl	SHORT $LC17@IsSceneCha

; 76   : 		sum += ( blocks[i].GetSAD() > nTh1 ) ? 1 : 0;

	mov	ecx, DWORD PTR [ecx+52]
	mov	edx, eax
	add	edx, -2					; fffffffeH
	add	ecx, 36					; 00000024H
	shr	edx, 1
	inc	edx
	lea	ebp, DWORD PTR [edx+edx]
$LL18@IsSceneCha:
	xor	eax, eax
	lea	ecx, DWORD PTR [ecx+40]
	cmp	DWORD PTR [ecx-60], ebx
	setg	al
	add	esi, eax
	xor	eax, eax
	cmp	DWORD PTR [ecx-40], ebx
	setg	al
	add	edi, eax
	sub	edx, 1
	jne	SHORT $LL18@IsSceneCha
	mov	eax, DWORD PTR $T1[esp+24]
$LC17@IsSceneCha:

; 75   : 	for ( int i = 0; i < nBlkCount; i++ )

	cmp	ebp, eax
	jge	SHORT $LN16@IsSceneCha

; 76   : 		sum += ( blocks[i].GetSAD() > nTh1 ) ? 1 : 0;

	mov	eax, DWORD PTR _this$1$[esp+24]
	lea	ecx, DWORD PTR [ebp*4]
	add	ecx, ebp
	xor	edx, edx
	mov	eax, DWORD PTR [eax+52]
	cmp	DWORD PTR [eax+ecx*4+16], ebx
	setg	dl
$LN16@IsSceneCha:
	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	add	eax, edx
	cmp	eax, DWORD PTR _nTh2$[esp+16]
	pop	esi
	pop	ebp
	setg	al
	pop	ebx

; 77   : 
; 78   : 	return ( sum > nTh2 );
; 79   : }

	add	esp, 8
	ret	8
?IsSceneChange@FakePlaneOfBlocks@@QBE_NHH@Z ENDP	; FakePlaneOfBlocks::IsSceneChange
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\commonfunctions.h
;	COMDAT ?satz@@YAHH@Z
_TEXT	SEGMENT
?satz@@YAHH@Z PROC					; satz, COMDAT
; _a$ = ecx

; 7    : 	return ~(a >> (sizeof(int)*8 - 1)) & a;

	mov	eax, ecx
	sar	eax, 31					; 0000001fH
	not	eax
	and	eax, ecx

; 8    : }

	ret	0
?satz@@YAHH@Z ENDP					; satz
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\commonfunctions.h
;	COMDAT ?ilog2@@YAHH@Z
_TEXT	SEGMENT
?ilog2@@YAHH@Z PROC					; ilog2, COMDAT
; _i$ = ecx

; 24   : {

	mov	eax, ecx

; 25   : 	int result = 0;

	xor	ecx, ecx

; 26   : 	while ( i > 1 ) { i /= 2; result++; }

	cmp	eax, 1
	jle	SHORT $LN9@ilog2
	npad	7
$LL2@ilog2:
	cdq
	inc	ecx
	sub	eax, edx
	sar	eax, 1
	cmp	eax, 1
	jg	SHORT $LL2@ilog2
$LN9@ilog2:

; 27   : 	return result;

	mov	eax, ecx

; 28   : }

	ret	0
?ilog2@@YAHH@Z ENDP					; ilog2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\commonfunctions.h
;	COMDAT ?iexp2@@YAHH@Z
_TEXT	SEGMENT
?iexp2@@YAHH@Z PROC					; iexp2, COMDAT
; _i$ = ecx

; 7    : 	return ~(a >> (sizeof(int)*8 - 1)) & a;

	mov	edx, ecx

; 33   : 	return 1 << satz(i);

	mov	eax, 1

; 7    : 	return ~(a >> (sizeof(int)*8 - 1)) & a;

	sar	edx, 31					; 0000001fH
	not	edx
	and	ecx, edx

; 33   : 	return 1 << satz(i);

	shl	eax, cl

; 34   : // 	int result = 1;
; 35   : // 	while ( i > 0 ) { result *= 2; i--; }
; 36   : // 	return result;
; 37   : }

	ret	0
?iexp2@@YAHH@Z ENDP					; iexp2
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\fakeblockdata.h
;	COMDAT ?GetSAD@FakeBlockData@@QBEHXZ
_TEXT	SEGMENT
?GetSAD@FakeBlockData@@QBEHXZ PROC			; FakeBlockData::GetSAD, COMDAT
; _this$ = ecx

; 55   : 	inline sad_t GetSAD() const { return vector.sad; }

	mov	eax, DWORD PTR [ecx+16]
	ret	0
?GetSAD@FakeBlockData@@QBEHXZ ENDP			; FakeBlockData::GetSAD
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_EFakeBlockData@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$dead$ = 8					; size = 4
??_EFakeBlockData@@QAEPAXI@Z PROC			; FakeBlockData::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??_EFakeBlockData@@QAEPAXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	push	OFFSET ??1FakeBlockData@@QAE@XZ		; FakeBlockData::~FakeBlockData
	push	DWORD PTR [ecx-4]
	lea	esi, DWORD PTR [ecx-4]
	push	20					; 00000014H
	push	ecx
	call	??_M@YGXPAXIIP6EX0@Z@Z
	mov	ecx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [ecx*4+4]
	push	ecx
	push	esi
	call	??_V@YAXPAXI@Z				; operator delete[]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	add	esp, 8
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EFakeBlockData@@QAEPAXI@Z:
	mov	eax, OFFSET __ehfuncinfo$??_EFakeBlockData@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_EFakeBlockData@@QAEPAXI@Z ENDP			; FakeBlockData::`vector deleting destructor'
END
