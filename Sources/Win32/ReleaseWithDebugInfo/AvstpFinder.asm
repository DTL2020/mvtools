; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\avstpfinder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@	; `string'
PUBLIC	?_lib_name_0@AvstpFinder@@2QB_WB		; AvstpFinder::_lib_name_0
EXTRN	__imp__wcsncpy_s:PROC
EXTRN	__imp__wcsrchr:PROC
EXTRN	__imp__OpenMutexW@12:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__CreateFileMappingW@24:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	___ImageBase:BYTE
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__OpenFileMappingW@12:PROC
EXTRN	__imp__ReleaseMutex@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateMutexW@12:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
;	COMDAT ?base_0@?1??compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z@4QB_WB
CONST	SEGMENT
?base_0@?1??compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z@4QB_WB DB 'L', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'a', 00H, 'v'
	DB	00H, 's', 00H, 't', 00H, 'p', 00H, '_', 00H, 'd', 00H, 'l', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_'
	DB	00H, 00H, 00H				; `AvstpFinder::compose_mapped_filename'::`2'::base_0
?_lib_name_0@AvstpFinder@@2QB_WB DB 'a', 00H, 'v', 00H, 's', 00H, 't', 00H
	DB	'p', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; AvstpFinder::_lib_name_0
CONST	ENDS
;	COMDAT ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
CONST	SEGMENT
??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@ DB 'GetModuleHandleExW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
PUBLIC	?get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ ; AvstpFinder::get_code_module
PUBLIC	?compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z ; AvstpFinder::compose_mapped_filename
PUBLIC	?find_lib@AvstpFinder@@SAPAUHINSTANCE__@@XZ	; AvstpFinder::find_lib
PUBLIC	?wcsrchr@@YAPA_WPA_W_W@Z			; wcsrchr
PUBLIC	___isa_available_default
PUBLIC	__real@00000000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c343958
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e99999a
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f34fdf4
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4010000000000000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@4059000000000000
PUBLIC	__real@4060000000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@43340000
PUBLIC	__real@43800000
PUBLIC	__real@45000000
PUBLIC	__real@461c3c00
PUBLIC	__real@bc343958
PUBLIC	__xmm@00000000000000003f80000000000000
PUBLIC	__xmm@00000002000000010000000100000000
PUBLIC	__xmm@00000002000000010000000200000000
PUBLIC	__xmm@00000002000000020000000100000000
PUBLIC	__xmm@00000002000000020000000200000000
PUBLIC	__xmm@00000002000000030000000500000006
PUBLIC	__xmm@00000002000000040000000100000000
PUBLIC	__xmm@00000002000000040000000200000000
PUBLIC	__xmm@00000004000000010000000100000000
PUBLIC	__xmm@00000004000000010000000200000000
PUBLIC	__xmm@00000004000000020000000100000000
PUBLIC	__xmm@00000004000000020000000200000000
PUBLIC	__xmm@00000004000000040000000100000000
PUBLIC	__xmm@00000004000000040000000200000000
PUBLIC	__xmm@00000004000000080000000100000000
PUBLIC	__xmm@00000004000000080000000100000002
PUBLIC	__xmm@00000004000000080000000200000000
PUBLIC	__xmm@00000008000000010000000100000000
PUBLIC	__xmm@00000008000000010000000100000002
PUBLIC	__xmm@00000008000000010000000200000000
PUBLIC	__xmm@00000008000000020000000100000000
PUBLIC	__xmm@00000008000000020000000100000002
PUBLIC	__xmm@00000008000000020000000200000000
PUBLIC	__xmm@00000008000000040000000100000000
PUBLIC	__xmm@00000008000000040000000100000002
PUBLIC	__xmm@00000008000000040000000200000000
PUBLIC	__xmm@00000008000000080000000100000000
PUBLIC	__xmm@00000008000000080000000100000002
PUBLIC	__xmm@00000008000000080000000200000000
PUBLIC	__xmm@00000008000000100000000100000000
PUBLIC	__xmm@00000008000000100000000100000002
PUBLIC	__xmm@00000008000000100000000200000000
PUBLIC	__xmm@00000010000000010000000100000000
PUBLIC	__xmm@00000010000000010000000200000000
PUBLIC	__xmm@00000010000000020000000100000000
PUBLIC	__xmm@00000010000000020000000100000002
PUBLIC	__xmm@00000010000000020000000200000000
PUBLIC	__xmm@00000010000000040000000100000000
PUBLIC	__xmm@00000010000000040000000100000002
PUBLIC	__xmm@00000010000000040000000200000000
PUBLIC	__xmm@00000010000000080000000100000000
PUBLIC	__xmm@00000010000000080000000100000002
PUBLIC	__xmm@00000010000000080000000200000000
PUBLIC	__xmm@00000010000000080000000200000005
PUBLIC	__xmm@00000010000000100000000100000000
PUBLIC	__xmm@00000010000000100000000100000002
PUBLIC	__xmm@00000010000000100000000200000000
PUBLIC	__xmm@00000010000000100000000200000005
PUBLIC	__xmm@00000010000000200000000100000000
PUBLIC	__xmm@00000010000000200000000100000002
PUBLIC	__xmm@00000010000000200000000200000000
PUBLIC	__xmm@00000010000000200000000200000005
PUBLIC	__xmm@00000020000000080000000100000000
PUBLIC	__xmm@00000020000000080000000100000002
PUBLIC	__xmm@00000020000000080000000200000000
PUBLIC	__xmm@00000020000000080000000200000005
PUBLIC	__xmm@00000020000000100000000100000000
PUBLIC	__xmm@00000020000000100000000100000002
PUBLIC	__xmm@00000020000000100000000200000000
PUBLIC	__xmm@00000020000000100000000200000005
PUBLIC	__xmm@00000020000000200000000100000000
PUBLIC	__xmm@00000020000000200000000100000002
PUBLIC	__xmm@00000020000000200000000200000000
PUBLIC	__xmm@00000020000000200000000200000005
PUBLIC	__xmm@00000080000000800000008000000080
PUBLIC	__xmm@000000ff000000ff000000ff000000ff
PUBLIC	__xmm@00000100000001000000010000000100
PUBLIC	__xmm@00800080008000800080008000800080
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@3f34fdf43f34fdf43f34fdf43f34fdf4
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___RTDynamicCast:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__chkstk:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__ltod3:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___isa_available:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?dummy@?1??get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ@4HA
_BSS	SEGMENT
?dummy@?1??get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ@4HA DD 01H DUP (?) ; `AvstpFinder::get_code_module'::`2'::dummy
_BSS	ENDS
;	COMDAT ___isa_available_default
_BSS	SEGMENT
___isa_available_default DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f34fdf43f34fdf43f34fdf43f34fdf4
CONST	SEGMENT
__xmm@3f34fdf43f34fdf43f34fdf43f34fdf4 DB 0f4H, 0fdH, '4?', 0f4H, 0fdH, '4'
	DB	'?', 0f4H, 0fdH, '4?', 0f4H, 0fdH, '4?'
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00800080008000800080008000800080
CONST	SEGMENT
__xmm@00800080008000800080008000800080 DB 080H, 00H, 080H, 00H, 080H, 00H
	DB	080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H
CONST	ENDS
;	COMDAT __xmm@00000100000001000000010000000100
CONST	SEGMENT
__xmm@00000100000001000000010000000100 DB 00H, 01H, 00H, 00H, 00H, 01H, 00H
	DB	00H, 00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000ff000000ff000000ff000000ff
CONST	SEGMENT
__xmm@000000ff000000ff000000ff000000ff DB 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H
	DB	00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000080000000800000008000000080
CONST	SEGMENT
__xmm@00000080000000800000008000000080 DB 080H, 00H, 00H, 00H, 080H, 00H, 00H
	DB	00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000200000000200000005
CONST	SEGMENT
__xmm@00000020000000200000000200000005 DB 05H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000200000000200000000
CONST	SEGMENT
__xmm@00000020000000200000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000200000000100000002
CONST	SEGMENT
__xmm@00000020000000200000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000200000000100000000
CONST	SEGMENT
__xmm@00000020000000200000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000100000000200000005
CONST	SEGMENT
__xmm@00000020000000100000000200000005 DB 05H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000100000000200000000
CONST	SEGMENT
__xmm@00000020000000100000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000100000000100000002
CONST	SEGMENT
__xmm@00000020000000100000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000100000000100000000
CONST	SEGMENT
__xmm@00000020000000100000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000080000000200000005
CONST	SEGMENT
__xmm@00000020000000080000000200000005 DB 05H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000080000000200000000
CONST	SEGMENT
__xmm@00000020000000080000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000080000000100000002
CONST	SEGMENT
__xmm@00000020000000080000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000080000000100000000
CONST	SEGMENT
__xmm@00000020000000080000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000200000000200000005
CONST	SEGMENT
__xmm@00000010000000200000000200000005 DB 05H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000200000000200000000
CONST	SEGMENT
__xmm@00000010000000200000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000200000000100000002
CONST	SEGMENT
__xmm@00000010000000200000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000200000000100000000
CONST	SEGMENT
__xmm@00000010000000200000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000100000000200000005
CONST	SEGMENT
__xmm@00000010000000100000000200000005 DB 05H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000100000000200000000
CONST	SEGMENT
__xmm@00000010000000100000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000100000000100000002
CONST	SEGMENT
__xmm@00000010000000100000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000100000000100000000
CONST	SEGMENT
__xmm@00000010000000100000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000080000000200000005
CONST	SEGMENT
__xmm@00000010000000080000000200000005 DB 05H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000080000000200000000
CONST	SEGMENT
__xmm@00000010000000080000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000080000000100000002
CONST	SEGMENT
__xmm@00000010000000080000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000080000000100000000
CONST	SEGMENT
__xmm@00000010000000080000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000040000000200000000
CONST	SEGMENT
__xmm@00000010000000040000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000040000000100000002
CONST	SEGMENT
__xmm@00000010000000040000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000040000000100000000
CONST	SEGMENT
__xmm@00000010000000040000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000020000000200000000
CONST	SEGMENT
__xmm@00000010000000020000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000020000000100000002
CONST	SEGMENT
__xmm@00000010000000020000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000020000000100000000
CONST	SEGMENT
__xmm@00000010000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000010000000200000000
CONST	SEGMENT
__xmm@00000010000000010000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000010000000100000000
CONST	SEGMENT
__xmm@00000010000000010000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000100000000200000000
CONST	SEGMENT
__xmm@00000008000000100000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000100000000100000002
CONST	SEGMENT
__xmm@00000008000000100000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000100000000100000000
CONST	SEGMENT
__xmm@00000008000000100000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000080000000200000000
CONST	SEGMENT
__xmm@00000008000000080000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000080000000100000002
CONST	SEGMENT
__xmm@00000008000000080000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000080000000100000000
CONST	SEGMENT
__xmm@00000008000000080000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000040000000200000000
CONST	SEGMENT
__xmm@00000008000000040000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000040000000100000002
CONST	SEGMENT
__xmm@00000008000000040000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000040000000100000000
CONST	SEGMENT
__xmm@00000008000000040000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000020000000200000000
CONST	SEGMENT
__xmm@00000008000000020000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000020000000100000002
CONST	SEGMENT
__xmm@00000008000000020000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000020000000100000000
CONST	SEGMENT
__xmm@00000008000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000010000000200000000
CONST	SEGMENT
__xmm@00000008000000010000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000010000000100000002
CONST	SEGMENT
__xmm@00000008000000010000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000010000000100000000
CONST	SEGMENT
__xmm@00000008000000010000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000080000000200000000
CONST	SEGMENT
__xmm@00000004000000080000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000080000000100000002
CONST	SEGMENT
__xmm@00000004000000080000000100000002 DB 02H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000080000000100000000
CONST	SEGMENT
__xmm@00000004000000080000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000040000000200000000
CONST	SEGMENT
__xmm@00000004000000040000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000040000000100000000
CONST	SEGMENT
__xmm@00000004000000040000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000020000000200000000
CONST	SEGMENT
__xmm@00000004000000020000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000020000000100000000
CONST	SEGMENT
__xmm@00000004000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000010000000200000000
CONST	SEGMENT
__xmm@00000004000000010000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000010000000100000000
CONST	SEGMENT
__xmm@00000004000000010000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000040000000200000000
CONST	SEGMENT
__xmm@00000002000000040000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000040000000100000000
CONST	SEGMENT
__xmm@00000002000000040000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000030000000500000006
CONST	SEGMENT
__xmm@00000002000000030000000500000006 DB 06H, 00H, 00H, 00H, 05H, 00H, 00H
	DB	00H, 03H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000020000000200000000
CONST	SEGMENT
__xmm@00000002000000020000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000020000000100000000
CONST	SEGMENT
__xmm@00000002000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000010000000200000000
CONST	SEGMENT
__xmm@00000002000000010000000200000000 DB 00H, 00H, 00H, 00H, 02H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000002000000010000000100000000
CONST	SEGMENT
__xmm@00000002000000010000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 02H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000003f80000000000000
CONST	SEGMENT
__xmm@00000000000000003f80000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bc343958
CONST	SEGMENT
__real@bc343958 DD 0bc343958r			; -0.011
CONST	ENDS
;	COMDAT __real@461c3c00
CONST	SEGMENT
__real@461c3c00 DD 0461c3c00r			; 9999
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f34fdf4
CONST	SEGMENT
__real@3f34fdf4 DD 03f34fdf4r			; 0.707
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c343958
CONST	SEGMENT
__real@3c343958 DD 03c343958r			; 0.011
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT
; __String$ = ecx
; __C$dead$ = dx

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	push	92					; 0000005cH
	push	ecx
	call	DWORD PTR __imp__wcsrchr
	add	esp, 8

; 547  :     }

	ret	0
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\avstpfinder.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\github\mvtools\sources\avstpfinder.cpp
;	COMDAT ?find_lib@AvstpFinder@@SAPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_buf_ptr$1$ = -66580					; size = 4
_this_hnd$1 = -66580					; size = 4
_mu_name_0$ = -66576					; size = 520
_mf_name_0$ = -66056					; size = 520
_dll_path_0$2 = -65536					; size = 65536
_dll_path_0$3 = -65536					; size = 65536
?find_lib@AvstpFinder@@SAPAUHINSTANCE__@@XZ PROC	; AvstpFinder::find_lib, COMDAT

; 129  : {

	mov	eax, 66580				; 00010414H
	call	__chkstk
	push	ebx
	push	esi
	push	edi

; 130  : 	::HMODULE		dll_hnd = 0;
; 131  : 
; 132  : 	// We look first for the published path, if it exists.
; 133  : 	wchar_t			mf_name_0 [MAX_PATH];
; 134  : 	wchar_t			mu_name_0 [MAX_PATH];
; 135  : 	compose_mapped_filename (mf_name_0, mu_name_0);

	lea	edx, DWORD PTR _mu_name_0$[esp+66592]
	xor	edi, edi
	lea	ecx, DWORD PTR _mf_name_0$[esp+66592]
	call	?compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z ; AvstpFinder::compose_mapped_filename

; 136  : 
; 137  : 	// Mutex
; 138  : 	::HANDLE			mutex_hnd = ::OpenMutexW (SYNCHRONIZE, TRUE, mu_name_0);

	lea	eax, DWORD PTR _mu_name_0$[esp+66592]
	push	eax
	push	1
	push	1048576					; 00100000H
	call	DWORD PTR __imp__OpenMutexW@12

; 139  : 	if (mutex_hnd != 0)

	mov	ebx, DWORD PTR __imp__LoadLibraryW@4
	mov	esi, eax
	test	esi, esi
	je	$LN19@find_lib

; 140  : 	{
; 141  : 		::DWORD			wait_ret = ::WaitForSingleObject (mutex_hnd, INFINITE);

	push	-1
	push	esi
	call	DWORD PTR __imp__WaitForSingleObject@8

; 142  : 		if (wait_ret != WAIT_FAILED)

	cmp	eax, -1
	je	$LN3@find_lib

; 143  : 		{
; 144  : 			// Mapped file
; 145  : 			::HANDLE			file_hnd = ::OpenFileMappingW (

	push	ebp
	lea	eax, DWORD PTR _mf_name_0$[esp+66596]
	push	eax
	push	edi
	push	4
	call	DWORD PTR __imp__OpenFileMappingW@12
	mov	ebp, eax

; 146  : 				FILE_MAP_READ,
; 147  : 				0,
; 148  : 				mf_name_0
; 149  : 			);
; 150  : 			if (file_hnd != 0)

	test	ebp, ebp
	je	SHORT $LN4@find_lib

; 151  : 			{
; 152  : 				wchar_t			dll_path_0 [BUFFER_LEN] = { L'\0' };
; 153  : 				const int		filesize = sizeof (dll_path_0);
; 154  : 				void *			buf_ptr = ::MapViewOfFile (

	push	65536					; 00010000H
	lea	eax, DWORD PTR _dll_path_0$3[esp+66600]
	push	edi
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	push	65536					; 00010000H
	push	edi
	push	edi
	push	4
	push	ebp
	call	DWORD PTR __imp__MapViewOfFile@20
	mov	DWORD PTR _buf_ptr$1$[esp+66596], eax

; 155  : 					file_hnd,
; 156  : 					FILE_MAP_READ,
; 157  : 					0, 0,
; 158  : 					filesize
; 159  : 				);
; 160  : 				if (buf_ptr != 0)

	test	eax, eax
	je	SHORT $LN5@find_lib

; 161  : 				{
; 162  : 					::CopyMemory (dll_path_0, buf_ptr, filesize);

	push	65536					; 00010000H
	push	eax
	lea	eax, DWORD PTR _dll_path_0$3[esp+66604]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 163  : 					::UnmapViewOfFile (buf_ptr);

	push	DWORD PTR _buf_ptr$1$[esp+66596]
	call	DWORD PTR __imp__UnmapViewOfFile@4

; 164  : 
; 165  : 					dll_path_0 [BUFFER_LEN - 1] = L'\0';

	xor	eax, eax
	mov	WORD PTR _dll_path_0$3[esp+132130], ax

; 166  : 					dll_hnd = ::LoadLibraryW (dll_path_0);

	lea	eax, DWORD PTR _dll_path_0$3[esp+66596]
	push	eax
	call	ebx
	mov	edi, eax
$LN5@find_lib:

; 167  : 				}
; 168  : 
; 169  : 				::CloseHandle (file_hnd);

	push	ebp
	call	DWORD PTR __imp__CloseHandle@4
$LN4@find_lib:

; 170  : 				file_hnd = 0;
; 171  : 			}
; 172  : 
; 173  : 			::ReleaseMutex (mutex_hnd);

	push	esi
	call	DWORD PTR __imp__ReleaseMutex@4
	pop	ebp
$LN3@find_lib:

; 174  : 		}
; 175  : 
; 176  : 		::CloseHandle (mutex_hnd);

	push	esi
	call	DWORD PTR __imp__CloseHandle@4

; 177  : 	}
; 178  : 
; 179  : 	// Then we try to load the library with the standard search strategy
; 180  : 	if (dll_hnd == 0)

	test	edi, edi
	jne	$LN23@find_lib
$LN19@find_lib:

; 181  : 	{
; 182  : 		dll_hnd = ::LoadLibraryW (_lib_name_0);

	push	OFFSET ?_lib_name_0@AvstpFinder@@2QB_WB	; AvstpFinder::_lib_name_0
	call	ebx
	mov	edi, eax

; 183  : 	}
; 184  : 
; 185  : 	// Finally, try with the same path as the calling module
; 186  : 	if (dll_hnd == 0)

	test	edi, edi
	jne	$LN23@find_lib

; 261  : 	::HMODULE		kernel32_hnd = LoadLibraryW (L"Kernel32.dll");

	push	OFFSET ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	mov	DWORD PTR _this_hnd$1[esp+66596], eax
	call	ebx

; 262  : 	if (kernel32_hnd != 0)

	test	eax, eax
	je	SHORT $LN14@find_lib

; 263  : 	{
; 264  : 		typedef	::BOOL (WINAPI *GmhewPtr) (
; 265  : 			__in     ::DWORD dwFlags,
; 266  : 			__in_opt ::LPCWSTR lpModuleName,
; 267  : 			__out    ::HMODULE* phModule
; 268  : 		);
; 269  : 		GmhewPtr			gmhew_ptr = reinterpret_cast <GmhewPtr> (::GetProcAddress (

	push	OFFSET ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8

; 270  : 			reinterpret_cast < ::HMODULE> (kernel32_hnd),
; 271  : 			"GetModuleHandleExW"
; 272  : 		));
; 273  : 		if (gmhew_ptr != 0)

	test	eax, eax
	je	SHORT $LN14@find_lib

; 274  : 		{
; 275  : 			const ::BOOL	res_gmhew = gmhew_ptr (

	lea	ecx, DWORD PTR _this_hnd$1[esp+66592]
	push	ecx
	push	OFFSET ?dummy@?1??get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ@4HA
	push	6
	call	eax

; 276  : 				  0x00000004	//   GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
; 277  : 				| 0x00000002,	// | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 278  : 				(LPCWSTR) (&dummy),	// Acutally any object from this module
; 279  : 				&this_hnd
; 280  : 			);
; 281  : 			if (res_gmhew == 0)

	test	eax, eax
	je	SHORT $LN20@find_lib
$LN14@find_lib:

; 282  : 			{
; 283  : 				this_hnd = 0;
; 284  : 			}
; 285  : 		}
; 286  : 	}
; 287  : 
; 288  : 	if (this_hnd == 0)

	mov	esi, DWORD PTR _this_hnd$1[esp+66592]
	test	esi, esi
	jne	SHORT $LN21@find_lib
$LN20@find_lib:

; 289  : 	{
; 290  : #if ! defined (_MSC_VER) || (_MSC_VER < 1300)	// earlier than .NET compiler (VC 6.0)
; 291  : 		// Here's a trick that will get you the handle of the module
; 292  : 		// you're running in without any a-priori knowledge:
; 293  : 		// http://www.dotnet247.com/247reference/msgs/13/65259.aspx
; 294  : 		::MEMORY_BASIC_INFORMATION	mbi;
; 295  : 		::VirtualQuery (&dummy, &mbi, sizeof (mbi));
; 296  : 		this_hnd = reinterpret_cast < ::HMODULE> (mbi.AllocationBase);
; 297  : #else    // VC 7.0
; 298  : 		this_hnd = reinterpret_cast < ::HMODULE> (&__ImageBase);

	mov	esi, OFFSET ___ImageBase
	mov	DWORD PTR _this_hnd$1[esp+66592], esi
$LN21@find_lib:
	push	65536					; 00010000H
	lea	eax, DWORD PTR _dll_path_0$2[esp+66596]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 187  : 	{
; 188  : 		const ::HMODULE	this_hnd = get_code_module ();
; 189  : 
; 190  : 		if (this_hnd != 0)
; 191  : 		{
; 192  : 			const int		buf_len = 32767+1;
; 193  : 			wchar_t			dll_path_0 [buf_len] = { L'\0' };
; 194  : 			const ::DWORD	res_gmfnw =
; 195  : 				::GetModuleFileNameW (this_hnd, dll_path_0, buf_len);

	lea	eax, DWORD PTR _dll_path_0$2[esp+66592]
	push	32768					; 00008000H
	push	eax
	push	esi
	call	DWORD PTR __imp__GetModuleFileNameW@12
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	lea	eax, DWORD PTR _dll_path_0$2[esp+66592]
	push	92					; 0000005cH
	push	eax
	call	DWORD PTR __imp__wcsrchr
	add	esp, 8
; File c:\github\mvtools\sources\avstpfinder.cpp

; 197  : 			if (backslash_0 != 0)

	test	eax, eax
	je	SHORT $LN23@find_lib

; 198  : 			{
; 199  : 				wchar_t *		name_0 = backslash_0 + 1;

	lea	ecx, DWORD PTR [eax+2]

; 200  : 				const size_t	count_max = dll_path_0 + buf_len - name_0;

	lea	eax, DWORD PTR _dll_path_0$2[esp+132128]
	sub	eax, ecx
	sar	eax, 1

; 201  : 				::wcsncpy_s (name_0, count_max, _lib_name_0, count_max);

	push	eax
	push	OFFSET ?_lib_name_0@AvstpFinder@@2QB_WB	; AvstpFinder::_lib_name_0
	push	eax
	push	ecx
	call	DWORD PTR __imp__wcsncpy_s

; 202  : 				dll_path_0 [buf_len - 1] = L'\0';

	xor	eax, eax
	add	esp, 16					; 00000010H
	mov	WORD PTR _dll_path_0$2[esp+132126], ax

; 203  : 				dll_hnd = ::LoadLibraryW (dll_path_0);

	lea	eax, DWORD PTR _dll_path_0$2[esp+66592]
	push	eax
	call	ebx
	pop	edi
	pop	esi
	pop	ebx

; 209  : }

	add	esp, 66580				; 00010414H
	ret	0
$LN23@find_lib:

; 204  : 			}
; 205  : 		}
; 206  : 	}
; 207  : 
; 208  : 	return (dll_hnd);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 209  : }

	add	esp, 66580				; 00010414H
	ret	0
?find_lib@AvstpFinder@@SAPAUHINSTANCE__@@XZ ENDP	; AvstpFinder::find_lib
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\avstpfinder.cpp
;	COMDAT ?compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z
_TEXT	SEGMENT
?compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z PROC	; AvstpFinder::compose_mapped_filename, COMDAT
; _mf_name_0$ = ecx
; _mu_name_0$ = edx

; 227  : {

	push	ebx
	push	ebp
	push	esi
	push	edi

; 228  : 	static const wchar_t	base_0 [] = L"Local\\avstp_dll_info_";
; 229  : 	int				pos = 0;

	xor	esi, esi
	mov	ebx, edx
	mov	ebp, ecx
	mov	eax, 76					; 0000004cH
	xor	edi, edi
$LL2@compose_ma:

; 230  : 	while (base_0 [pos] != L'\0')
; 231  : 	{
; 232  : 		mf_name_0 [pos] = base_0 [pos];

	mov	WORD PTR [edi+ebp], ax

; 233  : 		mu_name_0 [pos] = base_0 [pos];
; 234  : 		++ pos;

	lea	esi, DWORD PTR [esi+1]
	mov	WORD PTR [edi+ebx], ax
	lea	edi, DWORD PTR [esi+esi]
	movzx	eax, WORD PTR ?base_0@?1??compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z@4QB_WB[edi]
	test	ax, ax
	jne	SHORT $LL2@compose_ma

; 235  : 	}
; 236  : 
; 237  : 	const ::DWORD	proc_id = ::GetCurrentProcessId ();

	call	DWORD PTR __imp__GetCurrentProcessId@0
	mov	edx, eax

; 238  : 	for (int i = sizeof (proc_id) * 2 - 1; i >= 0; --i)
; 239  : 	{
; 240  : 		const int		h = (proc_id >> (i * 4)) & 15;

	shr	eax, 28					; 0000001cH

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN8@compose_ma
	lea	ecx, DWORD PTR [eax+48]
	movzx	eax, cx
	jmp	SHORT $LN9@compose_ma
$LN8@compose_ma:
	add	eax, 55					; 00000037H
	movzx	eax, ax
$LN9@compose_ma:

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2], ax
	mov	eax, edx
	shr	eax, 24					; 00000018H
	and	eax, 15					; 0000000fH
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN21@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	add	eax, 48					; 00000030H
	jmp	SHORT $LN42@compose_ma
$LN21@compose_ma:
	add	eax, 55					; 00000037H
$LN42@compose_ma:
	movzx	eax, ax

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+2], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+2], ax
	mov	eax, edx
	shr	eax, 20					; 00000014H
	and	eax, 15					; 0000000fH
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN24@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	add	eax, 48					; 00000030H
	jmp	SHORT $LN43@compose_ma
$LN24@compose_ma:
	add	eax, 55					; 00000037H
$LN43@compose_ma:
	movzx	eax, ax

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+4], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+4], ax
	mov	eax, edx
	shr	eax, 16					; 00000010H
	and	eax, 15					; 0000000fH
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN27@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	add	eax, 48					; 00000030H
	jmp	SHORT $LN44@compose_ma
$LN27@compose_ma:
	add	eax, 55					; 00000037H
$LN44@compose_ma:
	movzx	eax, ax

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+6], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+6], ax
	mov	eax, edx
	shr	eax, 12					; 0000000cH
	and	eax, 15					; 0000000fH
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN30@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	add	eax, 48					; 00000030H
	jmp	SHORT $LN45@compose_ma
$LN30@compose_ma:
	add	eax, 55					; 00000037H
$LN45@compose_ma:
	movzx	eax, ax

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+8], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+8], ax
	mov	eax, edx
	shr	eax, 8
	and	eax, 15					; 0000000fH
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN33@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	add	eax, 48					; 00000030H
	jmp	SHORT $LN46@compose_ma
$LN33@compose_ma:
	add	eax, 55					; 00000037H
$LN46@compose_ma:
	movzx	eax, ax

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+10], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+10], ax
	mov	eax, edx
	shr	eax, 4
	and	eax, 15					; 0000000fH
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN36@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	add	eax, 48					; 00000030H
	jmp	SHORT $LN47@compose_ma
$LN36@compose_ma:
	add	eax, 55					; 00000037H
$LN47@compose_ma:
	movzx	eax, ax
	and	edx, 15					; 0000000fH

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+12], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+12], ax
	lea	eax, DWORD PTR [edx+48]
	cmp	edx, 10					; 0000000aH
	jl	SHORT $LN48@compose_ma

; 241  : 		const wchar_t	c = wchar_t ((h < 10) ? h + L'0' : h - 10 + L'A');

	lea	eax, DWORD PTR [edx+55]
$LN48@compose_ma:
	movzx	eax, ax

; 242  : 		mf_name_0 [pos] = c;

	mov	WORD PTR [ebp+esi*2+14], ax

; 243  : 		mu_name_0 [pos] = c;

	mov	WORD PTR [ebx+esi*2+14], ax

; 244  : 		++ pos;
; 245  : 	}
; 246  : 
; 247  : 	mf_name_0 [pos] = L'_';  mu_name_0 [pos] = L'_';  ++ pos;

	mov	eax, 95					; 0000005fH
	mov	WORD PTR [ebp+esi*2+16], ax
	mov	WORD PTR [ebx+esi*2+16], ax

; 248  : 	mf_name_0 [pos] = L'f';  mu_name_0 [pos] = L'm';  ++ pos;

	mov	eax, 102				; 00000066H
	mov	WORD PTR [ebp+esi*2+18], ax
	mov	eax, 109				; 0000006dH
	mov	WORD PTR [ebx+esi*2+18], ax

; 249  : 	mf_name_0 [pos] = L'\0'; mu_name_0 [pos] = L'\0'; ++ pos;

	xor	eax, eax
	mov	WORD PTR [ebp+esi*2+20], ax
	pop	edi
	mov	WORD PTR [ebx+esi*2+20], ax
	pop	esi
	pop	ebp
	pop	ebx

; 250  : 	assert (pos <= MAX_PATH);
; 251  : }

	ret	0
?compose_mapped_filename@AvstpFinder@@CAXQA_W0@Z ENDP	; AvstpFinder::compose_mapped_filename
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\avstpfinder.cpp
;	COMDAT ?get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_this_hnd$ = -4						; size = 4
?get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ PROC	; AvstpFinder::get_code_module, COMDAT

; 257  : {

	push	ecx

; 258  : 	::HMODULE		this_hnd = 0;
; 259  : 	static int		dummy;
; 260  : 
; 261  : 	::HMODULE		kernel32_hnd = LoadLibraryW (L"Kernel32.dll");

	push	OFFSET ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	mov	DWORD PTR _this_hnd$[esp+8], 0
	call	DWORD PTR __imp__LoadLibraryW@4

; 262  : 	if (kernel32_hnd != 0)

	test	eax, eax
	je	SHORT $LN4@get_code_m

; 263  : 	{
; 264  : 		typedef	::BOOL (WINAPI *GmhewPtr) (
; 265  : 			__in     ::DWORD dwFlags,
; 266  : 			__in_opt ::LPCWSTR lpModuleName,
; 267  : 			__out    ::HMODULE* phModule
; 268  : 		);
; 269  : 		GmhewPtr			gmhew_ptr = reinterpret_cast <GmhewPtr> (::GetProcAddress (

	push	OFFSET ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8

; 270  : 			reinterpret_cast < ::HMODULE> (kernel32_hnd),
; 271  : 			"GetModuleHandleExW"
; 272  : 		));
; 273  : 		if (gmhew_ptr != 0)

	test	eax, eax
	je	SHORT $LN4@get_code_m

; 274  : 		{
; 275  : 			const ::BOOL	res_gmhew = gmhew_ptr (

	lea	ecx, DWORD PTR _this_hnd$[esp+4]
	push	ecx
	push	OFFSET ?dummy@?1??get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ@4HA
	push	6
	call	eax

; 276  : 				  0x00000004	//   GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
; 277  : 				| 0x00000002,	// | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 278  : 				(LPCWSTR) (&dummy),	// Acutally any object from this module
; 279  : 				&this_hnd
; 280  : 			);
; 281  : 			if (res_gmhew == 0)

	test	eax, eax
	je	SHORT $LN7@get_code_m
$LN4@get_code_m:

; 282  : 			{
; 283  : 				this_hnd = 0;
; 284  : 			}
; 285  : 		}
; 286  : 	}
; 287  : 
; 288  : 	if (this_hnd == 0)

	mov	eax, DWORD PTR _this_hnd$[esp+4]
	test	eax, eax
	jne	SHORT $LN5@get_code_m
$LN7@get_code_m:

; 289  : 	{
; 290  : #if ! defined (_MSC_VER) || (_MSC_VER < 1300)	// earlier than .NET compiler (VC 6.0)
; 291  : 		// Here's a trick that will get you the handle of the module
; 292  : 		// you're running in without any a-priori knowledge:
; 293  : 		// http://www.dotnet247.com/247reference/msgs/13/65259.aspx
; 294  : 		::MEMORY_BASIC_INFORMATION	mbi;
; 295  : 		::VirtualQuery (&dummy, &mbi, sizeof (mbi));
; 296  : 		this_hnd = reinterpret_cast < ::HMODULE> (mbi.AllocationBase);
; 297  : #else    // VC 7.0
; 298  : 		this_hnd = reinterpret_cast < ::HMODULE> (&__ImageBase);
; 299  : #endif
; 300  : 	}
; 301  : 
; 302  : 	return (this_hnd);

	mov	eax, OFFSET ___ImageBase
$LN5@get_code_m:

; 303  : }

	pop	ecx
	ret	0
?get_code_module@AvstpFinder@@CAPAUHINSTANCE__@@XZ ENDP	; AvstpFinder::get_code_module
_TEXT	ENDS
END
