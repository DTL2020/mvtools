; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\github\mvtools\sources\interlocked.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?cas@Interlocked@conc@@SAPAXACRAXPAX1@Z		; conc::Interlocked::cas
PUBLIC	?swap@Interlocked@conc@@SAPAXACRAXPAX@Z		; conc::Interlocked::swap
PUBLIC	?cas@Interlocked@conc@@SA_JAC_J_J1@Z		; conc::Interlocked::cas
PUBLIC	?swap@Interlocked@conc@@SA_JAC_J_J@Z		; conc::Interlocked::swap
PUBLIC	?cas@Interlocked@conc@@SAHACHHH@Z		; conc::Interlocked::cas
PUBLIC	?swap@Interlocked@conc@@SAHACHH@Z		; conc::Interlocked::swap
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\conc\interlocked.hpp
;	COMDAT ?swap@Interlocked@conc@@SAHACHH@Z
_TEXT	SEGMENT
?swap@Interlocked@conc@@SAHACHH@Z PROC			; conc::Interlocked::swap, COMDAT
; _dest$ = ecx
; _excg$ = edx

; 47   : 	assert (is_ptr_aligned_nz (&dest));
; 48   : 
; 49   : 	return (

	xchg	DWORD PTR [ecx], edx
	mov	eax, edx

; 50   : 		_InterlockedExchange (reinterpret_cast <volatile long *> (&dest), excg)
; 51   : 	);
; 52   : }

	ret	0
?swap@Interlocked@conc@@SAHACHH@Z ENDP			; conc::Interlocked::swap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\conc\interlocked.hpp
;	COMDAT ?cas@Interlocked@conc@@SAHACHHH@Z
_TEXT	SEGMENT
_comp$ = 8						; size = 4
?cas@Interlocked@conc@@SAHACHHH@Z PROC			; conc::Interlocked::cas, COMDAT
; _dest$ = ecx
; _excg$ = edx

; 58   : 	assert (is_ptr_aligned_nz (&dest));
; 59   : 
; 60   : 	return (_InterlockedCompareExchange (

	mov	eax, DWORD PTR _comp$[esp-4]
	lock	 cmpxchg DWORD PTR [ecx], edx

; 61   : 		reinterpret_cast <volatile long *> (&dest),
; 62   : 		excg,
; 63   : 		comp
; 64   : 	));
; 65   : }

	ret	0
?cas@Interlocked@conc@@SAHACHHH@Z ENDP			; conc::Interlocked::cas
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\conc\interlocked.hpp
;	COMDAT ?swap@Interlocked@conc@@SA_JAC_J_J@Z
_TEXT	SEGMENT
_excg$ = -24						; size = 8
_old$ = -16						; size = 8
_dest$ = -4						; size = 4
_excg$dead$ = 8						; size = 8
?swap@Interlocked@conc@@SA_JAC_J_J@Z PROC		; conc::Interlocked::swap, COMDAT
; _dest$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	xorps	xmm0, xmm0
	mov	DWORD PTR _dest$[ebp], ecx
	push	esi
	movlpd	QWORD PTR _excg$[ebp], xmm0

; 71   : 	assert (is_ptr_aligned_nz (&dest));
; 72   : 
; 73   : 	int64_t			old;
; 74   : 
; 75   : #if conc_WORD_SIZE == 64
; 76   : 
; 77   : 	old = _InterlockedExchange64 (&dest, excg);
; 78   : 
; 79   : #else	// conc_WORD_SIZE
; 80   : 
; 81   : 	__asm
; 82   : 	{
; 83   : 		push				ebx

	push	ebx

; 84   : 		mov				esi, [dest]

	mov	esi, DWORD PTR _dest$[ebp]

; 85   : 		mov				ebx, [dword ptr excg    ]

	mov	ebx, DWORD PTR _excg$[ebp]

; 86   : 		mov				ecx, [dword ptr excg + 4]

	mov	ecx, DWORD PTR _excg$[ebp+4]
$cas_loop$4:

; 87   : 
; 88   : 	cas_loop:
; 89   : 		mov				eax, [esi    ]

	mov	eax, DWORD PTR [esi]

; 90   : 		mov				edx, [esi + 4]

	mov	edx, DWORD PTR [esi+4]

; 91   : 		lock cmpxchg8b	[esi]

	lock	 cmpxchg8b QWORD PTR [esi]

; 92   : 		jnz				cas_loop

	jne	SHORT $cas_loop$4

; 93   : 
; 94   : 		mov				[dword ptr old    ], eax

	mov	DWORD PTR _old$[ebp], eax

; 95   : 		mov				[dword ptr old + 4], edx

	mov	DWORD PTR _old$[ebp+4], edx

; 96   : 		pop				ebx

	pop	ebx

; 97   : 	}
; 98   : 
; 99   : #endif	// conc_WORD_SIZE
; 100  : 
; 101  : 	return (old);

	mov	eax, DWORD PTR _old$[ebp]
	mov	edx, DWORD PTR _old$[ebp+4]

; 102  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?swap@Interlocked@conc@@SA_JAC_J_J@Z ENDP		; conc::Interlocked::swap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\conc\interlocked.hpp
;	COMDAT ?cas@Interlocked@conc@@SA_JAC_J_J1@Z
_TEXT	SEGMENT
_excg$ = 8						; size = 8
_comp$ = 16						; size = 8
?cas@Interlocked@conc@@SA_JAC_J_J1@Z PROC		; conc::Interlocked::cas, COMDAT
; _dest$ = ecx

; 108  : 	assert (is_ptr_aligned_nz (&dest));
; 109  : 
; 110  : 	return (_InterlockedCompareExchange64 (&dest, excg, comp));

	mov	eax, DWORD PTR _comp$[esp-4]
	mov	edx, DWORD PTR _comp$[esp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _excg$[esp+8]
	mov	ebx, DWORD PTR _excg$[esp+4]
	lock	 cmpxchg8b QWORD PTR [esi]

; 111  : }

	pop	esi
	pop	ebx
	ret	0
?cas@Interlocked@conc@@SA_JAC_J_J1@Z ENDP		; conc::Interlocked::cas
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\conc\interlocked.hpp
;	COMDAT ?swap@Interlocked@conc@@SAPAXACRAXPAX@Z
_TEXT	SEGMENT
?swap@Interlocked@conc@@SAPAXACRAXPAX@Z PROC		; conc::Interlocked::swap, COMDAT
; _dest_ptr$ = ecx
; _excg_ptr$ = edx

; 49   : 	return (

	xchg	DWORD PTR [ecx], edx

; 195  : 	assert (&dest_ptr != 0);
; 196  : 
; 197  : 	return (reinterpret_cast <void *> (

	mov	eax, edx

; 198  : 		swap (
; 199  : 			*reinterpret_cast <IntPtr volatile *> (&dest_ptr),
; 200  : 			reinterpret_cast <IntPtr> (excg_ptr)
; 201  : 		)
; 202  : 	));
; 203  : }

	ret	0
?swap@Interlocked@conc@@SAPAXACRAXPAX@Z ENDP		; conc::Interlocked::swap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\github\mvtools\sources\conc\interlocked.hpp
;	COMDAT ?cas@Interlocked@conc@@SAPAXACRAXPAX1@Z
_TEXT	SEGMENT
_comp_ptr$dead$ = 8					; size = 4
?cas@Interlocked@conc@@SAPAXACRAXPAX1@Z PROC		; conc::Interlocked::cas, COMDAT
; _dest_ptr$ = ecx
; _excg_ptr$ = edx

; 60   : 	return (_InterlockedCompareExchange (

	xor	eax, eax
	lock	 cmpxchg DWORD PTR [ecx], edx

; 209  : 	assert (&dest_ptr != 0);
; 210  : 
; 211  : 	return (reinterpret_cast <void *> (
; 212  : 		cas (
; 213  : 			*reinterpret_cast <IntPtr volatile *> (&dest_ptr),
; 214  : 			reinterpret_cast <IntPtr> (excg_ptr),
; 215  : 			reinterpret_cast <IntPtr> (comp_ptr)
; 216  : 		)
; 217  : 	));
; 218  : }

	ret	0
?cas@Interlocked@conc@@SAPAXACRAXPAX1@Z ENDP		; conc::Interlocked::cas
_TEXT	ENDS
END
